{
    "classes": [
        {
            "name": "Client",
            "description": "<p>The YAMDBF Client through which you can access [storage]{@link Client#storage}\nand any of the properties available on a typical Discord.js Client instance</p>",
            "extends": [
                "external:Client"
            ],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "Client",
                "description": "",
                "parameters": [
                    {
                        "name": "options",
                        "type": "YAMDBFOptions",
                        "description": "<p>Object containing required client properties</p>",
                        "default": "",
                        "optional": "",
                        "nullable": ""
                    },
                    {
                        "name": "clientOptions",
                        "type": "external:ClientOptions",
                        "description": "<p>Discord.js ClientOptions</p>",
                        "default": "",
                        "optional": true,
                        "nullable": ""
                    }
                ],
                "examples": []
            },
            "properties": [
                {
                    "name": "owner",
                    "access": "",
                    "virtual": false,
                    "description": "<p>The owner/owners of the bot, represented as an array of IDs.\nThese IDs determine who is allowed to use commands flagged as\n<code>ownerOnly</code></p>",
                    "type": {
                        "names": [
                            "Array.<string>"
                        ]
                    }
                },
                {
                    "name": "commandsDir",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Directory to find command class files. Optional\nif client is passive.<br>\n<strong>See:</strong> {@link Client#passive}</p>",
                    "type": {
                        "names": [
                            "string"
                        ]
                    }
                },
                {
                    "name": "eventsDir",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Directory to find Event class files. Optional\nif client is passive.<br>\n<strong>See:</strong> {@link Client#passive}</p>",
                    "type": {
                        "names": [
                            "string"
                        ]
                    }
                },
                {
                    "name": "localeDir",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Directory to find custom localization files</p>",
                    "type": {
                        "names": [
                            "string"
                        ]
                    }
                },
                {
                    "name": "defaultLang",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Default language to use for localization</p>",
                    "type": {
                        "names": [
                            "string"
                        ]
                    }
                },
                {
                    "name": "statusText",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Status text for the client</p>",
                    "type": {
                        "names": [
                            "string"
                        ]
                    }
                },
                {
                    "name": "readyText",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Text to output when the client is ready. If not\nprovided nothing will be logged, giving the\nopportunity to log something more dynamic\non <code>clientReady</code></p>",
                    "type": {
                        "names": [
                            "string"
                        ]
                    }
                },
                {
                    "name": "unknownCommandError",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Whether or not a generic 'command not found' message\nshould be given in DMs to instruct the user to\nuse the <code>help</code> command. <code>true</code> by default</p>",
                    "type": {
                        "names": [
                            "boolean"
                        ]
                    }
                },
                {
                    "name": "dmHelp",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Whether or not the help command should send its output\nin a DM to the command caller</p>",
                    "type": {
                        "names": [
                            "boolean"
                        ]
                    }
                },
                {
                    "name": "passive",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Whether or not this client is passive. Passive clients\nwill not register a command dispatcher or a message\nlistener. This allows passive clients to be created that\ndo not respond to any commands but are able to perform\nactions based on whatever the framework user wants</p>",
                    "type": {
                        "names": [
                            "boolean"
                        ]
                    }
                },
                {
                    "name": "pause",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Whether or not the client will pause after loading Client\nStorage, giving the opportunity to add/change default\nsettings before guild settings are created for the first\ntime. If this is used, you must create a listener for <code>'pause'</code>,\nand call <code>&lt;Client&gt;.continue()</code> when you have finished doing\nwhat you need to do.</p>\n<p>If adding new default settings is desired <em>after</em> guild settings\nhave already been generated for the first time, they should be\nadded after <code>'clientReady'</code> so they can be properly pushed to\nthe settings for all guilds</p>",
                    "type": {
                        "names": [
                            "boolean"
                        ]
                    }
                },
                {
                    "name": "disableBase",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Array of base command names to skip when loading commands. Base commands\nmay only be disabled by name, not by alias</p>",
                    "type": {
                        "names": [
                            "Array.<BaseCommandName>"
                        ]
                    }
                },
                {
                    "name": "rateLimitManager",
                    "access": "",
                    "virtual": false,
                    "description": "<p>A convenient instance of {@link RateLimitManager} for use anywhere\nthe Client is available</p>",
                    "type": {
                        "names": [
                            "RateLimitManager"
                        ]
                    }
                },
                {
                    "name": "eventLoader",
                    "access": "",
                    "virtual": false,
                    "description": "<p>The EventLoader the client uses to load events. The client will load events\nfrom the <code>eventsdir</code> directory passed in your <code>YAMDBFOptions</code>.</p>\n<p>Can be used by plugins to register directories to load custom event handlers from</p>",
                    "type": {
                        "names": [
                            "EventLoader"
                        ]
                    }
                },
                {
                    "name": "provider",
                    "access": "",
                    "virtual": false,
                    "description": "<p>The chosen storage provider to use for the Client.\nDefaults to {@link JSONProvider}</p>",
                    "type": {
                        "names": [
                            "StorageProvider"
                        ]
                    }
                },
                {
                    "name": "plugins",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Loads plugins and contains loaded plugins in case\naccessing a loaded plugin at runtime is desired</p>",
                    "type": {
                        "names": [
                            "PluginLoader"
                        ]
                    }
                },
                {
                    "name": "storage",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Client-specific storage. Also contains a <code>guilds</code> Collection property containing\nall GuildStorage instances</p>",
                    "type": {
                        "names": [
                            "ClientStorage"
                        ]
                    }
                },
                {
                    "name": "commands",
                    "access": "",
                    "virtual": false,
                    "description": "<p>[Collection]{@link external:Collection} containing all loaded commands</p>",
                    "type": {
                        "names": [
                            "CommandRegistry.<string, Command>"
                        ]
                    }
                },
                {
                    "name": "resolvers",
                    "access": "",
                    "virtual": false,
                    "description": "<p>ResolverLoader instance containing loaded argument resolvers</p>",
                    "type": {
                        "names": [
                            "ResolverLoader"
                        ]
                    }
                },
                {
                    "name": "compact",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Whether or not compact mode is enabled</p>",
                    "type": {
                        "names": [
                            "boolean"
                        ]
                    }
                },
                {
                    "name": "buttons",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Button shortcuts for compact mode. Defaults are\n<code>success</code>, <code>fail</code>, and <code>working</code>. These can be overwritten\nvia the <code>buttons</code> field in {@link YAMDBFOptions}</p>",
                    "type": {
                        "names": [
                            "object"
                        ]
                    }
                },
                {
                    "name": "argsParser",
                    "access": "",
                    "virtual": false,
                    "description": "<p>The argument parsing function the framework will use to parse\ncommand arguments from message content input. Defaults to\nsplitting on {@link Command#argOpts.separator}</p>",
                    "type": {
                        "names": [
                            "function"
                        ]
                    }
                },
                {
                    "name": "tsNode",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Whether or not ts-node is in use, allowing the Client\nto attempt to load .ts files when loading Commands</p>",
                    "type": {
                        "names": [
                            "boolean"
                        ]
                    }
                },
                {
                    "name": "ratelimit",
                    "access": "",
                    "virtual": false,
                    "description": "<p>The global ratelimit for all command usage per user</p>",
                    "type": {
                        "names": [
                            "string"
                        ]
                    }
                }
            ],
            "functions": [
                {
                    "name": "start",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Starts the login process, culminating in the <code>clientReady</code> event</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "Client",
                        "description": ""
                    }
                },
                {
                    "name": "continue",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Shortcut method for <code>&lt;Client&gt;.emit('continue')</code></p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "void",
                        "description": ""
                    }
                },
                {
                    "name": "isOwner",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Returns whether or not the given user is an owner\nof the client/bot</p>",
                    "parameters": [
                        {
                            "name": "user",
                            "type": "external:User",
                            "description": "<p>User to check</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                {
                    "name": "setDefaultSetting",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Set the value of a default setting key and push it to all guild\nsetting storages. Will not overwrite a setting in guild settings\nstorage if there is already an existing key with the given value</p>",
                    "parameters": [
                        {
                            "name": "key",
                            "type": "string",
                            "description": "<p>The key to use in settings storage</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "description": "<p>The value to use in settings storage</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<Client>",
                        "description": ""
                    }
                },
                {
                    "name": "removeDefaultSetting",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Remove a <code>defaultGuildSettings</code> item. Will not remove from any current\nguild settings, but will remove the item from the defaults added to\nnew guild settings storages upon creation</p>",
                    "parameters": [
                        {
                            "name": "key",
                            "type": "string",
                            "description": "<p>The key to use in settings storage</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<Client>",
                        "description": ""
                    }
                },
                {
                    "name": "defaultSettingExists",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Check if a default guild setting exists</p>",
                    "parameters": [
                        {
                            "name": "key",
                            "type": "string",
                            "description": "<p>The default settings key to check for</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<boolean>",
                        "description": ""
                    }
                },
                {
                    "name": "getPrefix",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Shortcut to return the command prefix for the provided guild</p>",
                    "parameters": [
                        {
                            "name": "guild",
                            "type": "external:Guild",
                            "description": "<p>The Guild to get the prefix of</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<(string|null)>",
                        "description": ""
                    }
                },
                {
                    "name": "createBotInvite",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Generate a bot invite URL based on the permissions included\nin all of the commands the client currently has loaded.</p>\n<blockquote>\n<p><strong>Note:</strong> This should be run after <code>clientReady</code> to ensure\nno command permissions are missing from the permissions set\nthat will be used to generate the URL</p>\n</blockquote>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<string>",
                        "description": ""
                    }
                },
                {
                    "name": "sweepStorages",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Clean out expired guild storage/settings</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                },
                {
                    "name": "use",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Adds a middleware function to be used when any command is called\nto make modifications to args, determine if the command can\nbe run, or anything else you want to do every time any command\nis called.</p>\n<p>See {@link MiddlewareFunction} for information on how a middleware\nfunction should be represented</p>\n<p>Usage example:</p>\n<pre class=\"prettyprint source\"><code>&lt;Client>.use((message, args) => [message, args.map(a => a.toUpperCase())]);</code></pre><p>This will add a middleware function to all commands that will attempt\nto transform all args to uppercase. This will of course fail if any\nof the args are not a string.</p>\n<blockquote>\n<p><strong>Note:</strong> Middleware functions should only be added to the client one\ntime each and thus should not be added within any sort of event or loop.\nMultiple separate middleware functions can be added to the via multiple\nseparate calls to this method</p>\n</blockquote>\n<blockquote>\n<p><strong>Warning:</strong> Do not use middleware for overriding the default argument\nsplitting. Use {@link YAMDBFOptions.argsParser} instead. Otherwise\nyou will see inconsistent results when using Command shortcuts, as\nargument splitting for shortcut interpolation always happens before\nmiddleware is run</p>\n</blockquote>",
                    "parameters": [
                        {
                            "name": "func",
                            "type": "MiddlewareFunction",
                            "description": "<p>The middleware function to use</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Client",
                        "description": ""
                    }
                },
                {
                    "name": "_reloadCustomCommands",
                    "access": "private",
                    "virtual": false,
                    "description": "<p>Reload custom commands. Used internally by the <code>reload</code> command</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "_reloadEvents",
                    "access": "private",
                    "virtual": false,
                    "description": "<p>Reload Events from all registered event source directories</p>",
                    "parameters": [],
                    "examples": []
                }
            ],
            "events": [
                {
                    "name": "event:clientReady",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Emitted when the client is ready. Should be used instead of Discord.js'\n<code>ready</code> event, as this is the point that everything is set up within the\nYAMDBF Client and it's all ready to go</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "event:command",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Emitted whenever a command is successfully called</p>",
                    "parameters": [
                        {
                            "name": "name",
                            "type": "string",
                            "description": "<p>Name of the called command</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "args",
                            "type": "Array.<any>",
                            "description": "<p>Args passed to the called command</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "execTime",
                            "type": "number",
                            "description": "<p>Time command took to execute</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "message",
                            "type": "external:Message",
                            "description": "<p>Message that triggered the command</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": []
                },
                {
                    "name": "event:unknownCommand",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Emitted whenever a command is called that doesn't exist</p>",
                    "parameters": [
                        {
                            "name": "name",
                            "type": "string",
                            "description": "<p>The name of the command that was attempted to be called</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "args",
                            "type": "Array.<any>",
                            "description": "<p>Args passed to the unknown command</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "message",
                            "type": "external:Message",
                            "description": "<p>Message that triggered the unknown command</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": []
                },
                {
                    "name": "event:noCommand",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Emitted whenever a message is received that does not contain a command or unknown command</p>",
                    "parameters": [
                        {
                            "name": "message",
                            "type": "external:Message",
                            "description": "<p>Message that did not contain a command or unknown command</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": []
                },
                {
                    "name": "event:blacklistAdd",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Emitted whenever a user is blacklisted</p>",
                    "parameters": [
                        {
                            "name": "user",
                            "type": "User",
                            "description": "<p>User who was blacklisted</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "global",
                            "type": "boolean",
                            "description": "<p>Whether or not blacklisting is global</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": []
                },
                {
                    "name": "event:blacklistRemove",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Emitted whenever a user is removed from the blacklist</p>",
                    "parameters": [
                        {
                            "name": "user",
                            "type": "User",
                            "description": "<p>User who was removed</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "global",
                            "type": "boolean",
                            "description": "<p>Whether or not removal is global</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": []
                },
                {
                    "name": "event:pause",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Emitted when the client is waiting for you to send a <code>continue</code> event,\nafter which <code>clientReady</code> will be emitted</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "event:continue",
                    "access": "",
                    "virtual": false,
                    "description": "<p>To be emitted after the <code>pause</code> event when you have finished setting\nthings up that should be set up before the client is ready for use</p>",
                    "parameters": [],
                    "examples": []
                }
            ]
        },
        {
            "name": "Plugin",
            "description": "<p>Abstract class for Client plugins to extend. Provides runtime errors\nfor missing method implementations, and is necessary at compile-time\nwhen using TypeScript for the compiler to recognize a Plugin as valid.</p>\n<p>Plugins will always be passed the YAMDBF Client instance when loaded.\nIf you intend to do anything with it you must receive it in your\nplugin constructor which means you will need a <code>super()</code> call since\nyou will be overriding the parent Plugin constructor</p>\n<p>A plugin should be a self-contained module that provides additional\nfunctionality for a Client. A plugin could do something as simple as\nlogging all command output to a logging channel, registering a set\nof custom commands for the client to use, or even providing new\nlocalization language packs.</p>\n<p>A plugin should not attempt to register custom commands via any means\nother than [&lt;Client&gt;.commands.registerExternal()]{@link CommandRegistry#registerExternal},\notherwise any custom commands could be unloaded if the <code>reload</code> command\nis called</p>\n<blockquote><strong>Note:</strong> A plugin is expected to have two things at runtime:\na <code>name</code> property containing the name of the plugin, and an <code>init()</code>\nmethod that will be called by the framework after loading the plugin.<br>\nSee: {@link IPlugin#name} and {@link IPlugin#init}</blockquote>\n\n<blockquote><strong>Warning:</strong> Given the nature of the Plugin system, this allows you to\nuse code from other people for your bot. Considering any plugin will\nhave access to your Client instance and thus your Bot token, you should\nbe absolutely certain that the plugin is not going to do anything\nmalicious before using it</blockquote>",
            "extends": [],
            "access": "",
            "virtual": true,
            "fires": "",
            "constructor": {
                "name": "Plugin",
                "description": "",
                "parameters": [
                    {
                        "name": "client",
                        "type": "Client",
                        "description": "<p>The YAMDBF Client instance. This will be passed by\nthe plugin loader when the plugin is loaded at runtime. This will automatically\nbe received and stored under <code>&lt;Plugin&gt;.client</code> unless you provide your own\nconstructor implementation, in which case it must be received and passed\nto <code>super()</code></p>",
                        "default": "",
                        "optional": "",
                        "nullable": ""
                    }
                ],
                "examples": []
            }
        },
        {
            "name": "PluginLoader",
            "description": "<p>Loads plugins and holds loaded plugins in case accessing\nloaded plugins at runtime is desired</p>",
            "extends": [],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "PluginLoader",
                "description": "",
                "parameters": [
                    {
                        "name": "client",
                        "type": "Client",
                        "description": "",
                        "default": "",
                        "optional": "",
                        "nullable": ""
                    },
                    {
                        "name": "plugins",
                        "type": "Array.<(PluginConstructor|string)>",
                        "description": "",
                        "default": "",
                        "optional": "",
                        "nullable": ""
                    }
                ],
                "examples": []
            },
            "properties": [
                {
                    "name": "loaded",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Object mapping Plugin names to Plugin instances</p>",
                    "type": {
                        "names": [
                            "object"
                        ]
                    }
                }
            ],
            "functions": [
                {
                    "name": "_loadPlugins",
                    "access": "private",
                    "virtual": false,
                    "description": "<p>Loads the plugins passed in the YAMDBF Client options.\nCalled internally by the YAMDBF Client at startup</p>",
                    "parameters": [],
                    "examples": []
                }
            ]
        },
        {
            "name": "Command",
            "description": "<p>Command class to extend to create commands users can execute</p>",
            "extends": [],
            "access": "",
            "virtual": true,
            "fires": "",
            "constructor": {
                "name": "Command",
                "description": "",
                "parameters": [
                    {
                        "name": "info",
                        "type": "CommandInfo",
                        "description": "<p>Object containing required command properties</p>",
                        "default": "",
                        "optional": "",
                        "nullable": ""
                    }
                ],
                "examples": []
            },
            "functions": [
                {
                    "name": "action",
                    "access": "",
                    "virtual": true,
                    "description": "<p>Action to be executed when the command is called. The following parameters\nare what command actions will be passed by the {@link CommandDispatcher} whenever\na command is called. Be sure to receive these in proper order when writing\nnew commands</p>",
                    "parameters": [
                        {
                            "name": "message",
                            "type": "external:Message",
                            "description": "<p>Discord.js message object</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "args",
                            "type": "Array.<any>",
                            "description": "<p>An array containing the args parsed from the command calling message.<br>\n                       Will contain strings unless middleware is used to transform the args</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "any",
                        "description": ""
                    }
                },
                {
                    "name": "init",
                    "access": "",
                    "virtual": true,
                    "description": "<p>Can be included in a command to initlialize any resources a command\nneeds at runtime that require things that are not available within\na command's constructor like the client instance or client/guild storages.</p>\n<p>Will be called after all commands are loaded (including those from\nany loaded plugins) and after all base framework storages (client and guild)\nare ready for use.</p>\n<blockquote>\n<p><strong>Note:</strong> Can be async if needed</p>\n</blockquote>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                },
                {
                    "name": "_register",
                    "access": "private",
                    "virtual": false,
                    "description": "<p>Make necessary asserts for Command validity.\nCalled internally by the command loader</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "enable",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Enable this command if it is disabled</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "void",
                        "description": ""
                    }
                },
                {
                    "name": "disable",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Disable this command if it is enabled</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "void",
                        "description": ""
                    }
                },
                {
                    "name": "use",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Adds a middleware function to be used when the command is called\nto make modifications to args, determine if the command can\nbe run, or anything else you want to do whenever this command\nis called.</p>\n<p>See {@link MiddlewareFunction} for information on how a middleware\nfunction should be represented</p>\n<p>Usage example:</p>\n<pre class=\"prettyprint source\"><code>&lt;Client>.use((message, args) => [message, args.map(a => a.toUpperCase())]);</code></pre><p>This will add a middleware function to this command that will attempt\nto transform all args to uppercase. This will of course fail if any\nof the args are not a string.</p>\n<blockquote>\n<p><strong>Note:</strong> Middleware functions should only be added to a command one\ntime each and thus should not be added within any sort of event or loop.\nMultiple separate middleware functions can be added to the via multiple\nseparate calls to this method</p>\n</blockquote>",
                    "parameters": [
                        {
                            "name": "func",
                            "type": "MiddlewareFunction",
                            "description": "<p>The middleware function to use</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Command",
                        "description": ""
                    }
                },
                {
                    "name": "respond",
                    "access": "protected",
                    "virtual": false,
                    "description": "<p>Send provided response to the provided message's channel,\nleveraging compact mode mechanics if enabled</p>",
                    "parameters": [
                        {
                            "name": "message",
                            "type": "external:Message",
                            "description": "<p>Discord.js Message object</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "response",
                            "type": "string",
                            "description": "<p>String to send</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "options",
                            "type": "RespondOptions",
                            "description": "<p>Optional options for the response</p>",
                            "default": "",
                            "optional": true,
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<(external:Message|Array.<external:Message>|undefined)>",
                        "description": ""
                    }
                },
                {
                    "name": "_validatePermissions",
                    "access": "private",
                    "virtual": false,
                    "description": "<p>Validate PermissionResolvables in the given array, throwing an error\nfor any that are invalid</p>",
                    "parameters": [],
                    "examples": []
                }
            ],
            "properties": [
                {
                    "name": "client",
                    "access": "",
                    "virtual": false,
                    "description": "<p>YAMDBF Client instance</p>",
                    "type": {
                        "names": [
                            "Client"
                        ]
                    }
                },
                {
                    "name": "name",
                    "access": "",
                    "virtual": false,
                    "description": "<p>The name of the command, used by the dispatcher\nto determine the command being executed</p>",
                    "type": {
                        "names": [
                            "string"
                        ]
                    }
                },
                {
                    "name": "desc",
                    "access": "",
                    "virtual": false,
                    "description": "<p>A brief description of the command, displayed\nin the commands list via the Help command</p>",
                    "type": {
                        "names": [
                            "string"
                        ]
                    }
                },
                {
                    "name": "usage",
                    "access": "",
                    "virtual": false,
                    "description": "<p>An example of command usage. The token <code>&lt;prefix&gt;</code> will\nbe replaced by the guild-specific command prefix in the Help command when\n<code>help &lt;command&gt;</code> is called</p>",
                    "type": {
                        "names": [
                            "string"
                        ]
                    }
                },
                {
                    "name": "info",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Extra information about the command to be displayed\nby the Help command when <code>help &lt;command&gt;</code> is called</p>",
                    "type": {
                        "names": [
                            "string"
                        ]
                    }
                },
                {
                    "name": "group",
                    "access": "",
                    "virtual": false,
                    "description": "<p>The command group that the command belongs to. Allows commands to be\ngrouped for disabling. The group 'base' cannot be disabled.</p>",
                    "type": {
                        "names": [
                            "string"
                        ]
                    }
                },
                {
                    "name": "aliases",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Aliases the command can be called by other than its name</p>",
                    "type": {
                        "names": [
                            "Array.<string>"
                        ]
                    }
                },
                {
                    "name": "guildOnly",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Whether or not a command can only be used within a\nguild text channel</p>",
                    "type": {
                        "names": [
                            "boolean"
                        ]
                    }
                },
                {
                    "name": "hidden",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Whether or not the command is to be hidden from the\ncommands list via the default help command</p>",
                    "type": {
                        "names": [
                            "boolean"
                        ]
                    }
                },
                {
                    "name": "argOpts",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Options for how arguments should be parsed.<br>\n<strong>See:</strong> {@link ArgOpts}</p>",
                    "type": {
                        "names": [
                            "ArgOpts"
                        ]
                    }
                },
                {
                    "name": "callerPermissions",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Array of permissions required by the command\ncaller to be able to execute the command in\nthe guild the command is called in.</p>\n<p>If any permissions are provided the command's <code>guildOnly</code>\nproperty will be automatically overridden to true</p>",
                    "type": {
                        "names": [
                            "Array.<external:PermissionResolvable>"
                        ]
                    }
                },
                {
                    "name": "clientPermissions",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Array of permissions required by the client\nto be able to execute the command in the guild\nthe command is called in.</p>\n<p>If any permissions are provided the command's <code>guildOnly</code>\nproperty will be automatically overridden to true</p>",
                    "type": {
                        "names": [
                            "Array.<external:PermissionResolvable>"
                        ]
                    }
                },
                {
                    "name": "roles",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Array of specific {@link external:Role} names required to use the command.\nIf the command caller has any (even just one) of the roles in the array,\nthey will be able to use the command.</p>\n<p>If any roles are provided the command's <code>guildOnly</code> property will be\nautomatically set to <code>true</code></p>\n<blockquote>\n<p><strong>Note:</strong> This is far inferior to {@link Command#callerPermissions},\nusing the base <code>limit</code> command's role-limiting system, or really even\na custom-engineered solution to control who can use a command. Forcing\nservers to create Roles with specific names makes your bot that much\nless configurable on a per-guild basis, and configurability is what\nYAMDBF is all about. But, for the sake of simplicity, this is available</p>\n</blockquote>",
                    "type": {
                        "names": [
                            "Array.<string>"
                        ]
                    }
                },
                {
                    "name": "ownerOnly",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Whether or not the command can be used only by the client/bot owner(s).<br>\n<strong>See:</strong> [Client#config.owner]{@link Client#config}</p>",
                    "type": {
                        "names": [
                            "boolean"
                        ]
                    }
                },
                {
                    "name": "external",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Whether or not this command was registered via {@link CommandRegistry#registerExternal}\nby some means other than the command loader like a Plugin</p>",
                    "type": {
                        "names": [
                            "boolean"
                        ]
                    }
                },
                {
                    "name": "lock",
                    "access": "",
                    "virtual": false,
                    "description": "<p>The CommmandLock this command uses. Must be assigned manually if\nlocking functionality is desired</p>",
                    "type": {
                        "names": [
                            "CommandLock"
                        ]
                    }
                },
                {
                    "name": "lockTimeout",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Time until command locks will be cancelled if a command\ndoes not finish in time</p>",
                    "type": {
                        "names": [
                            "number"
                        ]
                    }
                },
                {
                    "name": "ratelimit",
                    "access": "",
                    "virtual": false,
                    "description": "<p>The ratelimit for this command per user</p>",
                    "type": {
                        "names": [
                            "string"
                        ]
                    }
                },
                {
                    "name": "disabled",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Whether or not this command is disabled</p>",
                    "type": {
                        "names": [
                            "boolean"
                        ]
                    }
                }
            ]
        },
        {
            "name": "CommandDispatcher",
            "description": "<p>Handles dispatching commands</p>",
            "extends": [],
            "access": "private",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "CommandDispatcher",
                "description": "",
                "parameters": [],
                "examples": []
            },
            "functions": [
                {
                    "name": "setReady",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Set the dispatcher as ready to receive and dispatch commands</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "handleMessage",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Handle received messages</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "isLocked",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Return whether or not the given command is locked, either directly\nor as a sibling of another command</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "getCurrentLock",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Return the lock that is preventing the command from being called.\nThis can be the command's own lock, or the lock of another command\nthat the given command is a sibling of</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "isBlacklisted",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Check if the calling user is blacklisted</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "canCallCommand",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Return whether or not the command is allowed to be called based\non whatever circumstances are present at call-time, throwing\nappropriate errors as necessary for unsatisfied conditions</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "passedRateLimiters",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Return whether or not the message author passed global\nand command-specific ratelimits for the given command</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "isRateLimited",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Check global or command-specific ratelimits for the given message\nauthor, notify them if they exceed ratelimits, and return whether\nor not the user is ratelimited</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "checkClientPermissions",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Return permissions the client is missing to execute the given command</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "checkCallerPermissions",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Return the permissions the caller is missing to call the given command</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "passedRoleLimiter",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Return whether or not the message author passes the role limiter</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "hasRoles",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Return whether or not the user has one of the roles specified\nin the command's requisite roles</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "unknownCommandError",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Return an error for unknown commands in DMs</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "guildOnlyError",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Return an error for guild only commands</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "missingClientPermissionsError",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Return an error for missing caller permissions</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "missingCallerPermissionsError",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Return an error for missing caller permissions</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "failedLimiterError",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Return an error for failing a command limiter</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "missingRolesError",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Return an error for missing roles</p>",
                    "parameters": [],
                    "examples": []
                }
            ]
        },
        {
            "name": "CommandLoader",
            "description": "<p>Handles loading all commands from the given Client's commandsDir</p>",
            "extends": [],
            "access": "private",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "CommandLoader",
                "description": "",
                "parameters": [],
                "examples": []
            },
            "functions": [
                {
                    "name": "loadCommandsFrom",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Load commands from the given directory</p>",
                    "parameters": [
                        {
                            "name": "dir",
                            "type": "string",
                            "description": "<p>Directory to load from</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "base",
                            "type": "boolean",
                            "description": "<p>Whether or not the commands being loaded are base commands</p>",
                            "default": false,
                            "optional": true,
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "number",
                        "description": "<p>The number of Commands loaded from the directory</p>"
                    }
                },
                {
                    "name": "_findCommandClasses",
                    "access": "private",
                    "virtual": false,
                    "description": "<p>Recursively search for Command classes within the given object</p>",
                    "parameters": [],
                    "examples": []
                }
            ]
        },
        {
            "name": "CommandLock",
            "description": "<p>Class to be used by a command that should prevent others from using\nit when in use by anyone else. CommandLocks can define sibling commands\nby name that will also be locked when the command is locked.</p>\n<blockquote>\n<p>To use this (or your own extension class) on a Command, create a new\ninstance and assign it to your Command's <code>lock</code> field in your Command\nconstructor.</p>\n</blockquote>\n<p>By default a command will be locked for a maximum of 30 seconds if\nsomething goes wrong and a command fails to finish. This can be\nchanged by setting <code>lockTimeout</code> in your CommandInfo to a desired\ntime in ms, or <code>0</code> to disable the lock timeout entirely.</p>\n<p><strong>NOTE:</strong> Command locks only apply within a guild context. You must\ndeclare set <code>guildOnly</code> to <code>true</code> to be able to utilize a CommandLock\nfor that command.</p>\n<blockquote>\n<p>By extending this class and overriding <code>lock()</code>, <code>isLocked()</code>, <code>free()</code>,\nand <code>getError()</code> with your own definitions you can effectively define your own\nlock behavior. These methods will be passed the same Message context and\narguments as your Command so you can define any behavior you desire, like\nlocking multiple commands that operate on a given user while one of the\ncommands is in use.</p>\n</blockquote>",
            "extends": [],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "CommandLock",
                "description": "",
                "parameters": [
                    {
                        "name": "siblings",
                        "type": "string",
                        "description": "<p>Associated commands to lock</p>",
                        "default": "",
                        "optional": "",
                        "nullable": ""
                    }
                ],
                "examples": []
            },
            "functions": [
                {
                    "name": "lock",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Sets the lock</p>",
                    "parameters": [
                        {
                            "name": "message",
                            "type": "Message",
                            "description": "<p>Message that triggered the command</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "args",
                            "type": "Array.<any>",
                            "description": "<p>Arguments passed to the command</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "void",
                        "description": ""
                    }
                },
                {
                    "name": "isLocked",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Returns whether or not this lock is active</p>",
                    "parameters": [
                        {
                            "name": "message",
                            "type": "Message",
                            "description": "<p>Message that triggered the command</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "args",
                            "type": "Array.<any>",
                            "description": "<p>Arguments passed to the command</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                {
                    "name": "free",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Frees this lock. Called automatically when the command finishes,\nor when the lockTimeout fires</p>",
                    "parameters": [
                        {
                            "name": "message",
                            "type": "Message",
                            "description": "<p>Message that triggered the command</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "args",
                            "type": "Array.<any>",
                            "description": "<p>Arguments passed to the command</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "void",
                        "description": ""
                    }
                },
                {
                    "name": "getError",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Get an error string describing the effects of this lock. Defaults\nto <code>'This command is currently in use.</code> for en_us.</p>\n<blockquote>\n<p>When defining your own lock behavior, consider using details\nrelated to the conditions under which your commands are locked.</p>\n</blockquote>",
                    "parameters": [
                        {
                            "name": "lang",
                            "type": "string",
                            "description": "<p>The language to use for the error string</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "message",
                            "type": "Message",
                            "description": "<p>Message that triggered the command</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "args",
                            "type": "Array.<any>",
                            "description": "<p>Arguments passed to the command</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "string",
                        "description": ""
                    }
                }
            ]
        },
        {
            "name": "CommandRegistry",
            "description": "<p>Stores loaded Commands in a Collection keyed by each Command's <code>name</code> property</p>",
            "extends": [
                "external:Collection"
            ],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "CommandRegistry",
                "description": "",
                "parameters": [],
                "examples": []
            },
            "properties": [
                {
                    "name": "groups",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Contains all [Command groups]{@link Command#group}</p>",
                    "type": {
                        "names": [
                            "Array.<string>"
                        ]
                    }
                }
            ],
            "functions": [
                {
                    "name": "registerExternal",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Register an external command and add it to the <code>&lt;Client&gt;.commands</code>\n[collection]{@link external:Collection}, erroring on duplicate\naliases</p>\n<blockquote>\n<p><strong>Note:</strong> This is intended for Plugins to use to register external\ncommands with the Client instance. Under normal circumstances\ncommands should be added by placing them in the directory passed\nto the <code>commandsDir</code> YAMDBF Client option</p>\n</blockquote>",
                    "parameters": [
                        {
                            "name": "command",
                            "type": "Command",
                            "description": "<p>The Command instance to be registered</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "void",
                        "description": ""
                    }
                },
                {
                    "name": "resolve",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Resolve the given Command name or alias to a registered Command</p>",
                    "parameters": [
                        {
                            "name": "input",
                            "type": "string",
                            "description": "<p>Command name or alias</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": [
                            "Command",
                            "undefined"
                        ],
                        "description": ""
                    }
                },
                {
                    "name": "_registerInternal",
                    "access": "private",
                    "virtual": false,
                    "description": "<p>Complete registration of a command and add to the parent collection.</p>\n<p>This is an internal method and should not be used. Use\n<code>registerExternal()</code> instead</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "_checkDuplicateAliases",
                    "access": "private",
                    "virtual": false,
                    "description": "<p>Check for duplicate aliases, erroring on any. Used internally</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "_checkReservedCommandNames",
                    "access": "private",
                    "virtual": false,
                    "description": "<p>Check for commands with reserved names. Used internally</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "_initCommands",
                    "access": "private",
                    "virtual": false,
                    "description": "<p>Run the <code>init()</code> method of all loaded commands.\nThis is an internal method and should not be used</p>",
                    "parameters": [],
                    "examples": []
                }
            ]
        },
        {
            "name": "CompactModeHelper",
            "description": "<p>Helper singleton for attaching single-use, expiring reaction buttons to\nMessages, to be used by the Client when compact mode is active</p>",
            "extends": [],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "CompactModeHelper",
                "description": "",
                "parameters": [],
                "examples": []
            },
            "functions": [
                {
                    "name": "createInstance",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Create the CompactModeHelper singleton instance</p>\n<blockquote>\n<p><strong>Note:</strong> This is called automatically by the Client.\nYou do not need to create your own instance</p>\n</blockquote>",
                    "parameters": [
                        {
                            "name": "client",
                            "type": "Client",
                            "description": "<p>YAMDBF Client instance</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "void",
                        "description": ""
                    }
                },
                {
                    "name": "registerButton",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Register a single-use reaction button on a Message that will\nexecute the given action when clicked by the Message author.</p>\n<p>Buttons remain clickable for the given lifespan (30 seconds by\ndefault), or until consumed via click by the Message author</p>\n<blockquote>\n<p>If the Client doesn't have permissions to add reactions the\ngiven action function will be invoked immediately</p>\n</blockquote>",
                    "parameters": [
                        {
                            "name": "message",
                            "type": "Message",
                            "description": "<p>Message to register a button for</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "emoji",
                            "type": "string",
                            "description": "<p>A unicode emoji, custom emoji ID, or a button\n                         key from {@link Client#buttons}</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "action",
                            "type": "function",
                            "description": "<p>Function to execute when the reaction button is clicked</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "lifespan",
                            "type": "number",
                            "description": "<p>Lifespan of the button in MS</p>",
                            "default": 30000,
                            "optional": true,
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                }
            ]
        },
        {
            "name": "RateLimit",
            "description": "<p>Maintains its own call count and expiry for making sure\nthings only happen a certain number of times within\na given timeframe</p>",
            "extends": [],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "RateLimit",
                "description": "",
                "parameters": [
                    {
                        "name": "limit",
                        "type": "Tuple.<number, number>",
                        "description": "<p>Tuple containing limit and duration</p>",
                        "default": "",
                        "optional": "",
                        "nullable": ""
                    }
                ],
                "examples": []
            },
            "properties": [
                {
                    "name": "limit",
                    "access": "",
                    "virtual": false,
                    "description": "<p>The number of times this RateLimit can be\ncalled within its expiry period</p>",
                    "type": {
                        "names": [
                            "number"
                        ]
                    }
                },
                {
                    "name": "duration",
                    "access": "",
                    "virtual": false,
                    "description": "<p>The time from first call until reset</p>",
                    "type": {
                        "names": [
                            "number"
                        ]
                    }
                },
                {
                    "name": "isLimited",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Return whether or not this ratelimit is currently capped out\nfor the current expiry period</p>",
                    "type": {
                        "names": [
                            "boolean"
                        ]
                    }
                },
                {
                    "name": "remaining",
                    "access": "",
                    "virtual": false,
                    "description": "<p>The remaining number of uses this RateLimit has for\nthis expiry period</p>",
                    "type": {
                        "names": [
                            "number"
                        ]
                    }
                },
                {
                    "name": "wasNotified",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Whether or not this RateLimit was flagged for having had\na notification given for being capped for this expiry period</p>",
                    "type": {
                        "names": [
                            "boolean"
                        ]
                    }
                }
            ],
            "functions": [
                {
                    "name": "_reset",
                    "access": "private",
                    "virtual": false,
                    "description": "<p>Sets this RateLimit to default values</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "call",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Returns whether or not this rate limit has been capped out\nfor its current expiry period while incrementing calls\ntowards the rate limit cap if not currently capped</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                {
                    "name": "setNotified",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Flag this RateLimit as having had a notification given\nfor being capped for this expiry period</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "void",
                        "description": ""
                    }
                }
            ]
        },
        {
            "name": "RateLimitManager",
            "description": "<p>Handles creation and retrieval of {@link RateLimit} objects for the given interval\nand a given set of descriptors. Similar to {@link RateLimiter} but not designed around\nMessages and Users. This simplifies the process of assigning ratelimits for any\narbitrary process/task</p>",
            "extends": [],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "RateLimitManager",
                "description": "",
                "parameters": [],
                "examples": []
            },
            "functions": [
                {
                    "name": "get",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Get a {@link RateLimit} object for the given target descriptors. This can be\nany arbitrary set of strings representing whatever you want. A good example\nwould be a RateLimit for a User within a Guild with 5 uses per minute:</p>\n<pre class=\"prettyprint source\"><code>&lt;RateLimitManager>.get('5/1m', guild.id, user.id);</code></pre><p>Or if you wanted to limit something in a DM for the specific User to 10\nuses per 5 minutes:</p>\n<pre class=\"prettyprint source\"><code>&lt;RateLimitManager>.get('10/5m', user.id, 'DM');</code></pre><p>The possibilities are endless.<br><br></p>\n<p><strong>Note:</strong> The limit string counts as part of the descriptor. As such</p>\n<pre class=\"prettyprint source\"><code>&lt;RateLimitManager>.get('1/5m');</code></pre><p>is a valid descriptor, but keep in mind that every time you retrieve it, it\nwill be the same RateLimit instance, so if you need unique RateLimits for the\nsame limit/duration, you must create a unique descriptor</p>",
                    "parameters": [
                        {
                            "name": "limit",
                            "type": "string",
                            "description": "<p>Ratelimit string matching the regex <code>\\d+\\/\\d+[s|m|h|d]</code><br>\n                         <strong>Example:</strong> <code>1/10m</code> to create ratelimits of 1 per 10 minutes</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "descriptors",
                            "type": "string",
                            "description": "<p>RateLimit target descriptors</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "RateLimit",
                        "description": ""
                    }
                },
                {
                    "name": "call",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Return the result of the {@link RateLimit#call} for the given\ndescriptors. See {@link RateLimitManager#get} for details on\nfetching RateLimits via descriptors</p>",
                    "parameters": [
                        {
                            "name": "limit",
                            "type": "string",
                            "description": "<p>Ratelimit string matching the regex <code>\\d+\\/\\d+[s|m|h|d]</code><br>\n                         <strong>Example:</strong> <code>1/10m</code> to create ratelimits of 1 per 10 minutes</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "descriptors",
                            "type": "string",
                            "description": "<p>RateLimit target descriptors</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                {
                    "name": "_cleanup",
                    "access": "private",
                    "virtual": false,
                    "description": "<p>Recursively clean up expired ratelimits within the given target object</p>",
                    "parameters": [],
                    "examples": []
                }
            ]
        },
        {
            "name": "RateLimiter",
            "description": "<p>Handles assigning ratelimits to guildmembers and users</p>",
            "extends": [],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "RateLimiter",
                "description": "",
                "parameters": [
                    {
                        "name": "limit",
                        "type": "string",
                        "description": "<p>Ratelimit string matching the regex <code>\\d+\\/\\d+[s|m|h|d]</code><br>\n                         <strong>Example:</strong> <code>1/10m</code> to limit a command to one use per 10 minutes</p>",
                        "default": "",
                        "optional": "",
                        "nullable": ""
                    },
                    {
                        "name": "global",
                        "type": "boolean",
                        "description": "<p>Whether or not this RateLimiter handles global ratelimits</p>",
                        "default": "",
                        "optional": "",
                        "nullable": ""
                    }
                ],
                "examples": []
            },
            "functions": [
                {
                    "name": "get",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Returns the RateLimit object for the message author if global\nor message member if message is in a guild. If a userOverride\nis given then the RateLimit or global RateLimit will be\nretrieved for that user based on the message location</p>",
                    "parameters": [
                        {
                            "name": "message",
                            "type": "external:Message",
                            "description": "<p>Discord.js Message object</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "userOverride",
                            "type": "external:User",
                            "description": "<p>User object to use in place of Message author</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "RateLimit",
                        "description": ""
                    }
                },
                {
                    "name": "_isGlobal",
                    "access": "private",
                    "virtual": false,
                    "description": "<p>Determine whether or not to use the global rate limit collection</p>",
                    "parameters": [],
                    "examples": []
                }
            ]
        },
        {
            "name": "Resolver",
            "description": "<p>Resolver class to extend for creating Command argument resolvers.\nCustom Resolvers must implement the <code>validate()</code> and <code>resolve()</code> methods</p>",
            "extends": [],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "Resolver",
                "description": "",
                "parameters": [
                    {
                        "name": "client",
                        "type": "Client",
                        "description": "<p>YAMDBF Client instance</p>",
                        "default": "",
                        "optional": "",
                        "nullable": ""
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "description": "<p>Resolver type name. This is the type name used\n                        when specifying types in [resolve]{@link module:Middleware.resolve}\n                        and [expect]{@link module:Middleware.expect}<br>\n                        <strong>Note:</strong> This is not passed by the ResolverLoader, so\n                        pass it to <code>super()</code> yourself when creating custom Resolvers</p>",
                        "default": "",
                        "optional": "",
                        "nullable": ""
                    },
                    {
                        "name": "aliases",
                        "type": "string",
                        "description": "<p>Alternative names the Resolver can be identified by</p>",
                        "default": "",
                        "optional": "",
                        "nullable": ""
                    }
                ],
                "examples": []
            },
            "functions": [
                {
                    "name": "validate",
                    "access": "",
                    "virtual": true,
                    "description": "<p>Method to implement that should return whether or not the\ngiven value matches the type the resolver is meant to resolve.</p>\n<blockquote>\n<p>Can be async</p>\n</blockquote>",
                    "parameters": [
                        {
                            "name": "value",
                            "type": "any",
                            "description": "<p>Value to validate</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<boolean>",
                        "description": ""
                    }
                },
                {
                    "name": "resolve",
                    "access": "",
                    "virtual": true,
                    "description": "<p>Method to implement that should accept a string and return\na resolved value of the type the resolver is meant to resolve.</p>\n<p>This method can and should throw errors when invalid input is given.\nThese errors will be sent to Discord as argument errors when using\nthe <code>resolve</code> middleware. Refer to the base Resolver error strings\nfor examples on what these errors should look like if you're trying\nto keep things in-line with YAMDBF</p>\n<blockquote>\n<p>Can be async</p>\n</blockquote>",
                    "parameters": [
                        {
                            "name": "message",
                            "type": "Message",
                            "description": "<p>Discord.js Message instance</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "command",
                            "type": "Command",
                            "description": "<p>Instance of the Command being called</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "description": "<p>Argument name</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "description": "<p>Argument value</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<any>",
                        "description": ""
                    }
                },
                {
                    "name": "resolveRaw",
                    "access": "",
                    "virtual": true,
                    "description": "<p>Method recommended to be implemented for resolving data without side-effects.\nWhere <code>resolve()</code> should throw errors which will be sent to Discord when\na value cannot be resolved, this method should simply return <code>undefined</code>.</p>\n<p>All base resolvers will implement this method with this signature so that\nthey can be accessed for personal use via <code>&lt;Client&gt;.resolvers.get('resolver\nname or alias')</code>.</p>\n<p>Some resolvers require additional context in the form of a partial {@link Message}\nobject in order to be able to resolve their data type from the given input\n(like needing a guild from the message to be able to resolve a <code>GuildMember</code>\nvia the <code>Member</code> resolver). It's safest to assume that all base resolvers will\nwant this context reference as only a small handful do not (specifically String,\nNumber, Duration, Command, and CommandGroup). In the case of your own custom\nresolvers, you should know what needs context and what doesn't, so you can get\naway with passing as needed there.</p>\n<p>In cases where a full Message object is unavailable but context is known,\nif you have a Guild instance, for example, you can simply pass it like</p>\n<pre class=\"prettyprint source\"><code>let resolved = &lt;Resolver>.resolveRaw(value, { guild });</code></pre><p>This is fine for all base resolvers, as the most any of them expect from\nthe context is for it to contain a <code>guild</code> field with a Guild instance,\nand they will throw an error if the context they require is missing.</p>\n<blockquote>\n<p>Can be async</p>\n</blockquote>",
                    "parameters": [
                        {
                            "name": "value",
                            "type": "string",
                            "description": "<p>String value to resolve data from</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "context",
                            "type": "Partial.<Message>",
                            "description": "<p>Partial Discord.js Message object</p>",
                            "default": "",
                            "optional": true,
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<any>",
                        "description": ""
                    }
                }
            ],
            "properties": [
                {
                    "name": "name",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Name that servers as an identifier for the resolver</p>",
                    "type": {
                        "names": [
                            "string"
                        ]
                    }
                },
                {
                    "name": "aliases",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Additional identifier strings</p>",
                    "type": {
                        "names": [
                            "Array.<string>"
                        ]
                    }
                }
            ]
        },
        {
            "name": "ResolverLoader",
            "description": "<p>Loads and stores Command argument {@link Resolver}s</p>",
            "extends": [],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "ResolverLoader",
                "description": "",
                "parameters": [],
                "examples": []
            },
            "properties": [
                {
                    "name": "loaded",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Object mapping Resolver type names to their instances</p>",
                    "type": {
                        "names": [
                            "object"
                        ]
                    }
                }
            ],
            "functions": [
                {
                    "name": "get",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Get a loaded Resolver by name or alias</p>",
                    "parameters": [
                        {
                            "name": "name",
                            "type": "string",
                            "description": "<p>Identifier of the Resolver to get</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Resolver",
                        "description": ""
                    }
                },
                {
                    "name": "_loadResolvers",
                    "access": "private",
                    "virtual": false,
                    "description": "<p>Load resolvers from _base and client._customResolvers.\nUsed internally</p>",
                    "parameters": [],
                    "examples": []
                }
            ]
        },
        {
            "name": "Event",
            "description": "<p>Event class to extend when writing your own custom event handlers</p>",
            "extends": [],
            "access": "",
            "virtual": true,
            "fires": "",
            "constructor": {
                "name": "Event",
                "description": "",
                "parameters": [
                    {
                        "name": "name",
                        "type": "string",
                        "description": "<p>Name of the Client event this event handler\n                          will handle when emitted</p>",
                        "default": "",
                        "optional": "",
                        "nullable": ""
                    }
                ],
                "examples": []
            },
            "functions": [
                {
                    "name": "action",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Method to be implemented that will be executed whenever the event this handler\nis for is emitted by the Client</p>",
                    "parameters": [
                        {
                            "name": "...args",
                            "type": "Array.<any>",
                            "description": "<p>The args your event handler will be receiving\n                            from the event it handles. This can be any number\n                            of arguments and obviously they can be received\n                            individually or as a rest parameter without issue</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "void",
                        "description": ""
                    }
                },
                {
                    "name": "_register",
                    "access": "private",
                    "virtual": false,
                    "description": "<p>Receive the client instance and save it</p>",
                    "parameters": [],
                    "examples": []
                }
            ],
            "properties": [
                {
                    "name": "name",
                    "access": "",
                    "virtual": false,
                    "description": "<p>The name of the event this Event handler handles</p>",
                    "type": {
                        "names": [
                            "string"
                        ]
                    }
                },
                {
                    "name": "client",
                    "access": "",
                    "virtual": false,
                    "description": "<p>The YAMDBF Client instance</p>",
                    "type": {
                        "names": [
                            "Client"
                        ]
                    }
                }
            ]
        },
        {
            "name": "EventDispatcher",
            "description": "<p>Registers event handlers with the YAMDBF Client and handles\nthe creation of dispatch functions for those events</p>",
            "extends": [],
            "access": "private",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "EventDispatcher",
                "description": "",
                "parameters": [],
                "examples": []
            },
            "functions": [
                {
                    "name": "clearListenedEvents",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Clear all events that currently have registered listeners</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "listen",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Begin listening to the given event, dispatching events to the handlers\nstored in the registry for the given event</p>",
                    "parameters": [],
                    "examples": []
                }
            ]
        },
        {
            "name": "EventLoader",
            "description": "<p>Handles loading and registering Event class event handlers from\nregistered source directories.</p>",
            "extends": [],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "EventLoader",
                "description": "",
                "parameters": [],
                "examples": []
            },
            "functions": [
                {
                    "name": "addSourceDir",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Registers a source directory to load Event class event handlers from.\nDoes nothing if the directory is already registered. Events will be loaded\nby the Client after the <code>continue</code> event is emitted at runtime</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "void",
                        "description": ""
                    }
                },
                {
                    "name": "hasSources",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Returns whether or not the EventLoader has any registered source directories</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                {
                    "name": "loadFromSources",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Loads or reloads all Events from all registered sources. Allows for hot-reloading</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "number",
                        "description": "<p>The total number of loaded or reloaded events</p>"
                    }
                },
                {
                    "name": "_clearEvents",
                    "access": "private",
                    "virtual": false,
                    "description": "<p>Unregisters and clears all loaded Event class event handlers</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "_loadEventsFrom",
                    "access": "private",
                    "virtual": false,
                    "description": "<p>Load events from the given directory</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "_findEventClasses",
                    "access": "private",
                    "virtual": false,
                    "description": "<p>Recursively search for Event classes within the given object</p>",
                    "parameters": [],
                    "examples": []
                }
            ]
        },
        {
            "name": "EventRegistry",
            "description": "<p>Class for registering Event handlers</p>",
            "extends": [],
            "access": "private",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "EventRegistry",
                "description": "",
                "parameters": [],
                "examples": []
            },
            "functions": [
                {
                    "name": "clearRegisteredEvents",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Clear all registered events registered with the registry and dispatcher</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "register",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Register the given Event instance with the registry and dispatcher</p>",
                    "parameters": [],
                    "examples": []
                }
            ]
        },
        {
            "name": "CompiledTemplateScript",
            "description": "<p>A compiled localization template script, including an implicit\nreturn coercion if it was syntactically possible to create one</p>",
            "extends": [],
            "access": "private",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "CompiledTemplateScript",
                "description": "",
                "parameters": [],
                "examples": []
            },
            "functions": [
                {
                    "name": "_functionWrap",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Wrap the given code in a function body to prevent vm.Script\nthrowing errors on top-level returns which are valid in the\ncontext of a template script</p>",
                    "parameters": [],
                    "examples": []
                }
            ]
        },
        {
            "name": "LangFileParser",
            "description": "<p>Class for parsing <code>.lang</code> files</p>",
            "extends": [],
            "access": "private",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "LangFileParser",
                "description": "",
                "parameters": [],
                "examples": []
            },
            "functions": [
                {
                    "name": "parseFile",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Parse a given language file string and return a Language\nobject containing all the parsed nodes</p>",
                    "parameters": [],
                    "examples": []
                }
            ]
        },
        {
            "name": "LangStringNode",
            "description": "<p>Represents a localization string parsed and compiled from a .lang file,\ncapable of validating arguments it expects at runtime</p>",
            "extends": [],
            "access": "private",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "LangStringNode",
                "description": "",
                "parameters": [],
                "examples": []
            }
        },
        {
            "name": "Language",
            "description": "<p>Holds the localization strings for a given language</p>",
            "extends": [],
            "access": "private",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "Language",
                "description": "",
                "parameters": [],
                "examples": []
            },
            "functions": [
                {
                    "name": "concat",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Concatenate another Language object's strings of the\nsame language with this Language object's strings,\nadding them to this Language object's <code>strings</code> object</p>",
                    "parameters": [],
                    "examples": []
                }
            ]
        },
        {
            "name": "ClientStorage",
            "description": "<p>Class containing asynchronous methods for storing, retrieving, and\ninteracting with data specific to the Client instance, and for\naccessing guild storages/settings</p>",
            "extends": [],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "ClientStorage",
                "description": "",
                "parameters": [],
                "examples": []
            },
            "properties": [
                {
                    "name": "guilds",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Collection mapping Guild IDs to GuildStorages</p>",
                    "type": {
                        "names": [
                            "external:Collection.<string, GuildStorage>"
                        ]
                    }
                }
            ],
            "functions": [
                {
                    "name": "init",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Initialize this storage. Any other method calls should not be made\nuntil this method has been called and resolved</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                },
                {
                    "name": "keys",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Get the names of all keys in this storage</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<Array.<string>>",
                        "description": ""
                    }
                },
                {
                    "name": "get",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Get a value from this storage for the specified key</p>",
                    "parameters": [
                        {
                            "name": "key",
                            "type": "string",
                            "description": "<p>The key in storage to get</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<any>",
                        "description": ""
                    }
                },
                {
                    "name": "set",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Set a value in this storage for the specified key</p>",
                    "parameters": [
                        {
                            "name": "key",
                            "type": "string",
                            "description": "<p>The key in storage to set</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "description": "<p>The value to set</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                },
                {
                    "name": "remove",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Remove a key/value pair from this storage</p>",
                    "parameters": [
                        {
                            "name": "key",
                            "type": "string",
                            "description": "<p>The key in storage to remove</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                },
                {
                    "name": "clear",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Remove all key/value pairs from this storage</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                }
            ]
        },
        {
            "name": "Database",
            "description": "<blockquote>\n<p><strong>Note:</strong> This won't do anything for you if you're not using\na <code>StorageProvider</code> for your client that uses Sequelize</p>\n</blockquote>\n<p>Holds the Sequelize connection to whichever database backend\nis chosen via the Client StorageProvider. As long as you wait\nuntil <code>clientReady</code> you can safely use {@link Database.instance}\nto get the Database instance and access the Sequelize connection\nvia {@link Database#db}</p>\n<p>This will allow you to define and access your own Sequelize Models\nwithout having to create another database connection. This is\nespecially important when using <code>SQLiteProvider</code> as SQLite\ndoes not like having multiple connections to an sqlite file</p>",
            "extends": [],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "Database",
                "description": "",
                "parameters": [],
                "examples": []
            },
            "properties": [
                {
                    "name": "db",
                    "access": "",
                    "virtual": false,
                    "description": "<p>The Sequelize connection to the database specified by\nyour chosen storage provider</p>",
                    "type": {
                        "names": [
                            "Sequelize"
                        ]
                    }
                },
                {
                    "name": "db",
                    "access": "",
                    "virtual": false,
                    "description": "<p><strong>(Static)</strong> The Sequelize connection to the database\nspecified by your chosen storage provider.</p>\n<blockquote>\n<p><strong>WARNING:</strong> Accessing this before the client has created\nthe singleton instance will throw an error. To be safe,\nwait until <code>clientReady</code> before accessing the Database\nconnection</p>\n</blockquote>",
                    "type": {
                        "names": [
                            "Sequelize"
                        ]
                    }
                }
            ],
            "functions": [
                {
                    "name": "instance",
                    "access": "",
                    "virtual": false,
                    "description": "<p>As long as a Sequelize-using storage provider is being used,\nthis will return the Database instance holding the Sequelize\nconnection to the database.</p>\n<p>Parameters are not needed and will be passed internally by\nthe framework when the Database singleton is created before\n<code>clientReady</code> is emitted.</p>\n<blockquote>\n<p><strong>WARNING:</strong> Accessing this before the client has created\nthe singleton instance will throw an error. To be safe,\nwait until <code>clientReady</code> before accessing the Database\nconnection</p>\n</blockquote>",
                    "parameters": [
                        {
                            "name": "url",
                            "type": "string",
                            "description": "<p>The database connection url</p>",
                            "default": "",
                            "optional": true,
                            "nullable": ""
                        },
                        {
                            "name": "debug",
                            "type": "boolean",
                            "description": "<p>Whether or not to log Database debug info</p>",
                            "default": false,
                            "optional": true,
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Database",
                        "description": ""
                    }
                },
                {
                    "name": "init",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Authenticate the connection to the database. This is called\ninternally by the framework</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                }
            ]
        },
        {
            "name": "GuildSettings",
            "description": "<p>Class containing asynchronous methods for storing, retrieving, and\ninteracting with settings for a specific guild. Will be contained\nunder {@link GuildStorage#settings}</p>",
            "extends": [],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "GuildSettings",
                "description": "",
                "parameters": [],
                "examples": []
            },
            "functions": [
                {
                    "name": "init",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Initialize this storage instance</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                },
                {
                    "name": "keys",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Get the names of all keys in this storage for this instance</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<Array.<string>>",
                        "description": ""
                    }
                },
                {
                    "name": "get",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Get a value from storage for this instance</p>",
                    "parameters": [
                        {
                            "name": "key",
                            "type": "string",
                            "description": "<p>The key in storage to get</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<any>",
                        "description": ""
                    }
                },
                {
                    "name": "set",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Set a value in storage for this instance</p>",
                    "parameters": [
                        {
                            "name": "key",
                            "type": "string",
                            "description": "<p>The key in storage to set</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "description": "<p>The value to set</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                },
                {
                    "name": "remove",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Remove a value from storage for this instance</p>",
                    "parameters": [
                        {
                            "name": "key",
                            "type": "string",
                            "description": "<p>The key in storage to remove</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                },
                {
                    "name": "clear",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Remove all key/value pairs from storage for this instance</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                }
            ]
        },
        {
            "name": "GuildStorage",
            "description": "<p>Class containing asynchronous methods for storing, retrieving, and\ninteracting with data for a specific guild</p>",
            "extends": [],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "GuildStorage",
                "description": "",
                "parameters": [],
                "examples": []
            },
            "properties": [
                {
                    "name": "settings",
                    "access": "",
                    "virtual": false,
                    "description": "<p>GuildSettings object containing settings for this guild</p>",
                    "type": {
                        "names": [
                            "GuildSettings"
                        ]
                    }
                }
            ],
            "functions": [
                {
                    "name": "init",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Initialize this storage instance</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                },
                {
                    "name": "init",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Initialize this storage instance</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                },
                {
                    "name": "keys",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Get the names of all keys in this storage for this instance</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<Array.<string>>",
                        "description": ""
                    }
                },
                {
                    "name": "get",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Get a value from storage for this instance</p>",
                    "parameters": [
                        {
                            "name": "key",
                            "type": "string",
                            "description": "<p>The key in storage to get</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<any>",
                        "description": ""
                    }
                },
                {
                    "name": "set",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Set a value in storage for this instance</p>",
                    "parameters": [
                        {
                            "name": "key",
                            "type": "string",
                            "description": "<p>The key in storage to set</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "description": "<p>The value to set</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                },
                {
                    "name": "remove",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Remove a value from storage for this instance</p>",
                    "parameters": [
                        {
                            "name": "key",
                            "type": "string",
                            "description": "<p>The key in storage to remove</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                },
                {
                    "name": "clear",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Remove all key/value pairs from storage for this instance</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                }
            ]
        },
        {
            "name": "GuildStorageLoader",
            "description": "<p>Handles loading all guild-specific data from persistent storage into\n{@link GuildStorage} objects</p>",
            "extends": [],
            "access": "private",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "GuildStorageLoader",
                "description": "",
                "parameters": [],
                "examples": []
            },
            "functions": [
                {
                    "name": "init",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Initialize storage providers for guild storage and settings</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                },
                {
                    "name": "loadStorages",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Load data for each guild from persistent storage and store it in a\n{@link GuildStorage} object</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                },
                {
                    "name": "cleanGuilds",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Clean out any storages/settings storages for guilds the\nbot has no longer been a part of for more than 7 days</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                }
            ]
        },
        {
            "name": "KeyedStorage",
            "description": "<p>Compat for renamed KeyedStorage class</p>",
            "extends": [],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "KeyedStorage",
                "description": "",
                "parameters": [],
                "examples": []
            }
        },
        {
            "name": "SharedProviderStorage",
            "description": "<p>Simple async key/value storage abstraction operating on top\nof a single key within the given StorageProvider instance.\nAs the name suggests, the given StorageProvider instance\ncan be shared between multiple SharedProviderStorage instances</p>\n<blockquote>\n<p>Supports nested object paths in get/set/remove using <code>.</code>\nlike normal object accessors</p>\n</blockquote>\n<blockquote>\n<p><strong>Note:</strong> The storage provider given to the constructor should\nalready be initialized via its <code>init()</code> method</p>\n</blockquote>",
            "extends": [],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "SharedProviderStorage",
                "description": "",
                "parameters": [],
                "examples": []
            },
            "functions": [
                {
                    "name": "init",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Initialize this storage instance</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                },
                {
                    "name": "keys",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Get the names of all keys in this storage for this instance</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<Array.<string>>",
                        "description": ""
                    }
                },
                {
                    "name": "get",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Get a value from storage for this instance</p>",
                    "parameters": [
                        {
                            "name": "key",
                            "type": "string",
                            "description": "<p>The key in storage to get</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<any>",
                        "description": ""
                    }
                },
                {
                    "name": "exists",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Check if a value exists in storage for this instance</p>",
                    "parameters": [
                        {
                            "name": "key",
                            "type": "string",
                            "description": "<p>The key in storage to check</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<boolean>",
                        "description": ""
                    }
                },
                {
                    "name": "set",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Set a value in storage for this instance</p>",
                    "parameters": [
                        {
                            "name": "key",
                            "type": "string",
                            "description": "<p>The key in storage to set</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "description": "<p>The value to set</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                },
                {
                    "name": "remove",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Remove a value from storage for this instance</p>",
                    "parameters": [
                        {
                            "name": "key",
                            "type": "string",
                            "description": "<p>The key in storage to remove</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                },
                {
                    "name": "clear",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Remove all key/value pairs from storage for this instance</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                }
            ]
        },
        {
            "name": "SingleProviderStorage",
            "description": "<p>Simple async key/value storage abstraction operating on top of\na single StorageProvider instance. Each key in this storage\nreflects a single key in the given StorageProvider</p>\n<blockquote>\n<p>Supports nested object paths in get/set/remove using <code>.</code>\nlike normal object accessors</p>\n</blockquote>",
            "extends": [],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "SingleProviderStorage",
                "description": "",
                "parameters": [
                    {
                        "name": "name",
                        "type": "string",
                        "description": "<p>Unique identifier for this storage, used by the given StorageProvider</p>",
                        "default": "",
                        "optional": "",
                        "nullable": ""
                    },
                    {
                        "name": "provider",
                        "type": "StorageProviderConstructor",
                        "description": "<p>The storage provider class that will be instantiated\n                                                and used as the backend for this storage abstraction</p>",
                        "default": "",
                        "optional": "",
                        "nullable": ""
                    }
                ],
                "examples": []
            },
            "functions": [
                {
                    "name": "init",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Initialize this storage. Any other method calls should not be made\nuntil this method has been called and resolved</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                },
                {
                    "name": "keys",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Get the names of all keys in this storage</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<Array.<string>>",
                        "description": ""
                    }
                },
                {
                    "name": "get",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Get a value from this storage for the specified key</p>",
                    "parameters": [
                        {
                            "name": "key",
                            "type": "string",
                            "description": "<p>The key in storage to get</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<any>",
                        "description": ""
                    }
                },
                {
                    "name": "exists",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Check if a value exists in storage</p>",
                    "parameters": [
                        {
                            "name": "key",
                            "type": "string",
                            "description": "<p>The key in storage to check</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<boolean>",
                        "description": ""
                    }
                },
                {
                    "name": "set",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Set a value in this storage for the specified key</p>",
                    "parameters": [
                        {
                            "name": "key",
                            "type": "string",
                            "description": "<p>The key in storage to set</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "description": "<p>The value to set</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                },
                {
                    "name": "remove",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Remove a key/value pair from this storage</p>",
                    "parameters": [
                        {
                            "name": "key",
                            "type": "string",
                            "description": "<p>The key in storage to remove</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                },
                {
                    "name": "clear",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Remove all key/value pairs from this storage</p>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                }
            ]
        },
        {
            "name": "StorageProvider",
            "description": "<p>Abstract class for storage providers to extend. Provides runtime errors\nfor missing method implementations, and is necessary at compile-time\nwhen using TypeScript for the compiler to recognize a StorageProvider\nas valid.</p>\n<p>StorageProviders must present an interface with a storage solution that\nprovides access to string values via string keys. Data will be stored\nin the storage solution by the framework as stringified JSON-valid data</p>\n<blockquote>\n<p><strong>Note:</strong> All methods shown on this class must be implemented within\nany storage providers you create and, in the case of <code>keys()</code>\nand <code>get()</code>, <strong>must</strong> return the proper data types or your\nclient <strong>will not work</strong>.</p>\n</blockquote>",
            "extends": [],
            "access": "",
            "virtual": true,
            "fires": "",
            "constructor": {
                "name": "StorageProvider",
                "description": "",
                "parameters": [
                    {
                        "name": "name",
                        "type": "string",
                        "description": "<p>Name of the storage to access. Can be a DB table, file name, etc.\nWhatever the storage solution expects with regards to providing a unique identifier\nfor a specific storage.</p>\n<blockquote>\n<p><strong>Note:</strong> This does not need to be passed to <code>super()</code> in classes extending <code>StorageProvider</code>\nas <code>StorageProvider</code> is abstract and provides no implementation, but should be received\nby and used within your storage provider constructors as necessary to create a unique\nstorage based on the given string</p>\n</blockquote>",
                        "default": "",
                        "optional": "",
                        "nullable": ""
                    }
                ],
                "examples": []
            }
        },
        {
            "name": "Logger",
            "description": "<p>Singleton containing methods for asynchronous logging with clean,\nconfigurable output via custom Logger transports</p>\n<p>Easiest manner of use is via the <code>@logger</code> parameter decorator\nto attach the logger to a class property for use within that class.\nOtherwise the singleton instance can be accessed via <code>Logger.instance()</code></p>\n<p>Logging can be turned off by setting the logging level to <code>LogLevel.NONE</code></p>",
            "extends": [],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "Logger",
                "description": "",
                "parameters": [],
                "examples": []
            },
            "functions": [
                {
                    "name": "instance",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Returns the Logger singleton instance</p>\n<p>When given a tag parameter, a Logger proxy will be returned\nthat automatically applies the given tag to all logging methods\nin lieu of them requiring a tag parameter before the log content</p>",
                    "parameters": [
                        {
                            "name": "tag",
                            "type": "string",
                            "description": "<p>Tag for this instance proxy</p>",
                            "default": "",
                            "optional": true,
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Logger",
                        "description": ""
                    }
                },
                {
                    "name": "taggedInstance",
                    "access": "private",
                    "virtual": false,
                    "description": "<p>Returns an instance proxy that prefixes logging\nmethod calls with the given tag</p>",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "setLogLevel",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Set the level of output that will be logged</p>",
                    "parameters": [
                        {
                            "name": "level",
                            "type": "LogLevel",
                            "description": "<p>The level of logging to output</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "void",
                        "description": ""
                    }
                },
                {
                    "name": "addTransport",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Add a {@link Transport} for the Logger to use for logging.\nThe logger will log to all provided transports</p>",
                    "parameters": [
                        {
                            "name": "transport",
                            "type": "Transport",
                            "description": "<p>The transport to add</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "void",
                        "description": ""
                    }
                },
                {
                    "name": "removeBaseTransport",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Remove the default console logging transport. This is\nuseful if you want to provide your own transport that\nuses the console.</p>\n<p>This should be run before creating a YAMDBF Client\ninstance if you do not want any logging to be done with\nthe base transport before you get the chance to swap it out.</p>\n<pre class=\"prettyprint source\"><code>Logger.instance().removeBaseTransport();\nLogger.instance().addTransport({ transport[, level] });</code></pre>",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": "void",
                        "description": ""
                    }
                },
                {
                    "name": "log",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Log useful information to the Logger transports. Will not be logged\nunless the log level is <code>LogLevel.LOG</code> or higher</p>",
                    "parameters": [
                        {
                            "name": "tag",
                            "type": "string",
                            "description": "<p>Tag to prefix the log with</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "text",
                            "type": "string",
                            "description": "<p>String(s) to log</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                },
                {
                    "name": "info",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Log less important information to the logger transports. Will not\nbe logged unless the logging level is <code>LogLevel.INFO</code> or higher</p>",
                    "parameters": [
                        {
                            "name": "tag",
                            "type": "string",
                            "description": "<p>Tag to prefix the log with to identify the\n                       source of the log</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "text",
                            "type": "string",
                            "description": "<p>String(s) to log</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                },
                {
                    "name": "warn",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Log warning text to the logger transports. Will not be logged\nunless the logging level is <code>LogLevel.WARN</code> or higher</p>",
                    "parameters": [
                        {
                            "name": "tag",
                            "type": "string",
                            "description": "<p>Tag to prefix the log with</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "text",
                            "type": "string",
                            "description": "<p>String(s) to log</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                },
                {
                    "name": "error",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Log error text to the logger transports. Will not be logged\nunless the logging level is <code>LogLevel.ERROR</code> or higher</p>",
                    "parameters": [
                        {
                            "name": "tag",
                            "type": "string",
                            "description": "<p>Tag to prefix the log with</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "text",
                            "type": "string",
                            "description": "<p>String(s) to log</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                },
                {
                    "name": "debug",
                    "access": "",
                    "virtual": false,
                    "description": "<p>Log debug text to the logger transports. Will not be logged\nunless the logging level is <code>LogLevel.DEBUG</code></p>",
                    "parameters": [
                        {
                            "name": "tag",
                            "type": "string",
                            "description": "<p>Tag to prefix the log with</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "text",
                            "type": "string",
                            "description": "<p>String(s) to log</p>",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": "Promise.<void>",
                        "description": ""
                    }
                },
                {
                    "name": "_write",
                    "access": "private",
                    "virtual": false,
                    "description": "<p>Send log data to all transports</p>",
                    "parameters": [],
                    "examples": []
                }
            ],
            "properties": [
                {
                    "name": "NONE",
                    "access": "",
                    "virtual": false,
                    "description": "<p><code>LogLevel.NONE</code> enum shortcut</p>",
                    "type": {
                        "names": [
                            "LogLevel"
                        ]
                    }
                },
                {
                    "name": "LOG",
                    "access": "",
                    "virtual": false,
                    "description": "<p><code>LogLevel.LOG</code> enum shortcut</p>",
                    "type": {
                        "names": [
                            "LogLevel"
                        ]
                    }
                },
                {
                    "name": "INFO",
                    "access": "",
                    "virtual": false,
                    "description": "<p><code>LogLevel.INFO</code> enum shortcut</p>",
                    "type": {
                        "names": [
                            "LogLevel"
                        ]
                    }
                },
                {
                    "name": "WARN",
                    "access": "",
                    "virtual": false,
                    "description": "<p><code>LogLevel.WARN</code> enum shortcut</p>",
                    "type": {
                        "names": [
                            "LogLevel"
                        ]
                    }
                },
                {
                    "name": "ERROR",
                    "access": "",
                    "virtual": false,
                    "description": "<p><code>LogLevel.ERROR</code> enum shortcut</p>",
                    "type": {
                        "names": [
                            "LogLevel"
                        ]
                    }
                },
                {
                    "name": "DEBUG",
                    "access": "",
                    "virtual": false,
                    "description": "<p><code>LogLevel.DEBUG</code> enum shortcut</p>",
                    "type": {
                        "names": [
                            "LogLevel"
                        ]
                    }
                }
            ]
        }
    ],
    "typedefs": [
        {
            "name": "Tuple",
            "description": "<p>Represents an array of fixed length where the the item in\nthe specified position is of the specified type.</p>\n<p>Example:</p>\n<pre class=\"prettyprint source\"><code>['foo', 10] === [string, number] === Tuple&lt;string, number></code></pre>",
            "properties": []
        },
        {
            "name": "BaseStrings",
            "description": "<p>Enum containing all base framework\nlocalization string keys</p>",
            "properties": []
        },
        {
            "name": "ArgOpts",
            "description": "<p>Object containing options for\ncontrolling how command arguments will be parsed</p>",
            "properties": [
                {
                    "name": "separator",
                    "type": "string",
                    "description": "<p>The charactor to separate args by</p>",
                    "default": "' '",
                    "optional": true,
                    "nullable": ""
                }
            ]
        },
        {
            "name": "BaseResolverType",
            "description": "<p>Valid argument resolver types\nfor use with [resolve]{@link module:Middleware.resolve} and\n[expect]{@link module:Middleware.expect}. Can be one of\nthe following string literals:</p>\n<pre class=\"prettyprint source\"><code>'String'\n| 'Number'\n| 'Boolean'\n| 'Duration'\n| 'User'\n| 'Member'\n| 'BannedUser'\n| 'Channel'\n| 'Role'\n| 'Command'\n| 'CommandGroup'\n| 'Any'</code></pre><p>or an Array of possible string literal values</p>",
            "properties": []
        },
        {
            "name": "CommandInfo",
            "description": "<p>Object containing required {@link Command} properties\nto be passed to a Command on construction</p>",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "description": "<p>See: {@link Command#name}</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "desc",
                    "type": "string",
                    "description": "<p>See: {@link Command#desc}</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "usage",
                    "type": "string",
                    "description": "<p>See: {@link Command#usage}</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "info",
                    "type": "string",
                    "description": "<p>See: {@link Command#info}</p>",
                    "default": "",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "group",
                    "type": "string",
                    "description": "<p>See: {@link Command#group}</p>",
                    "default": "'base'",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "aliases",
                    "type": "Array.<string>",
                    "description": "<p>See: {@link Command#aliases}</p>",
                    "default": "[]",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "guildOnly",
                    "type": "boolean",
                    "description": "<p>See: {@link Command#guildOnly}</p>",
                    "default": false,
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "hidden",
                    "type": "boolean",
                    "description": "<p>See: {@link Command#hidden}</p>",
                    "default": false,
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "argOpts",
                    "type": "ArgOpts",
                    "description": "<p>See: {@link Command#argOpts}, {@link ArgOpts}</p>",
                    "default": "",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "callerPermissions",
                    "type": "Array.<PermissionResolvable>",
                    "description": "<p>See: {@link Command#callerPermissions}</p>",
                    "default": "[]",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "clientPermissions",
                    "type": "Array.<PermissionResolvable>",
                    "description": "<p>See: {@link Command#clientPermissions}</p>",
                    "default": "[]",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "roles",
                    "type": "Array.<string>",
                    "description": "<p>See: {@link Command#roles}</p>",
                    "default": "[]",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "ownerOnly",
                    "type": "boolean",
                    "description": "<p>See: {@link Command#ownerOnly}</p>",
                    "default": false,
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "ratelimit",
                    "type": "string",
                    "description": "<p>Sets a rate limit on calls to this command for every user</p>",
                    "default": "",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "lockTimeout",
                    "type": "number",
                    "description": "<p>The time until command locks will expire automatically</p>",
                    "default": 30000,
                    "optional": true,
                    "nullable": ""
                }
            ]
        },
        {
            "name": "DefaultGuildSettings",
            "description": "<p>The default settings to apply to new guilds.\nStored under the key <code>'defaultGuildSettings'</code> in {@link Client#storage}</p>",
            "properties": [
                {
                    "name": "prefix",
                    "type": "string",
                    "description": "<p>Prefix denoting a command call</p>",
                    "default": "'/'",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "disabledGroups",
                    "type": "Array.<string>",
                    "description": "<p>Command groups to ignore</p>",
                    "default": "[]",
                    "optional": true,
                    "nullable": ""
                }
            ]
        },
        {
            "name": "Difference",
            "description": "<p>Represents a difference between two given valid Unix time signatures</p>",
            "properties": [
                {
                    "name": "raw",
                    "type": "number",
                    "description": "<p>Total number of MS difference</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "days",
                    "type": "number",
                    "description": "<p>Number of days spanned</p>",
                    "default": "",
                    "optional": "",
                    "nullable": true
                },
                {
                    "name": "hours",
                    "type": "number",
                    "description": "<p>Number of hours spanned after higher units are subtracted</p>",
                    "default": "",
                    "optional": "",
                    "nullable": true
                },
                {
                    "name": "minutes",
                    "type": "number",
                    "description": "<p>Number of minutes spanned after higher units are subtracted</p>",
                    "default": "",
                    "optional": "",
                    "nullable": true
                },
                {
                    "name": "secs",
                    "type": "number",
                    "description": "<p>Number of seconds spanned after higher units are subtracted</p>",
                    "default": "",
                    "optional": "",
                    "nullable": true
                },
                {
                    "name": "ms",
                    "type": "number",
                    "description": "<p>Number of ms spanned after higher units are subtracted</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "toString()",
                    "type": "function",
                    "description": "<p>Returns duration formatted as <code># days, # hours, # mins, # secs</code></p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "toSimplifiedString()",
                    "type": "function",
                    "description": "<p>Returns duration formatted as <code>#d #h #m #s</code></p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ]
        },
        {
            "name": "LocalizedCommandInfo",
            "description": "<p>Represents an object\ncontaining localization overrides for a command's <code>desc</code>,\n<code>info</code>, and <code>usage</code> fields</p>",
            "properties": []
        },
        {
            "name": "LogData",
            "description": "<p>Represents an object passed from the {@link Logger}\nto the {@link TransportFunction} of any {@link Transport}s given to it</p>",
            "properties": [
                {
                    "name": "timestamp",
                    "type": "Date",
                    "description": "<p>Holds the time/date for this log</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "type",
                    "type": "string",
                    "description": "<p>The log type. Will be one of:\n                           <code>LOG | INFO | WARN | ERROR | DEBUG</code></p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "tag",
                    "type": "string",
                    "description": "<p>The tag given for this log</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "text",
                    "type": "string",
                    "description": "<p>The text content of this log</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ]
        },
        {
            "name": "LogLevel",
            "description": "<p>Enum containing the different levels of\npotential logger output. Each level represents itself and everything\nabove it in the enum. The default logger log level is <code>LogLevel.LOG</code></p>\n<pre class=\"prettyprint source\"><code>enum LogLevel\n{\n    NONE,\n    LOG,\n    INFO,\n    WARN,\n    ERROR.\n    DEBUG\n}</code></pre>",
            "properties": []
        },
        {
            "name": "MiddlewareFunction",
            "description": "<p>A function that takes a Message\nobject and an array of args, does anything with them, and returns a\n{@link Tuple} where the first item is the Message object and the\nsecond item is the array of args</p>\n<pre class=\"prettyprint source\"><code>(Message, any[]) => [Message, any[]]</code></pre><p>Can be async as long as the returned promise resolves with the tuple\ncontaining the message object and the args array as expected.</p>\n<p>If a middleware function returns a string, or throws a string/error,\nit will be sent to the calling channel as a message and the Command\nexecution will be aborted. If a middleware function does not return\nanything or returns something other than an array or string, the\nCommand will fail silently.</p>\n<blockquote>\n<p><strong>Note:</strong> The command dispatcher will attempt to bind the Command\ninstance to the middleware function when called, so <code>this</code> within a\nmiddleware function (if it is not an arrow function) will be the\nCommand instance at runtime</p>\n</blockquote>",
            "properties": []
        },
        {
            "name": "PluginConstructor",
            "description": "<p>Any class that extends and\nimplements {@link Plugin}. <em>Not to be confused with an <strong>instance</strong>\nof a Plugin.</em></p>",
            "properties": []
        },
        {
            "name": "ResolverConstructor",
            "description": "<p>Any class that extends and\nimplements {@link Resolver}. <em>Not to be confused with an <strong>instance</strong>\nof a Resolver.</em></p>",
            "properties": []
        },
        {
            "name": "ResourceLoader",
            "description": "<p>Represents a function assigned to\na specific language that takes a string key and an optional\n{@link TemplateData} object and returns a localized string for\nthat language if it exists</p>",
            "properties": []
        },
        {
            "name": "ResourceProxy",
            "description": "<p>A Proxy where calling functions will treat the\nfunction name as a Lang string key and act as a ResourceLoader, requiring only\nthe strings TemplateData (or nothing for non-dynamic strings)</p>\n<blockquote>\n<p>TypeScript users can pass a generic type parameter to the ResourceProxy type\nwhich will append all the keys of the passed type to the valid keys on the\nResourceProxy itself. This makes it easier to get type hinting for custom\nlocalization strings. Example:</p>\n<pre class=\"prettyprint source\"><code>type C = {\n    FOO: any;\n    BAR: any;\n};\n...\nlet r: ResourceProxy&lt;C> = Lang.createResourceProxy('en_us');\nreturn r.FOO(); // `FOO` will be of type `(data?: TemplateData) => string`\n                // so this returns a string</code></pre></blockquote>",
            "properties": []
        },
        {
            "name": "RespondOptions",
            "description": "<p>Object consisting of {@link external:MessageOptions} and\nan optional <code>button</code> string field for compact mode support</p>",
            "properties": [
                {
                    "name": "button",
                    "type": "string",
                    "description": "<p>Unicode emoji string, custom enoji ID, or a key from the\n                               Client's <code>buttons</code> map</p>",
                    "default": "",
                    "optional": true,
                    "nullable": ""
                }
            ]
        },
        {
            "name": "StorageProviderConstructor",
            "description": "<p>Any class that extends and\nimplements {@link StorageProvider} and provides an interface with a storage\nmedium allowing data to be stored, retrieved, and manipulated. <em>Not\nto be confused with an <strong>instance</strong> of a storage provider.</em></p>",
            "properties": []
        },
        {
            "name": "TemplateData",
            "description": "<p>Represents an object mapping template\nkeys to values, where the template keys will be replaced with\nthe provided values in the source string when given to a Lang resource\nfunction/proxy like [Lang.res()]{@link module:Lang.res}</p>",
            "properties": []
        },
        {
            "name": "Transport",
            "description": "<p>Represents a transport object for the {@link Logger}.</p>",
            "properties": [
                {
                    "name": "transport",
                    "type": "TransportFunction",
                    "description": "<p>The transport function to use for this transport</p>",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "level",
                    "type": "LogLevel",
                    "description": "<p>The log level for this transport. Will default dynamically\n                                to the Logger's log level if none is provided</p>",
                    "default": "",
                    "optional": true,
                    "nullable": ""
                }
            ]
        },
        {
            "name": "TransportFunction",
            "description": "<p>Represents a function to be included\nin a {@link Transport} object. This function will be given a {@link LogData}\nobject at runtime whenever a logger method is called. What is done with that\nlog data is entirely up to you as the developer, but logging to a file.\nto a database, or even to a Discord channel would be some good examples</p>",
            "properties": []
        },
        {
            "name": "YAMDBFOptions",
            "description": "<p>Object containing required {@link Client} properties to be\npassed to a Client on construction</p>",
            "properties": [
                {
                    "name": "token",
                    "type": "string",
                    "description": "<p>Token needed to connect the Client to Discord</p>",
                    "default": "",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "owner",
                    "type": "Array.<string>",
                    "description": "<p>Can also be a single string<br>See: {@link Client#owner}</p>",
                    "default": "[]",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "provider",
                    "type": "StorageProviderConstructor",
                    "description": "<p>See: {@link Client#provider}</p>",
                    "default": "",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "commandsDir",
                    "type": "string",
                    "description": "<p>See: {@link Client#commandsDir}</p>",
                    "default": "",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "eventsDir",
                    "type": "string",
                    "description": "<p>See: {@link Client#eventsDir}</p>",
                    "default": "",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "localeDir",
                    "type": "string",
                    "description": "<p>See: {@link Client#localeDir}</p>",
                    "default": "",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "defaultLang",
                    "type": "string",
                    "description": "<p>See: {@link Client#defaultLang}</p>",
                    "default": "",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "statusText",
                    "type": "string",
                    "description": "<p>See: {@link Client#statusText}</p>",
                    "default": null,
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "readyText",
                    "type": "string",
                    "description": "<p>See: {@link Client#readyText}</p>",
                    "default": "'Client ready!'",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "unknownCommandError",
                    "type": "boolean",
                    "description": "<p>See: {@link Client#unknownCommandError}</p>",
                    "default": true,
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "dmHelp",
                    "type": "boolean",
                    "description": "<p>See: {@link Client#dmHelp}</p>",
                    "default": true,
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "passive",
                    "type": "boolean",
                    "description": "<p>See: {@link Client#passive}</p>",
                    "default": false,
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "pause",
                    "type": "boolean",
                    "description": "<p>See: {@link Client#pause}</p>",
                    "default": false,
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "disableBase",
                    "type": "Array.<string>",
                    "description": "<p>See: {@link Client#disableBase}</p>",
                    "default": "[]",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "ratelimit",
                    "type": "string",
                    "description": "<p>Sets a global rate limit on command calls for every user</p>",
                    "default": "",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "logLevel",
                    "type": "LogLevel",
                    "description": "<p>Sets the logging level for the logger. Defaults to <code>LogLevel.DEBUG</code></p>",
                    "default": "",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "plugins",
                    "type": "Array.<(PluginConstructor|string)>",
                    "description": "<p>An array of Plugin classes (not instances)\n                                                            or plugin package name strings to be loaded and used</p>",
                    "default": "[]",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "customResolvers",
                    "type": "Array.<ResolverConstructor>",
                    "description": "<p>An array of Resolver classes (not instances)</p>",
                    "default": "[]",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "argsParser",
                    "type": "function",
                    "description": "<p>Function taking an input string, an optional {@link Command} object,\n                                     and an optional {@link Message} object that returns an array of argument\n                                     strings. Should be used instead of middleware for providing an\n                                     alternative to the default args parsing of splitting input on the\n                                     Command's specified argument separator</p>",
                    "default": "",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "buttons",
                    "type": "object",
                    "description": "<p>Object mapping keys for easy access to unicode emoji strings or custom\n                                emoji id strings. To be used by the Client when compact mode is active<br>\n                                See: {@link Client#buttons}</p>",
                    "default": "",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "compact",
                    "type": "boolean",
                    "description": "<p>Whether or not compact mode should be used</p>",
                    "default": false,
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "tsNode",
                    "type": "boolean",
                    "description": "<p>Whether or not ts-node is being used, allowing the CommandLoader to\n                                      attempt to load .ts files when loading Commands</p>",
                    "default": false,
                    "optional": true,
                    "nullable": ""
                }
            ]
        }
    ],
    "mixins": [
        {
            "name": "Guild",
            "description": "<p>Represents a Discord.js Guild object that has had a {@link GuildStorage} object\nfor the guild the message was sent from, if any, mixed in by the CommandDispatcher before being passed\nto the command action upon Command execution</p>",
            "access": "",
            "virtual": false
        },
        {
            "name": "Message",
            "description": "<p>Represents a Discord.js Message object that contains a modifed {@link Guild} object\ncontaining a {@link GuildStorage} for the associated guild, if the message was sent\nfrom within a guild, mixed in by the CommandDispatcher.</p>\n<blockquote>\n<p><strong>Note:</strong> For clients written in Typescript, you will want to import\n<code>Message</code> from YAMDBF rather than Discord.js to be able to\naccess <code>message.guild.storage</code> within your commands without\ncompiler errors</p>\n</blockquote>",
            "access": "",
            "virtual": false
        },
        {
            "name": "Loggable",
            "description": "<p>Extending this mixin method will give classes a <code>logger</code> property\ncontaining a reference to the {@link Logger} singleton instance.\nAccepts a parent class as a parameter when extending another class</p>\n<pre class=\"prettyprint source\"><code>class Foo extends Loggable() {}\nclass Bar extends Loggable(Baz) {}</code></pre><p>Note that this is a mixin function returning a class, not an actual\nclass itself. The method call parentheses are necessary.</p>\n<blockquote>\n<p><strong>Warning:</strong> While this is fully functional at runtime, due to a TypeScript\ncompiler bug, this will currently throw a compiler error unless you also import\n<code>ILoggable</code>. However, this will error if using the <code>noUnusedLocals</code> compiler\noption, but in my experience does not trigger TSLint's unused import rule.\nThis was labeled as <code>done</code> for the TypeScript 2.5 milestone but was removed\nwith no word so I am unsure of the state of this bug going forward. I'm leaving\nthe code in in hopes the bug will be fixed because I really like this method of\nattaching the Logger. It was my oringial intention when I first wrote the Logger\nitself but had to settle for alternatives</p>\n</blockquote>",
            "access": "",
            "virtual": false
        }
    ],
    "functions": [
        {
            "name": "deprecatedClass",
            "access": "",
            "virtual": false,
            "description": "<p>Logs a deprecation warning for the decorated class if\nan instance is created</p>",
            "parameters": [
                {
                    "name": "message",
                    "type": "string",
                    "description": "<p>Class deprecation message</p>",
                    "default": "",
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [],
            "returns": {
                "type": "ClassDecorator",
                "description": ""
            }
        },
        {
            "name": "deprecatedMethod",
            "access": "",
            "virtual": false,
            "description": "<p>Logs a deprecation warning for the decorated class method\nif it is called within the current process</p>",
            "parameters": [
                {
                    "name": "message",
                    "type": "string",
                    "description": "<p>Method deprecation message</p>",
                    "default": "",
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [],
            "returns": {
                "type": "MethodDecorator",
                "description": ""
            }
        },
        {
            "name": "logger",
            "access": "",
            "virtual": false,
            "description": "<p>Property decorator that will automatically assign\nthe Logger singleton instance to the decorated\nclass property</p>\n<p>Example:</p>\n<pre class=\"prettyprint source\"><code>class Foo {\n    &#64logger private readonly logger: Logger;\n    ...</code></pre><blockquote>\n<p><strong>Note:</strong> This is a Typescript feature. If using the logger is desired\nin Javascript you should simply retrieve the singleton instance via\n<code>Logger.instance()</code></p>\n</blockquote>",
            "parameters": [],
            "examples": [],
            "returns": {
                "type": "PropertyDecorator",
                "description": ""
            }
        }
    ],
    "properties": [
        {
            "name": "LogType",
            "access": "private",
            "virtual": false,
            "description": "<p>Enum containing log type string constants</p>",
            "type": ""
        }
    ]
}
