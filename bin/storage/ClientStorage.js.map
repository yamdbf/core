{"version":3,"sources":["storage/ClientStorage.ts"],"names":[],"mappings":";;AAAA,mEAAgE;AAGhE,2CAAwC;AAExC;;;;;;;;;;GAUG;AACH,MAAa,aAAc,SAAQ,6CAAqB;IAIvD,YAAmB,MAAc;QAEhC,KAAK,CAAC,gBAAgB,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;QAEzC;;;;WAIG;QACH,IAAI,CAAC,MAAM,GAAG,IAAI,uBAAU,EAAwB,CAAC;IACtD,CAAC;CACD;AAfD,sCAeC","file":"ClientStorage.js","sourcesContent":["import { SingleProviderStorage } from './SingleProviderStorage';\nimport { GuildStorage } from './GuildStorage';\nimport { Client } from '../client/Client';\nimport { Collection } from 'discord.js';\n\n/**\n * Class containing asynchronous methods for storing, retrieving, and\n * interacting with data specific to the Client instance, and for\n * accessing guild storages/settings\n * @borrows SingleProviderStorage#init as ClientStorage#init\n * @borrows SingleProviderStorage#keys as ClientStorage#keys\n * @borrows SingleProviderStorage#get as ClientStorage#get\n * @borrows SingleProviderStorage#set as ClientStorage#set\n * @borrows SingleProviderStorage#remove as ClientStorage#remove\n * @borrows SingleProviderStorage#clear as ClientStorage#clear\n */\nexport class ClientStorage extends SingleProviderStorage\n{\n\tpublic readonly guilds: Collection<string, GuildStorage>;\n\n\tpublic constructor(client: Client)\n\t{\n\t\tsuper('client_storage', client.provider);\n\n\t\t/**\n\t\t * Collection mapping Guild IDs to GuildStorages\n\t\t * @name ClientStorage#guilds\n\t\t * @type {external:Collection<string, GuildStorage>}\n\t\t */\n\t\tthis.guilds = new Collection<string, GuildStorage>();\n\t}\n}\n"],"sourceRoot":"../../src"}