{"version":3,"sources":["storage/StorageProvider.ts"],"names":[],"mappings":";;AAEA;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,MAAsB,eAAe;CAQpC;AARD,0CAQC","file":"StorageProvider.js","sourcesContent":["import { IStorageProvider } from './interface/IStorageProvider';\n\n/**\n * Abstract class for storage providers to extend. Provides runtime errors\n * for missing method implementations, and is necessary at compile-time\n * when using TypeScript for the compiler to recognize a StorageProvider\n * as valid.\n *\n * StorageProviders must present an interface with a storage solution that\n * provides access to string values via string keys. Data will be stored\n * in the storage solution by the framework as stringified JSON-valid data\n *\n * >**Note:** All methods shown on this class must be implemented within\n * any storage providers you create and, in the case of `keys()`\n * and `get()`, **must** return the proper data types or your\n * client **will not work**.\n * @abstract\n * @implements IStorageProvider\n * @param {string} name Name of the storage to access. Can be a DB table, file name, etc.\n * Whatever the storage solution expects with regards to providing a unique identifier\n * for a specific storage.\n *\n * >**Note:** This does not need to be passed to `super()` in classes extending `StorageProvider`\n * as `StorageProvider` is abstract and provides no implementation, but should be received\n * by and used within your storage provider constructors as necessary to create a unique\n * storage based on the given string\n */\nexport abstract class StorageProvider implements IStorageProvider\n{\n\tpublic abstract async init(): Promise<void>;\n\tpublic abstract async keys(): Promise<string[]>;\n\tpublic abstract async get(key: string): Promise<string | undefined>;\n\tpublic abstract async set(key: string, value: string): Promise<void>;\n\tpublic abstract async remove(key: string): Promise<void>;\n\tpublic abstract async clear(): Promise<void>;\n}\n"],"sourceRoot":"../../src"}