{"version":3,"sources":["storage/Providers.ts"],"names":[],"mappings":";;AACA,2DAAiE;AACjE,iDAA8C;AAE9C;;;;;;;;;;;;GAYG;AACH,MAAa,SAAS;;AAAtB,8BA2EC;AAzEA;;;;;;;;;;;;;GAaG;AACW,0BAAgB,GAC7B,CAAC,GAAG,EAAE,KAAK,GAAG,KAAK,EAAE,EAAE,CAAC,qCAAiB,CAAC,GAAG,EAAE,2BAAO,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;AAEzE;;;;;;;;;;;;;GAaG;AACW,uBAAa,GAC1B,CAAC,GAAG,EAAE,KAAK,GAAG,KAAK,EAAE,EAAE,CAAC,qCAAiB,CAAC,GAAG,EAAE,2BAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AAEtE;;;;;;;;;;;;;GAaG;AACW,uBAAa,GAC1B,CAAC,GAAG,EAAE,KAAK,GAAG,KAAK,EAAE,EAAE,CAAC,qCAAiB,CAAC,GAAG,EAAE,2BAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AAEtE;;;;;;;;;;GAUG;AACW,wBAAc,GAC3B,CAAC,IAAI,EAAE,KAAK,GAAG,KAAK,EAAE,EAAE,CAAC,qCAAiB,CAAC,IAAI,EAAE,2BAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AAEzE;;;;;;GAMG;AACW,sBAAY,GAA+B,2BAAY,CAAC","file":"Providers.js","sourcesContent":["import { StorageProviderConstructor } from '../types/StorageProviderConstructor';\nimport { SequelizeProvider, Dialect } from './SequelizeProvider';\nimport { JSONProvider } from './JSONProvider';\n\n/**\n * Contains static storage providers and static factory methods\n * for storage providers that require extra data to operate.\n *\n * Be sure to install the necessary peer dependencies if using\n * a storage provider that necessitates them.\n *\n * >**Note:** PostgresProvider and SQLiteProvider are mutually\n * exclusive. You cannot use one while using the other as they\n * utilize a singleton to maintain a shared Database connection\n * between all Provider instances with a Sequelize backend\n * @module Providers\n */\nexport class Providers\n{\n\t/**\n\t * Factory method that returns a StorageProvider class for\n\t * a Postgres database via the given Postgres url. The given\n\t * url should follow the format:\n\t * ```\n\t * postgres://username:password@hostname:port/dbname\n\t * ```\n\t *\n\t * >**Note:** Requires `pg` and `sequelize` peer dependencies\n\t * @static\n\t * @method PostgresProvider\n\t * @param {string} url Postgres database url\n\t * @returns {StorageProviderConstructor}\n\t */\n\tpublic static PostgresProvider: (url: string, debug?: boolean) => StorageProviderConstructor =\n\t\t(url, debug = false) => SequelizeProvider(url, Dialect.Postgres, debug);\n\n\t/**\n\t * Factory method that returns a StorageProvider class for\n\t * an MSSQL database via the given MSSQL url. The given\n\t * url should follow the format:\n\t * ```\n\t * mssql://username:password@hostname:port/dbname\n\t * ```\n\t *\n\t * >**Note:** Requires `tedious` and `sequelize` peer dependencies\n\t * @static\n\t * @method MSSQLProvider\n\t * @param {string} url MSSQL database url\n\t * @returns {StorageProviderConstructor}\n\t */\n\tpublic static MSSQLProvider: (url: string, debug?: boolean) => StorageProviderConstructor =\n\t\t(url, debug = false) => SequelizeProvider(url, Dialect.MSSQL, debug);\n\n\t/**\n\t * Factory method that returns a StorageProvider class for\n\t * an MySQL database via the given MySQL url. The given\n\t * url should follow the format:\n\t * ```\n\t * mysql://username:password@hostname:port/dbname\n\t * ```\n\t *\n\t * >**Note:** Requires `mysql2` and `sequelize` peer dependencies\n\t * @static\n\t * @method MySQLProvider\n\t * @param {string} url MySQL database url\n\t * @returns {StorageProviderConstructor}\n\t */\n\tpublic static MySQLProvider: (url: string, debug?: boolean) => StorageProviderConstructor =\n\t\t(url, debug = false) => SequelizeProvider(url, Dialect.MySQL, debug);\n\n\t/**\n\t * Factory method that returns a StorageProvider class for\n\t * an SQLite database via the given SQLite filepath.\n\t * The given path should be prefixed with `sqlite://`\n\t *\n\t * >**Note:** Requires `sqlite3` and `sequelize` peer dependencies\n\t * @static\n\t * @method SQLiteProvider\n\t * @param {string} path SQLite file path\n\t * @returns {StorageProviderConstructor}\n\t */\n\tpublic static SQLiteProvider: (path: string, debug?: boolean) => StorageProviderConstructor =\n\t\t(path, debug = false) => SequelizeProvider(path, Dialect.SQLite, debug);\n\n\t/**\n\t * Default storage provider for the framework. If no storage provider is passed\n\t * in the client constructor, this provider will be used\n\t * @static\n\t * @name JSONProvider\n\t * @type {StorageProviderConstructor}\n\t */\n\tpublic static JSONProvider: StorageProviderConstructor = JSONProvider;\n}\n"],"sourceRoot":"../../src"}