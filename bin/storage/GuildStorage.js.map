{"version":3,"sources":["storage/GuildStorage.ts"],"names":[],"mappings":";;AAAA,mEAAgE;AAEhE,mDAAgD;AAIhD;;;;;;;;;GASG;AACH,MAAa,YAAa,SAAQ,6CAAqB;IAItD,YAAmB,MAAc,EAAE,KAAY,EAAE,eAAgC,EAAE,gBAAiC;QAEnH,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;QAEjC;;;;WAIG;QACH,IAAI,CAAC,QAAQ,GAAG,IAAI,6BAAa,CAAC,MAAM,EAAE,KAAK,EAAE,gBAAgB,CAAC,CAAC;IACpE,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,IAAI;QAEhB,MAAM,KAAK,CAAC,IAAI,EAAE,CAAC;QACnB,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;IAC5B,CAAC;CACD;AAzBD,oCAyBC","file":"GuildStorage.js","sourcesContent":["import { SharedProviderStorage } from './SharedProviderStorage';\nimport { StorageProvider } from './StorageProvider';\nimport { GuildSettings } from './GuildSettings';\nimport { Client } from '../client/Client';\nimport { Guild } from 'discord.js';\n\n/**\n * Class containing asynchronous methods for storing, retrieving, and\n * interacting with data for a specific guild\n * @borrows SharedProviderStorage#init as GuildStorage#init\n * @borrows SharedProviderStorage#keys as GuildStorage#keys\n * @borrows SharedProviderStorage#get as GuildStorage#get\n * @borrows SharedProviderStorage#set as GuildStorage#set\n * @borrows SharedProviderStorage#remove as GuildStorage#remove\n * @borrows SharedProviderStorage#clear as GuildStorage#clear\n */\nexport class GuildStorage extends SharedProviderStorage\n{\n\tpublic readonly settings: GuildSettings;\n\n\tpublic constructor(client: Client, guild: Guild, storageProvider: StorageProvider, settingsProvider: StorageProvider)\n\t{\n\t\tsuper(storageProvider, guild.id);\n\n\t\t/**\n\t\t * GuildSettings object containing settings for this guild\n\t\t * @name GuildStorage#settings\n\t\t * @type {GuildSettings}\n\t\t */\n\t\tthis.settings = new GuildSettings(client, guild, settingsProvider);\n\t}\n\n\t/**\n\t * Initialize this storage instance\n\t * @returns {Promise<void>}\n\t */\n\tpublic async init(): Promise<void>\n\t{\n\t\tawait super.init();\n\t\tawait this.settings.init();\n\t}\n}\n"],"sourceRoot":"../../src"}