{"version":3,"sources":["storage/GuildStorageLoader.ts"],"names":[],"mappings":";;AAEA,0DAAuD;AACvD,uCAAoC;AAEpC;;;;GAIG;AACH,MAAa,kBAAkB;IAM9B,YAAmB,MAAc;QAEhC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,gBAAgB,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;QACnE,IAAI,CAAC,iBAAiB,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;IACtE,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,IAAI;QAEhB,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;QACnC,MAAM,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;IACrC,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,YAAY;QAExB,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,EAChD;YACC,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;gBAAE,SAAS;YAExD,MAAM,OAAO,GAAiB,IAAI,2BAAY,CAC7C,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAErE,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YAErB,mEAAmE;YACnE,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,uBAAuB,CAAC;gBACzD,MAAM,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC;YAExD,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;SACnD;IACF,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,WAAW;QAEvB,MAAM,mBAAmB,GAAa,MAAM,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;QAC1E,KAAK,MAAM,OAAO,IAAI,mBAAmB,EACzC;YACC,MAAM,IAAI,GAAW,CAAC,MAAM,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAE,CAAC;YAClE,IAAI,CAAC,IAAI;gBAAE,SAAS;YAEpB,MAAM,MAAM,GAAQ,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACrC,MAAM,UAAU,GAAW,WAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC,CAAC;YAErF,IAAI,CAAC,UAAU;gBAAE,SAAS;YAC1B,IAAI,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,EAC3B;gBACC,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBAC7C,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBAE5C,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC;oBAC3C,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;aAC7C;SACD;IACF,CAAC;CACD;AA1ED,gDA0EC","file":"GuildStorageLoader.js","sourcesContent":["import { Client } from '../client/Client';\nimport { StorageProvider } from './StorageProvider';\nimport { GuildStorage } from '../storage/GuildStorage';\nimport { Util } from '../util/Util';\n\n/**\n * Handles loading all guild-specific data from persistent storage into\n * {@link GuildStorage} objects\n * @private\n */\nexport class GuildStorageLoader\n{\n\tprivate readonly _client: Client;\n\tprivate readonly _storageProvider: StorageProvider;\n\tprivate readonly _settingsProvider: StorageProvider;\n\n\tpublic constructor(client: Client)\n\t{\n\t\tthis._client = client;\n\t\tthis._storageProvider = new this._client.provider('guild_storage');\n\t\tthis._settingsProvider = new this._client.provider('guild_settings');\n\t}\n\n\t/**\n\t * Initialize storage providers for guild storage and settings\n\t * @returns {Promise<void>}\n\t */\n\tpublic async init(): Promise<void>\n\t{\n\t\tawait this._storageProvider.init();\n\t\tawait this._settingsProvider.init();\n\t}\n\n\t/**\n\t * Load data for each guild from persistent storage and store it in a\n\t * {@link GuildStorage} object\n\t * @returns {Promise<void>}\n\t */\n\tpublic async loadStorages(): Promise<void>\n\t{\n\t\tfor (const guild of this._client.guilds.values())\n\t\t{\n\t\t\tif (this._client.storage.guilds.has(guild.id)) continue;\n\n\t\t\tconst storage: GuildStorage = new GuildStorage(\n\t\t\t\tthis._client, guild, this._storageProvider, this._settingsProvider);\n\n\t\t\tawait storage.init();\n\n\t\t\t// Handle guild returning, possibly in a new shard or a new session\n\t\t\tif (await storage.settings.exists('YAMDBFInternal.remove'))\n\t\t\t\tawait storage.settings.remove('YAMDBFInternal.remove');\n\n\t\t\tthis._client.storage.guilds.set(guild.id, storage);\n\t\t}\n\t}\n\n\t/**\n\t * Clean out any storages/settings storages for guilds the\n\t * bot has no longer been a part of for more than 7 days\n\t * @returns {Promise<void>}\n\t */\n\tpublic async cleanGuilds(): Promise<void>\n\t{\n\t\tconst settingsStorageKeys: string[] = await this._settingsProvider.keys();\n\t\tfor (const guildID of settingsStorageKeys)\n\t\t{\n\t\t\tconst data: string = (await this._settingsProvider.get(guildID))!;\n\t\t\tif (!data) continue;\n\n\t\t\tconst parsed: any = JSON.parse(data);\n\t\t\tconst removeTime: number = Util.getNestedValue(parsed, ['YAMDBFInternal', 'remove']);\n\n\t\t\tif (!removeTime) continue;\n\t\t\tif (removeTime < Date.now())\n\t\t\t{\n\t\t\t\tawait this._settingsProvider.remove(guildID);\n\t\t\t\tawait this._storageProvider.remove(guildID);\n\n\t\t\t\tif (this._client.storage.guilds.has(guildID))\n\t\t\t\t\tthis._client.storage.guilds.delete(guildID);\n\t\t\t}\n\t\t}\n\t}\n}\n"],"sourceRoot":"../../src"}