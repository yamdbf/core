{"version":3,"sources":["command/CommandRegistry.ts"],"names":[],"mappings":"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","file":"CommandRegistry.js","sourcesContent":["import { Client } from '../client/Client';\nimport { Command } from './Command';\nimport { Collection } from 'discord.js';\nimport { Logger, logger } from '../util/logger/Logger';\n\n/**\n * @classdesc Stores loaded Commands in a Collection keyed by each Command's `name` property\n * @class CommandRegistry\n * @extends {external:Collection}\n */\nexport class CommandRegistry<\n\tT extends Client,\n\tK extends string = string,\n\tV extends Command<T> = Command<T>>\n\textends Collection<K, V>\n{\n\t@logger('CommandRegistry')\n\tprivate readonly _logger!: Logger;\n\tprivate readonly _client!: T;\n\tprivate readonly _reserved!: ((() => string) | string)[];\n\n\tpublic constructor(client: T)\n\t{\n\t\tsuper();\n\t\tObject.defineProperty(this, '_client', { value: client });\n\n\t\tObject.defineProperty(this, '_reserved', {\n\t\t\tvalue: [\n\t\t\t\t() => this.has('limit' as K) ? 'clear' : null\n\t\t\t]\n\t\t});\n\t}\n\n\tpublic static get [Symbol.species]() {\n\t\treturn Collection;\n\t}\n\n\t/**\n\t * Contains all [Command groups]{@link Command#group}\n\t * @readonly\n\t * @type {string[]}\n\t */\n\tpublic get groups(): string[]\n\t{\n\t\treturn Array.from(new Set(this.map(c => c.group)));\n\t}\n\n\t/**\n\t * Register an external command and add it to the `<Client>.commands`\n\t * [collection]{@link external:Collection}, erroring on duplicate\n\t * aliases\n\t *\n\t * >**Note:** This is intended for Plugins to use to register external\n\t * commands with the Client instance. Under normal circumstances\n\t * commands should be added by placing them in the directory passed\n\t * to the `commandsDir` YAMDBF Client option\n\t * @param {Command} command The Command instance to be registered\n\t * @returns {void}\n\t */\n\tpublic registerExternal(command: Command<any>): void\n\t{\n\t\tthis._logger.info(`External command loaded: ${command.name}`);\n\t\tthis._registerInternal(command as V, true);\n\t}\n\n\t/**\n\t * Resolve the given Command name or alias to a registered Command\n\t * @param {string} input Command name or alias\n\t * @returns {Command | undefined}\n\t */\n\tpublic resolve(input: string): V | undefined\n\t{\n\t\tinput = input ? input.toLowerCase() : input;\n\t\treturn this.find(c => c.name.toLowerCase() === input\n\t\t\t|| !!c.aliases.find(a => a.toLowerCase() === input));\n\t}\n\n\t/**\n\t * Complete registration of a command and add to the parent collection.\n\t *\n\t * This is an internal method and should not be used. Use\n\t * `registerExternal()` instead\n\t * @private\n\t */\n\tpublic _registerInternal(command: V, external: boolean = false): void\n\t{\n\t\tif (this.has(command.name as K))\n\t\t{\n\t\t\tif (!this.get(command.name as K)!.external)\n\t\t\t\tthis._logger.info(`Replacing previously loaded command: ${command.name}`);\n\t\t\telse\n\t\t\t\tthis._logger.info(`Replacing externally loaded command: ${command.name}`);\n\n\t\t\tthis.delete(command.name as K);\n\t\t}\n\t\tthis.set(command.name as K, command);\n\t\tcommand._register(this._client);\n\t\tif (external) command.external = true;\n\t}\n\n\t/**\n\t * Check for duplicate aliases, erroring on any. Used internally\n\t * @private\n\t */\n\tpublic _checkDuplicateAliases(): void\n\t{\n\t\tfor (const command of this.values())\n\t\t\tfor (const alias of command.aliases)\n\t\t\t{\n\t\t\t\tconst duplicate: V = this.filter(c => c !== command).find(c => c.aliases.includes(alias))!;\n\t\t\t\tconst name: string = command.name;\n\n\t\t\t\tif (!duplicate) continue;\n\t\t\t\tif (!command.external)\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Commands may not share aliases: ${name}, ${duplicate.name} (shared alias: \"${alias}\")`);\n\n\t\t\t\telse\n\t\t\t\t\tthrow new Error([\n\t\t\t\t\t\t`External command \"${duplicate.name}\" has conflicting alias`,\n\t\t\t\t\t\t`with \"${name}\" (shared alias: \"${alias}\")`\n\t\t\t\t\t].join(' '));\n\t\t\t}\n\t}\n\n\t/**\n\t * Check for commands with reserved names. Used internally\n\t * @private\n\t */\n\tpublic _checkReservedCommandNames(): void\n\t{\n\t\tconst reserved: string[] = this._reserved.map(r => typeof r !== 'string' ? r() : r);\n\t\tfor (const name of reserved)\n\t\t{\n\t\t\tif (!name) continue;\n\n\t\t\tconst command: Command = this.resolve(name)!;\n\t\t\tif (command)\n\t\t\t\tthrow new Error(`Command '${command.name}' is using reserved name or alias: '${name}'`);\n\t\t}\n\t}\n\n\t/**\n\t * Run the `init()` method of all loaded commands.\n\t * This is an internal method and should not be used\n\t * @private\n\t */\n\tpublic async _initCommands(): Promise<boolean>\n\t{\n\t\tlet success: boolean = true;\n\t\tfor (const command of this.values())\n\t\t{\n\t\t\tif (command._initialized) continue;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tawait command.init();\n\t\t\t\tcommand._initialized = true;\n\t\t\t}\n\t\t\tcatch (err)\n\t\t\t{\n\t\t\t\tsuccess = false;\n\t\t\t\tthis._logger.error(\n\t\t\t\t\t`Command \"${command.name}\" errored during initialization: \\n\\n${err.stack}`,\n\t\t\t\t\tcommand.external ? '\\n\\nPlease report this error to the command author.\\n' : '\\n');\n\t\t\t}\n\t\t}\n\t\treturn success;\n\t}\n}\n"],"sourceRoot":"../../src"}