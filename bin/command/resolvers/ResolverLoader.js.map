{"version":3,"sources":["command/resolvers/ResolverLoader.ts"],"names":[],"mappings":";;AAIA,0DAAuD;AACvD,0DAAuD;AACvD,4DAAyD;AACzD,8DAA2D;AAC3D,sDAAmD;AACnD,0DAAuD;AACvD,kEAA+D;AAC/D,4DAAyD;AACzD,sDAAmD;AACnD,sEAAmE;AACnE,4DAAyD;AAEzD;;GAEG;AACH,MAAa,cAAc;IAO1B,YAAmB,MAAc;QAEhC;;;WAGG;QACH,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QAEjB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,KAAK,GAAG;YACZ,+BAAc;YACd,+BAAc;YACd,iCAAe;YACf,mCAAgB;YAChB,2BAAY;YACZ,+BAAc;YACd,uCAAkB;YAClB,iCAAe;YACf,2BAAY;YACZ,2CAAoB;YACpB,iCAAe;SACf,CAAC;IACH,CAAC;IAED;;;;OAIG;IACI,GAAG,CAAC,IAAY;QAEtB,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAE,CAAC;IAC3F,CAAC;IAED;;;;OAIG;IACI,cAAc;QAEpB,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,EACvE;YACC,MAAM,WAAW,GAAa,IAAI,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACzD,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC;SAC5C;IACF,CAAC;CACD;AAtDD,wCAsDC","file":"ResolverLoader.js","sourcesContent":["import { Resolver } from './Resolver';\nimport { Client } from '../../client/Client';\nimport { ResolverConstructor } from '../../types/ResolverConstructor';\n\nimport { NumberResolver } from './base/NumberResolver';\nimport { StringResolver } from './base/StringResolver';\nimport { BooleanResolver } from './base/BooleanResolver';\nimport { DurationResolver } from './base/DurationResolver';\nimport { UserResolver } from './base/UserResolver';\nimport { MemberResolver } from './base/MemberResolver';\nimport { BannedUserResolver } from './base/BannedUserResolver';\nimport { ChannelResolver } from './base/ChannelResolver';\nimport { RoleResolver } from './base/RoleResolver';\nimport { CommandGroupResolver } from './base/CommandGroupResolver';\nimport { CommandResolver } from './base/CommandResolver';\n\n/**\n * Loads and stores Command argument {@link Resolver}s\n */\nexport class ResolverLoader\n{\n\tprivate readonly _client: Client;\n\tprivate readonly _base: ResolverConstructor[];\n\n\tpublic loaded: { [name: string]: Resolver };\n\n\tpublic constructor(client: Client)\n\t{\n\t\t/**\n\t\t * Object mapping Resolver type names to their instances\n\t\t * @type {object}\n\t\t */\n\t\tthis.loaded = {};\n\n\t\tthis._client = client;\n\t\tthis._base = [\n\t\t\tNumberResolver,\n\t\t\tStringResolver,\n\t\t\tBooleanResolver,\n\t\t\tDurationResolver,\n\t\t\tUserResolver,\n\t\t\tMemberResolver,\n\t\t\tBannedUserResolver,\n\t\t\tChannelResolver,\n\t\t\tRoleResolver,\n\t\t\tCommandGroupResolver,\n\t\t\tCommandResolver\n\t\t];\n\t}\n\n\t/**\n\t * Get a loaded Resolver by name or alias\n\t * @param {string} name Identifier of the Resolver to get\n\t * @returns {Resolver}\n\t */\n\tpublic get(name: string): Resolver\n\t{\n\t\treturn Object.values(this.loaded).find(r => r.name === name || r.aliases.includes(name))!;\n\t}\n\n\t/**\n\t * Load resolvers from _base and client._customResolvers.\n\t * Used internally\n\t * @private\n\t */\n\tpublic _loadResolvers(): void\n\t{\n\t\tfor (const resolver of this._base.concat(this._client._customResolvers))\n\t\t{\n\t\t\tconst newResolver: Resolver = new resolver(this._client);\n\t\t\tthis.loaded[newResolver.name] = newResolver;\n\t\t}\n\t}\n}\n"],"sourceRoot":"../../../src"}