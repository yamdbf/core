{"version":3,"sources":["command/resolvers/base/BooleanResolver.ts"],"names":[],"mappings":";;AAAA,0CAAuC;AAIvC,qDAAkD;AAElD,+BAAiC;AAEjC,MAAa,eAAgB,SAAQ,mBAAQ;IAK5C,YAAmB,MAAc;QAEhC,KAAK,CAAC,MAAM,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;QACpC,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,CAAC,CAAC,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;QAC5D,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC;IAC/D,CAAC;IAEM,QAAQ,CAAC,KAAU;QAEzB,OAAO,gBAAS,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC;IAEM,UAAU,CAAC,KAAa;QAE9B,KAAK,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;QAC5B,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC;YAAE,OAAO,IAAI,CAAC;QACxC,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC;YAAE,OAAO,KAAK,CAAC;IAC1C,CAAC;IAEM,KAAK,CAAC,OAAO,CAAC,OAAgB,EAAE,OAAgB,EAAE,IAAY,EAAE,KAAa;QAEnF,MAAM,IAAI,GAAW,MAAM,WAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;QAC5D,MAAM,GAAG,GAAkB,WAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QAE1D,MAAM,EAAE,GAAY,OAAO,CAAC,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC;QACpD,MAAM,MAAM,GAAW,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,OAAO,CAAC,KAAK,CAAC,OAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACtF,MAAM,KAAK,GAAW,WAAI,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;QAE5F,MAAM,MAAM,GAAY,IAAI,CAAC,UAAU,CAAC,KAAK,CAAE,CAAC;QAChD,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC3B,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,2BAA2B,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QAE/E,OAAO,MAAM,CAAC;IACf,CAAC;CACD;AAvCD,0CAuCC","file":"BooleanResolver.js","sourcesContent":["import { Resolver } from '../Resolver';\nimport { Client } from '../../../client/Client';\nimport { Command } from '../../Command';\nimport { Message } from '../../../types/Message';\nimport { Lang } from '../../../localization/Lang';\nimport { ResourceProxy } from '../../../types/ResourceProxy';\nimport { isBoolean } from 'util';\n\nexport class BooleanResolver extends Resolver\n{\n\tprivate readonly truthy: Set<string>;\n\tprivate readonly falsey: Set<string>;\n\n\tpublic constructor(client: Client)\n\t{\n\t\tsuper(client, 'Boolean', 'boolean');\n\t\tthis.truthy = new Set(['true', 'on', 'y', 'yes', 'enable']);\n\t\tthis.falsey = new Set(['false', 'off', 'n', 'no', 'disable']);\n\t}\n\n\tpublic validate(value: any): boolean\n\t{\n\t\treturn isBoolean(value);\n\t}\n\n\tpublic resolveRaw(value: string): boolean | undefined\n\t{\n\t\tvalue = value.toLowerCase();\n\t\tif (this.truthy.has(value)) return true;\n\t\tif (this.falsey.has(value)) return false;\n\t}\n\n\tpublic async resolve(message: Message, command: Command, name: string, value: string): Promise<boolean>\n\t{\n\t\tconst lang: string = await Lang.getLangFromMessage(message);\n\t\tconst res: ResourceProxy = Lang.createResourceProxy(lang);\n\n\t\tconst dm: boolean = message.channel.type !== 'text';\n\t\tconst prefix: string = !dm ? await message.guild.storage!.settings.get('prefix') : '';\n\t\tconst usage: string = Lang.getCommandInfo(command, lang).usage.replace(/<prefix>/g, prefix);\n\n\t\tconst result: boolean = this.resolveRaw(value)!;\n\t\tif (!(this.validate(result)))\n\t\t\tthrow new Error(res.RESOLVE_ERR_RESOLVE_BOOLEAN({ name, arg: value, usage }));\n\n\t\treturn result;\n\t}\n}\n"],"sourceRoot":"../../../../src"}