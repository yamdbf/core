{"version":3,"sources":["command/resolvers/base/UserResolver.ts"],"names":[],"mappings":"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","file":"UserResolver.js","sourcesContent":["import { User, Collection } from 'discord.js';\nimport { Resolver } from '../Resolver';\nimport { Client } from '../../../client/Client';\nimport { Command } from '../../Command';\nimport { Message } from '../../../types/Message';\nimport { Lang } from '../../../localization/Lang';\nimport { ResourceProxy } from '../../../types/ResourceProxy';\nimport { Util } from '../../../util/Util';\n\nexport class UserResolver extends Resolver\n{\n\tpublic constructor(client: Client)\n\t{\n\t\tsuper(client, 'User');\n\t}\n\n\tpublic async validate(value: any): Promise<boolean>\n\t{\n\t\treturn value instanceof User;\n\t}\n\n\tpublic async resolveRaw(value: string, context: Partial<Message> = {}): Promise<User | Collection<string, User> | undefined>\n\t{\n\t\tlet user!: User;\n\t\tconst idRegex: RegExp = /^(?:<@!?)?(\\d+)>?$/;\n\n\t\tif (idRegex.test(value))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tconst userID: string = value.match(idRegex)![1];\n\t\t\t\tuser = this.client.users.get(userID) || await this.client.users.fetch(userID);\n\t\t\t} catch {}\n\t\t\tif (!user) return;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconst normalized: string = Util.normalize(value);\n\t\t\tlet users: Collection<string, User> = this.client.users.filter(a =>\n\t\t\t\tUtil.normalize(a.username).includes(normalized)\n\t\t\t\t\t|| Util.normalize(a.tag).includes(normalized));\n\n\t\t\tif (context.guild)\n\t\t\t\tusers = users.concat(new Collection(\n\t\t\t\t\tcontext.guild.members\n\t\t\t\t\t\t.filter(a => Util.normalize(a.displayName).includes(normalized))\n\t\t\t\t\t\t.map(a => [a.id, a.user] as [string, User])));\n\n\t\t\tif (users.size === 1) user = users.first()!;\n\t\t\telse return users;\n\t\t}\n\n\t\treturn user;\n\t}\n\n\tpublic async resolve(message: Message, command: Command, name: string, value: string): Promise<User>\n\t{\n\t\tconst lang: string = await Lang.getLangFromMessage(message);\n\t\tconst res: ResourceProxy = Lang.createResourceProxy(lang);\n\n\t\tconst dm: boolean = message.channel.type !== 'text';\n\t\tconst prefix: string = !dm ? await message.guild.storage!.settings.get('prefix') : '';\n\t\tconst usage: string = Lang.getCommandInfo(command, lang).usage.replace(/<prefix>/g, prefix);\n\n\t\tconst idRegex: RegExp = /^(?:<@!?)?(\\d+)>?$/;\n\n\t\tlet user: User | Collection<string, User> = (await this.resolveRaw(value, message))!;\n\t\tif (idRegex.test(value))\n\t\t{\n\t\t\tif (!user)\n\t\t\t\tthrow new Error(res.RESOLVE_ERR_RESOLVE_TYPE_ID({ name, arg: value, usage, type: 'User' }));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (user instanceof Collection)\n\t\t\t{\n\t\t\t\tif (user.size > 1)\n\t\t\t\t\tthrow String(res.RESOLVE_ERR_MULTIPLE_USER_RESULTS({\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tusage,\n\t\t\t\t\t\tusers: user.map(u => `\\`${u.tag}\\``).join(', ')\n\t\t\t\t\t}));\n\n\t\t\t\tuser = user.first()!;\n\t\t\t}\n\n\t\t\tif (!user)\n\t\t\t\tthrow new Error(res.RESOLVE_ERR_RESOLVE_TYPE_TEXT({ name, arg: value, usage, type: 'User' }));\n\t\t}\n\n\t\treturn user as User;\n\t}\n}\n"],"sourceRoot":"../../../../src"}