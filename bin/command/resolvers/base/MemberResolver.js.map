{"version":3,"sources":["command/resolvers/base/MemberResolver.ts"],"names":[],"mappings":";;AAAA,0CAAuC;AAIvC,qDAAkD;AAElD,2CAAqD;AACrD,6CAA0C;AAE1C,MAAa,cAAe,SAAQ,mBAAQ;IAE3C,YAAmB,MAAc;QAEhC,KAAK,CAAC,MAAM,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;IACxC,CAAC;IAEM,KAAK,CAAC,QAAQ,CAAC,KAAU;QAE/B,OAAO,KAAK,YAAY,wBAAW,CAAC;IACrC,CAAC;IAEM,KAAK,CAAC,UAAU,CAAC,KAAa,EAAE,UAA4B,EAAE;QAEpE,IAAI,CAAC,OAAO,CAAC,KAAK;YAAE,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;QAEnF,IAAI,MAAoB,CAAC;QACzB,MAAM,OAAO,GAAW,oBAAoB,CAAC;QAE7C,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EACvB;YACC,IACA;gBACC,MAAM,MAAM,GAAW,KAAK,CAAC,KAAK,CAAC,OAAO,CAAE,CAAC,CAAC,CAAC,CAAC;gBAChD,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,MAAM,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;aACxF;YAAC,WAAM,GAAE;YACV,IAAI,CAAC,MAAM;gBAAE,OAAO;SACpB;aAED;YACC,MAAM,UAAU,GAAW,WAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YACjD,IAAI,OAAO,GAAoC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAC/E,WAAI,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC;mBAC9C,WAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC;mBACpD,WAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;YAEtD,IAAI,OAAO,CAAC,IAAI,KAAK,CAAC;gBAAE,MAAM,GAAG,OAAO,CAAC,KAAK,EAAG,CAAC;;gBAC7C,OAAO,OAAO,CAAC;SACpB;QAED,OAAO,MAAM,CAAC;IACf,CAAC;IAEM,KAAK,CAAC,OAAO,CAAC,OAAgB,EAAE,OAAgB,EAAE,IAAY,EAAE,KAAa;QAEnF,MAAM,IAAI,GAAW,MAAM,WAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;QAC5D,MAAM,GAAG,GAAkB,WAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QAE1D,MAAM,EAAE,GAAY,OAAO,CAAC,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC;QACpD,MAAM,MAAM,GAAW,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,OAAO,CAAC,KAAK,CAAC,OAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACtF,MAAM,KAAK,GAAW,WAAI,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;QAE5F,MAAM,OAAO,GAAW,oBAAoB,CAAC;QAE7C,IAAI,MAAM,GAAkD,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,CAAE,CAAC;QACrG,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EACvB;YACC,IAAI,CAAC,MAAM;gBACV,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,2BAA2B,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;SAC/F;aAED;YACC,IAAI,MAAM,YAAY,uBAAU,EAChC;gBACC,IAAI,MAAM,CAAC,IAAI,GAAG,CAAC;oBAClB,MAAM,MAAM,CAAC,GAAG,CAAC,iCAAiC,CAAC;wBAClD,IAAI;wBACJ,KAAK;wBACL,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;qBACtD,CAAC,CAAC,CAAC;gBAEL,MAAM,GAAG,MAAM,CAAC,KAAK,EAAG,CAAC;aACzB;YAED,IAAI,CAAC,MAAM;gBACV,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,6BAA6B,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;SACjG;QAED,OAAO,MAAqB,CAAC;IAC9B,CAAC;CACD;AAhFD,wCAgFC","file":"MemberResolver.js","sourcesContent":["import { Resolver } from '../Resolver';\nimport { Client } from '../../../client/Client';\nimport { Command } from '../../Command';\nimport { Message } from '../../../types/Message';\nimport { Lang } from '../../../localization/Lang';\nimport { ResourceProxy } from '../../../types/ResourceProxy';\nimport { GuildMember, Collection } from 'discord.js';\nimport { Util } from '../../../util/Util';\n\nexport class MemberResolver extends Resolver\n{\n\tpublic constructor(client: Client)\n\t{\n\t\tsuper(client, 'Member', 'GuildMember');\n\t}\n\n\tpublic async validate(value: any): Promise<boolean>\n\t{\n\t\treturn value instanceof GuildMember;\n\t}\n\n\tpublic async resolveRaw(value: string, context: Partial<Message> = {}): Promise<GuildMember | Collection<string, GuildMember> | undefined>\n\t{\n\t\tif (!context.guild) throw new Error('Cannot resolve given value: missing context');\n\n\t\tlet member!: GuildMember;\n\t\tconst idRegex: RegExp = /^(?:<@!?)?(\\d+)>?$/;\n\n\t\tif (idRegex.test(value))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tconst userID: string = value.match(idRegex)![1];\n\t\t\t\tmember = context.guild.members.get(userID) || await context.guild.members.fetch(userID);\n\t\t\t} catch {}\n\t\t\tif (!member) return;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconst normalized: string = Util.normalize(value);\n\t\t\tlet members: Collection<string, GuildMember> = context.guild.members.filter(a =>\n\t\t\t\tUtil.normalize(a.displayName).includes(normalized)\n\t\t\t\t\t|| Util.normalize(a.user.username).includes(normalized)\n\t\t\t\t\t|| Util.normalize(a.user.tag).includes(normalized));\n\n\t\t\tif (members.size === 1) member = members.first()!;\n\t\t\telse return members;\n\t\t}\n\n\t\treturn member;\n\t}\n\n\tpublic async resolve(message: Message, command: Command, name: string, value: string): Promise<GuildMember>\n\t{\n\t\tconst lang: string = await Lang.getLangFromMessage(message);\n\t\tconst res: ResourceProxy = Lang.createResourceProxy(lang);\n\n\t\tconst dm: boolean = message.channel.type !== 'text';\n\t\tconst prefix: string = !dm ? await message.guild.storage!.settings.get('prefix') : '';\n\t\tconst usage: string = Lang.getCommandInfo(command, lang).usage.replace(/<prefix>/g, prefix);\n\n\t\tconst idRegex: RegExp = /^(?:<@!?)?(\\d+)>?$/;\n\n\t\tlet member: GuildMember | Collection<string, GuildMember> = (await this.resolveRaw(value, message))!;\n\t\tif (idRegex.test(value))\n\t\t{\n\t\t\tif (!member)\n\t\t\t\tthrow new Error(res.RESOLVE_ERR_RESOLVE_TYPE_ID({ name, arg: value, usage, type: 'Member' }));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (member instanceof Collection)\n\t\t\t{\n\t\t\t\tif (member.size > 1)\n\t\t\t\t\tthrow String(res.RESOLVE_ERR_MULTIPLE_USER_RESULTS({\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tusage,\n\t\t\t\t\t\tusers: member.map(m => `\\`${m.user.tag}\\``).join(', ')\n\t\t\t\t\t}));\n\n\t\t\t\tmember = member.first()!;\n\t\t\t}\n\n\t\t\tif (!member)\n\t\t\t\tthrow new Error(res.RESOLVE_ERR_RESOLVE_TYPE_TEXT({ name, arg: value, usage, type: 'Member' }));\n\t\t}\n\n\t\treturn member as GuildMember;\n\t}\n}\n"],"sourceRoot":"../../../../src"}