{"version":3,"sources":["command/resolvers/base/CommandGroupResolver.ts"],"names":[],"mappings":";;AAAA,0CAAuC;AAIvC,qDAAkD;AAElD,6CAA0C;AAE1C,MAAa,oBAAqB,SAAQ,mBAAQ;IAEjD,YAAmB,MAAc;QAEhC,KAAK,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;IAC/B,CAAC;IAEM,QAAQ,CAAC,KAAU;QAEzB,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACpD,CAAC;IAEM,UAAU,CAAC,KAAa;QAE9B,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM;aAChC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,WAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAChE,CAAC;IAEM,KAAK,CAAC,OAAO,CAAC,OAAgB,EAAE,OAAgB,EAAE,IAAY,EAAE,KAAa;QAEnF,MAAM,IAAI,GAAW,MAAM,WAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;QAC5D,MAAM,GAAG,GAAkB,WAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QAE1D,MAAM,EAAE,GAAY,OAAO,CAAC,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC;QACpD,MAAM,MAAM,GAAW,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,OAAO,CAAC,KAAK,CAAC,OAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACtF,MAAM,KAAK,GAAW,WAAI,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;QAE5F,MAAM,MAAM,GAAW,IAAI,CAAC,UAAU,CAAC,KAAK,CAAE,CAAC;QAC/C,IAAI,CAAC,MAAM;YACV,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,6BAA6B,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC;QAEvG,OAAO,MAAM,CAAC;IACf,CAAC;CACD;AAjCD,oDAiCC","file":"CommandGroupResolver.js","sourcesContent":["import { Resolver } from '../Resolver';\nimport { Client } from '../../../client/Client';\nimport { Command } from '../../Command';\nimport { Message } from '../../../types/Message';\nimport { Lang } from '../../../localization/Lang';\nimport { ResourceProxy } from '../../../types/ResourceProxy';\nimport { Util } from '../../../util/Util';\n\nexport class CommandGroupResolver extends Resolver\n{\n\tpublic constructor(client: Client)\n\t{\n\t\tsuper(client, 'CommandGroup');\n\t}\n\n\tpublic validate(value: any): boolean\n\t{\n\t\treturn this.client.commands.groups.includes(value);\n\t}\n\n\tpublic resolveRaw(value: string): string | undefined\n\t{\n\t\treturn this.client.commands.groups\n\t\t\t.find(g => Util.normalize(g).includes(Util.normalize(value)));\n\t}\n\n\tpublic async resolve(message: Message, command: Command, name: string, value: string): Promise<string>\n\t{\n\t\tconst lang: string = await Lang.getLangFromMessage(message);\n\t\tconst res: ResourceProxy = Lang.createResourceProxy(lang);\n\n\t\tconst dm: boolean = message.channel.type !== 'text';\n\t\tconst prefix: string = !dm ? await message.guild.storage!.settings.get('prefix') : '';\n\t\tconst usage: string = Lang.getCommandInfo(command, lang).usage.replace(/<prefix>/g, prefix);\n\n\t\tconst result: string = this.resolveRaw(value)!;\n\t\tif (!result)\n\t\t\tthrow new Error(res.RESOLVE_ERR_RESOLVE_TYPE_TEXT({ name, arg: value, usage, type: 'CommandGroup' }));\n\n\t\treturn result;\n\t}\n}\n"],"sourceRoot":"../../../../src"}