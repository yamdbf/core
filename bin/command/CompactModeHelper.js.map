{"version":3,"sources":["command/CompactModeHelper.ts"],"names":[],"mappings":"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","file":"CompactModeHelper.js","sourcesContent":["import { Client } from '../client/Client';\nimport { Message, GuildMember, User } from 'discord.js';\n\ntype SingleUseButton = { expires: number, consumed: boolean, emoji: string, action: Function };\n\n/**\n * Helper singleton for attaching single-use, expiring reaction buttons to\n * Messages, to be used by the Client when compact mode is active\n */\nexport class CompactModeHelper\n{\n\tprivate static _instance: CompactModeHelper;\n\n\tprivate readonly _client: Client;\n\tprivate readonly _buttons: { [identifier: string]: SingleUseButton };\n\n\tprivate constructor(client: Client)\n\t{\n\t\tif (CompactModeHelper._instance)\n\t\t\tthrow new Error('Cannot create multiple instances of CompactModeHelper');\n\n\t\tthis._client = client;\n\t\tthis._buttons = {};\n\n\t\t// Handle button clicks\n\t\tthis._client.on('messageReactionAdd', (reaction, user) => {\n\t\t\tconst emojiIdentifier: string = reaction.emoji.id || reaction.emoji.name;\n\t\t\tconst buttonIdentifier: string = `${reaction.message.id}:${emojiIdentifier}`;\n\n\t\t\tif (!(buttonIdentifier in this._buttons)) return;\n\t\t\tif (user.id !== reaction.message.author!.id) return;\n\n\t\t\tconst button: SingleUseButton = this._buttons[buttonIdentifier];\n\n\t\t\tif (button.consumed || button.expires < Date.now()) return;\n\n\t\t\tbutton.consumed = true;\n\t\t\tbutton.action();\n\t\t});\n\n\t\t// Clean up expired/consumed buttons\n\t\tthis._client.setInterval(() => {\n\t\t\tfor (const identifier in this._buttons)\n\t\t\t{\n\t\t\t\tconst button: SingleUseButton = this._buttons[identifier];\n\t\t\t\tif (button.consumed || button.expires < Date.now())\n\t\t\t\t\tdelete this._buttons[identifier];\n\t\t\t}\n\t\t}, 30e3);\n\t}\n\n\t/**\n\t * Create the CompactModeHelper singleton instance\n\t * >**Note:** This is called automatically by the Client.\n\t * You do not need to create your own instance\n\t * @param {Client} client YAMDBF Client instance\n\t * @returns {void}\n\t */\n\tpublic static createInstance(client: Client): void\n\t{\n\t\tCompactModeHelper._instance = new CompactModeHelper(client);\n\t}\n\n\t/**\n\t * Register a single-use reaction button on a Message that will\n\t * execute the given action when clicked by the Message author.\n\t *\n\t * Buttons remain clickable for the given lifespan (30 seconds by\n\t * default), or until consumed via click by the Message author\n\t *\n\t * >If the Client doesn't have permissions to add reactions the\n\t * given action function will be invoked immediately\n\t * @param {Message} message Message to register a button for\n\t * @param {string} emoji A unicode emoji, custom emoji ID, or a button\n\t * \t\t\t\t\t\t key from {@link Client#buttons}\n\t * @param {Function} action Function to execute when the reaction button is clicked\n\t * @param {number} [lifespan=30000] Lifespan of the button in MS\n\t * @returns {Promise<void>}\n\t */\n\tpublic static async registerButton(message: Message, emoji: string, action: Function, lifespan: number = 30e3): Promise<void>\n\t{\n\t\tif (!CompactModeHelper._instance)\n\t\t\tthrow new Error('CompactModeHelper instance has not been created');\n\n\t\tif (typeof emoji !== 'string')\n\t\t\tthrow new TypeError('Emoji must be a unicode emoji, custom emoji id, or client button key');\n\n\t\tif (CompactModeHelper._instance._client.buttons[emoji])\n\t\t\temoji = CompactModeHelper._instance._client.buttons[emoji];\n\n\t\tlet clientMember!: GuildMember;\n\t\tlet invokeImmediately: boolean = false;\n\n\t\tif (message.channel.type === 'text')\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tconst clientUser: User = CompactModeHelper._instance._client.user!;\n\t\t\t\tclientMember = message.guild!.members.get(clientUser.id) || await message.guild!.members.fetch(clientUser);\n\t\t\t}\n\t\t\tcatch { invokeImmediately = true; }\n\t\t}\n\n\t\tif (clientMember && !clientMember.permissionsIn(message.channel).has('ADD_REACTIONS'))\n\t\t\tinvokeImmediately = true;\n\n\t\tif (!invokeImmediately)\n\t\t{\n\t\t\tawait message.react(emoji);\n\t\t\tCompactModeHelper._instance._buttons[`${message.id}:${emoji}`] =\n\t\t\t\t{ expires: Date.now() + lifespan, consumed: false, emoji, action };\n\t\t}\n\t\telse action();\n\t}\n}\n"],"sourceRoot":"../../src"}