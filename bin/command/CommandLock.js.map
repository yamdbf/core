{"version":3,"sources":["command/CommandLock.ts"],"names":[],"mappings":";;AACA,+CAA4C;AAC5C,6DAA+D;AAE/D;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH;IAWC,YAAmB,GAAG,QAAkB;QAEvC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IAClB,CAAC;IAED;;;;;OAKG;IACH,+DAA+D;IACxD,IAAI,CAAC,OAAgB,EAAE,IAAW;QAExC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAM,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;IACvC,CAAC;IAED;;;;;OAKG;IACH,+DAA+D;IACxD,QAAQ,CAAC,OAAgB,EAAE,IAAW;QAE5C,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAM,CAAC,EAAE,CAAC,IAAI,KAAK,CAAC;IAChD,CAAC;IAED;;;;;;OAMG;IACH,+DAA+D;IACxD,IAAI,CAAC,OAAgB,EAAE,IAAW;QAExC,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAM,CAAC,EAAE,CAAC,CAAC;IACvC,CAAC;IAED;;;;;;;;;;OAUG;IACH,2EAA2E;IACpE,QAAQ,CAAC,IAAY,EAAE,OAAgB,EAAE,IAAW;QAE1D,OAAO,WAAI,CAAC,GAAG,CAAC,IAAI,EAAE,yBAAC,CAAC,6BAA6B,CAAC,CAAC;IACxD,CAAC;CACD;AAtED,kCAsEC","file":"CommandLock.js","sourcesContent":["import { Message } from 'discord.js';\nimport { Lang } from '../localization/Lang';\nimport { BaseStrings as s } from '../localization/BaseStrings';\n\n/**\n * Class to be used by a command that should prevent others from using\n * it when in use by anyone else. CommandLocks can define sibling commands\n * by name that will also be locked when the command is locked.\n *\n * >To use this (or your own extension class) on a Command, create a new\n * instance and assign it to your Command's `lock` field in your Command\n * constructor.\n *\n * By default a command will be locked for a maximum of 30 seconds if\n * something goes wrong and a command fails to finish. This can be\n * changed by setting `lockTimeout` in your CommandInfo to a desired\n * time in ms, or `0` to disable the lock timeout entirely.\n *\n * **NOTE:** Command locks only apply within a guild context. You must\n * declare set `guildOnly` to `true` to be able to utilize a CommandLock\n * for that command.\n *\n * >By extending this class and overriding `lock()`, `isLocked()`, `free()`,\n * and `getError()` with your own definitions you can effectively define your own\n * lock behavior. These methods will be passed the same Message context and\n * arguments as your Command so you can define any behavior you desire, like\n * locking multiple commands that operate on a given user while one of the\n * commands is in use.\n * @param {...string} siblings Associated commands to lock\n */\nexport class CommandLock\n{\n\tprivate _locks: { [guild: string]: boolean };\n\n\t/**\n\t * Associated commands that will also be locked when the\n\t * command is locked\n\t * @type {string[]}\n\t */\n\tpublic siblings: string[];\n\n\tpublic constructor(...siblings: string[])\n\t{\n\t\tthis.siblings = siblings;\n\t\tthis._locks = {};\n\t}\n\n\t/**\n\t * Sets the lock\n\t * @param {Message} message Message that triggered the command\n\t * @param {any[]} args Arguments passed to the command\n\t * @returns {void}\n\t */\n\t// @ts-ignore - Args will be passed by the framework regardless\n\tpublic lock(message: Message, args: any[]): void\n\t{\n\t\tthis._locks[message.guild!.id] = true;\n\t}\n\n\t/**\n\t * Returns whether or not this lock is active\n\t * @param {Message} message Message that triggered the command\n\t * @param {any[]} args Arguments passed to the command\n\t * @returns {boolean}\n\t */\n\t// @ts-ignore - Args will be passed by the framework regardless\n\tpublic isLocked(message: Message, args: any[]): boolean\n\t{\n\t\treturn this._locks[message.guild!.id] || false;\n\t}\n\n\t/**\n\t * Frees this lock. Called automatically when the command finishes,\n\t * or when the lockTimeout fires\n\t * @param {Message} message Message that triggered the command\n\t * @param {any[]} args Arguments passed to the command\n\t * @returns {void}\n\t */\n\t// @ts-ignore - Args will be passed by the framework regardless\n\tpublic free(message: Message, args: any[]): void\n\t{\n\t\tdelete this._locks[message.guild!.id];\n\t}\n\n\t/**\n\t * Get an error string describing the effects of this lock. Defaults\n\t * to `'This command is currently in use.` for en_us.\n\t *\n\t * >When defining your own lock behavior, consider using details\n\t * related to the conditions under which your commands are locked.\n\t * @param {string} lang The language to use for the error string\n\t * @param {Message} message Message that triggered the command\n\t * @param {any[]} args Arguments passed to the command\n\t * @returns {string}\n\t */\n\t// @ts-ignore - Message and args will be passed by the framework regardless\n\tpublic getError(lang: string, message: Message, args: any[]): string\n\t{\n\t\treturn Lang.res(lang, s.DISPATCHER_ERR_COMMAND_LOCKED);\n\t}\n}\n"],"sourceRoot":"../../src"}