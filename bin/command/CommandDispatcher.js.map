{"version":3,"sources":["command/CommandDispatcher.ts"],"names":[],"mappings":"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","file":"CommandDispatcher.js","sourcesContent":["import { PermissionResolvable, TextChannel, User, MessageOptions, Message as DMessage, Guild } from 'discord.js';\nimport { MiddlewareFunction } from '../types/MiddlewareFunction';\nimport { Logger, logger } from '../util/logger/Logger';\nimport { Message } from '../types/Message';\nimport { GuildStorage } from '../storage/GuildStorage';\nimport { Command } from '../command/Command';\nimport { Client } from '../client/Client';\nimport { RateLimitManager } from './RateLimitManager';\nimport { RateLimit } from './RateLimit';\nimport { Time } from '../util/Time';\nimport { Lang } from '../localization/Lang';\nimport { ResourceProxy } from '../types/ResourceProxy';\nimport { BaseStrings as s } from '../localization/BaseStrings';\nimport { Util } from '../util/Util';\nimport { format } from 'util';\nimport { CompactModeHelper } from './CompactModeHelper';\nimport { CommandLock } from './CommandLock';\n\n/**\n * Handles dispatching commands\n * @private\n */\nexport class CommandDispatcher\n{\n\t@logger private readonly _logger!: Logger;\n\tprivate readonly _client: Client;\n\tprivate _locks: { [guild: string]: { [command: string]: CommandLock } };\n\tprivate _ready: boolean = false;\n\n\tpublic constructor(client: Client)\n\t{\n\t\tthis._client = client;\n\t\tthis._locks = {};\n\n\t\tif (!this._client.passive)\n\t\t{\n\t\t\tthis._client.on('message', async message => {\n\t\t\t\tif (this._ready)\n\t\t\t\t{\n\t\t\t\t\tconst wasCommandCalled: boolean = await this.handleMessage(message as Message);\n\t\t\t\t\tif (!wasCommandCalled) this._client.emit('noCommand', message);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Set the dispatcher as ready to receive and dispatch commands\n\t */\n\tpublic setReady(): void\n\t{\n\t\tthis._ready = true;\n\t}\n\n\t/**\n\t * Handle received messages\n\t */\n\tprivate async handleMessage(message: Message): Promise<boolean>\n\t{\n\t\tconst dispatchStart: number = Util.now();\n\t\tconst dm: boolean = message.channel.type !== 'text';\n\n\t\t// Dismiss messages with no author\n\t\tif (!message.author) return false;\n\n\t\t// Dismiss messages from bots\n\t\tif (message.author.bot) return false;\n\n\t\t// Fail silently if the guild doesn't have a guild storage,\n\t\t// though this should never happen\n\t\tif (!dm && !this._client.storage.guilds.has(message.guild.id)) return false;\n\n\t\t// Don't bother with anything else if author is blacklisted\n\t\tif (await this.isBlacklisted(message.author, message, dm)) return false;\n\n\t\tconst lang: string = await Lang.getLangFromMessage(message);\n\t\tconst res: ResourceProxy = Lang.createResourceProxy(lang);\n\n\t\ttype CommandCallData = [boolean, Command | null, string, string | null];\n\t\tlet [commandWasCalled, command, prefix, name]: CommandCallData =\n\t\t\tawait Util.wasCommandCalled(message);\n\n\t\tif (!commandWasCalled)\n\t\t{\n\t\t\t// Handle shortcuts\n\t\t\tif (!dm)\n\t\t\t{\n\t\t\t\tlet shortcuts: { [name: string]: string } =\n\t\t\t\t\tawait message.guild.storage!.settings.get('shortcuts') || {};\n\n\t\t\t\tif (shortcuts && prefix && name && shortcuts[name])\n\t\t\t\t{\n\t\t\t\t\tconst shortcutName: string = name;\n\t\t\t\t\tconst shortcutCall: RegExp = new RegExp(`^${Util.escape(prefix)} *${Util.escape(name)}`);\n\t\t\t\t\tconst oldArgsStr: string = message.content.replace(shortcutCall, '');\n\t\t\t\t\tconst newCommand: string = `${prefix}${shortcuts[name]}`;\n\n\t\t\t\t\tmessage.content = newCommand;\n\t\t\t\t\t[commandWasCalled, command, prefix, name] = await Util.wasCommandCalled(message);\n\n\t\t\t\t\tconst shortcutArgs: string[] = this._client.argsParser(oldArgsStr, command!, message);\n\t\t\t\t\tmessage.content = format(newCommand, ...shortcutArgs);\n\n\t\t\t\t\tif (!commandWasCalled)\n\t\t\t\t\t\tmessage.channel.send(res.DISPATCHER_ERR_INVALID_SHORTCUT({ name: shortcutName }));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Send unknownCommandError in DMs\n\t\t\tif (dm && this._client.unknownCommandError)\n\t\t\t\tmessage.channel.send(this.unknownCommandError(res));\n\n\t\t\t// Emit an `unknownCommand` event and return if no\n\t\t\t// command or shortcut was called\n\t\t\tif (!commandWasCalled)\n\t\t\t{\n\t\t\t\tif (name)\n\t\t\t\t{\n\t\t\t\t\tconst unknownCall: RegExp = new RegExp(`^${Util.escape(prefix || '')} *${Util.escape(name)}`);\n\t\t\t\t\tconst unknownArgsStr: string = message.content.replace(unknownCall, '');\n\t\t\t\t\tconst unknownCommandArgs: any[] = this._client.argsParser(unknownArgsStr);\n\t\t\t\t\tthis._client.emit('unknownCommand', name, unknownCommandArgs, message);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse return false;\n\t\t\t}\n\t\t}\n\n\t\t// Determine if the command call was valid, returning the error and exiting if not\n\t\tlet validCall: boolean = false;\n\t\ttry { validCall = await this.canCallCommand(res, command as Command, message, dm); }\n\t\tcatch (err) { message.author.send(err); }\n\t\tif (!validCall) return true;\n\n\t\t// Remove clientuser from message.mentions if only mentioned one time as a prefix\n\t\tconst clientMention: RegExp = new RegExp(`<@!?${this._client.user!.id}>`, 'g');\n\t\tconst startsWithClientMention: RegExp = new RegExp(`^${clientMention.source}`);\n\t\tif (startsWithClientMention.test(message.content)\n\t\t\t&& (message.content.match(clientMention) || []).length === 1)\n\t\t\tmessage.mentions.users.delete(this._client.user!.id);\n\n\t\t// Prepare args\n\t\tconst call: RegExp = new RegExp(`^${Util.escape(prefix)} *${Util.escape(name!)}`);\n\t\tconst preppedInput: string = message.content.replace(call, '').trim();\n\t\tlet args: string[] = this._client.argsParser(preppedInput, command!, message);\n\n\t\ttype Result = string | MessageOptions | Message;\n\t\ttype CommandResult = Result | Result[] | Promise<Result> | Promise<Result[]>;\n\t\ttype MiddlewareResult = [Message, any[]] | Promise<[Message, any[]]> | string | Error;\n\n\t\tlet commandResult!: CommandResult;\n\t\tlet middlewarePassed: boolean = true;\n\t\tlet middleware: MiddlewareFunction[] = this._client._middleware.concat(command!._middleware);\n\n\t\t// Function to send middleware result, utilizing compact mode if enabled\n\t\tconst sendMiddlewareResult: (result: string, options?: MessageOptions) => Promise<any> =\n\t\t\tasync (result, options) => {\n\t\t\t\tif (await message.guild.storage!.settings.get('compact') || this._client.compact)\n\t\t\t\t{\n\t\t\t\t\tif (message.reactions.size > 0) await message.reactions.removeAll();\n\t\t\t\t\treturn CompactModeHelper.registerButton(\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t\tthis._client.buttons['fail'],\n\t\t\t\t\t\t() => message.channel.send(result, options));\n\t\t\t\t}\n\t\t\t\telse return message.channel.send(result);\n\t\t\t};\n\n\t\t// Run middleware\n\t\tfor (let func of middleware)\n\t\t\ttry\n\t\t\t{\n\t\t\t\tlet result: MiddlewareResult = func.call(command, message, args);\n\t\t\t\tif (result instanceof Promise) result = await result;\n\t\t\t\tif (!(result instanceof Array))\n\t\t\t\t{\n\t\t\t\t\tif (typeof result === 'string') commandResult = await sendMiddlewareResult(result);\n\t\t\t\t\tmiddlewarePassed = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t[message, args] = result;\n\t\t\t}\n\t\t\tcatch (err)\n\t\t\t{\n\t\t\t\tcommandResult = await sendMiddlewareResult(err.toString(), { split: true });\n\t\t\t\tmiddlewarePassed = false;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\tif (!middlewarePassed) return true;\n\n\t\t// Return an error if the command is locked\n\t\tif (!dm && this.isLocked(command!, message, args))\n\t\t{\n\t\t\tconst currentLock: CommandLock = this.getCurrentLock(command!, message.guild);\n\t\t\tmessage.channel.send(currentLock.getError(lang, message, args));\n\t\t\treturn true;\n\t\t}\n\n\t\t// Set up the command lock for this command if it exists\n\t\tconst lock: CommandLock = command!.lock;\n\t\tlet lockTimeout: NodeJS.Timer;\n\t\tif (!dm && lock)\n\t\t{\n\t\t\tUtil.assignNestedValue(this._locks, [message.guild.id, command!.name], lock);\n\t\t\tlock.lock(message, args);\n\t\t\tif (command!.lockTimeout > 0)\n\t\t\t\tlockTimeout = this._client.setTimeout(() => lock.free(message, args), command!.lockTimeout);\n\t\t}\n\n\t\t// Run the command\n\t\ttry { commandResult = await command!.action(message, args); }\n\t\tcatch (err) { this._logger.error(`Dispatch:${command!.name}`, err.stack); }\n\n\t\t// Send command result to the channel if it's of a supported type\n\t\tif (commandResult !== null\n\t\t\t&& typeof commandResult !== 'undefined'\n\t\t\t&& !(commandResult instanceof Array)\n\t\t\t&& !(commandResult instanceof DMessage))\n\t\t\tcommandResult = await message.channel.send(commandResult as string) as CommandResult;\n\n\t\t// commandResult = Util.flattenArray([<Message | Message[]> commandResult]);\n\t\t// TODO: Store command result information for command editing\n\n\t\t// Clean up the command lock after execution has finished\n\t\tif (!dm && lock)\n\t\t{\n\t\t\tUtil.removeNestedValue(this._locks, [message.guild.id, command!.name]);\n\t\t\tif (lockTimeout!) this._client.clearTimeout(lockTimeout!);\n\t\t\tlock.free(message, args);\n\t\t}\n\n\t\tconst dispatchEnd: number = Util.now() - dispatchStart;\n\t\tthis._client.emit('command', command!.name, args, dispatchEnd, message);\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Return whether or not the given command is locked, either directly\n\t * or as a sibling of another command\n\t */\n\tprivate isLocked(command: Command, message: Message, args: any): boolean\n\t{\n\t\tconst lock: CommandLock = this.getCurrentLock(command, message.guild);\n\t\treturn lock ? lock.isLocked(message, args) : false;\n\t}\n\n\t/**\n\t * Return the lock that is preventing the command from being called.\n\t * This can be the command's own lock, or the lock of another command\n\t * that the given command is a sibling of\n\t */\n\tprivate getCurrentLock(command: Command, guild: Guild): CommandLock\n\t{\n\t\tconst locks: { [command: string]: CommandLock } = this._locks[guild.id] || {};\n\t\tlet lock: CommandLock = locks[command.name];\n\t\tif (lock) return lock;\n\n\t\tfor (const commandName of Object.keys(locks))\n\t\t\tif (locks[commandName].siblings.includes(command.name))\n\t\t\t\tlock = locks[commandName];\n\n\t\treturn lock;\n\t}\n\n\t/**\n\t * Check if the calling user is blacklisted\n\t */\n\tprivate async isBlacklisted(user: User, message: Message, dm: boolean): Promise<boolean>\n\t{\n\t\tif (await this._client.storage.get(`blacklist.${user.id}`)) return true;\n\t\tif (!dm && await message.guild.storage!.settings.get(`blacklist.${user.id}`)) return true;\n\t\treturn false;\n\t}\n\n\t/**\n\t * Return whether or not the command is allowed to be called based\n\t * on whatever circumstances are present at call-time, throwing\n\t * appropriate errors as necessary for unsatisfied conditions\n\t */\n\tprivate async canCallCommand(res: ResourceProxy, command: Command, message: Message, dm: boolean): Promise<boolean>\n\t{\n\t\tconst storage: GuildStorage | null = !dm ? this._client.storage.guilds.get(message.guild.id)! : null;\n\n\t\tif (command.ownerOnly && !this._client.isOwner(message.author!)) return false;\n\t\tif (!dm && (await storage!.settings.get('disabledGroups') || []).includes(command.group)) return false;\n\t\tif (!this.passedRateLimiters(res, message, command)) return false;\n\n\t\tif (dm && command.guildOnly)\n\t\t\tthrow this.guildOnlyError(res);\n\n\t\tconst missingClientPermissions: PermissionResolvable[] = this.checkClientPermissions(command, message, dm);\n\t\tif (missingClientPermissions.length > 0)\n\t\t{\n\t\t\t// Explicitly send this error to the channel rather than throwing\n\t\t\tmessage.channel.send(this.missingClientPermissionsError(res, missingClientPermissions));\n\t\t\treturn false;\n\t\t}\n\n\t\tconst missingCallerPermissions: PermissionResolvable[] = this.checkCallerPermissions(command, message, dm);\n\t\tif (missingCallerPermissions.length > 0)\n\t\t\tthrow this.missingCallerPermissionsError(res, missingCallerPermissions);\n\n\t\tif (!(await this.passedRoleLimiter(command, message, dm)))\n\t\t\tthrow await this.failedLimiterError(res, command, message);\n\n\t\tif (!this.hasRoles(command, message, dm))\n\t\t\tthrow this.missingRolesError(res, command);\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Return whether or not the message author passed global\n\t * and command-specific ratelimits for the given command\n\t */\n\tprivate passedRateLimiters(res: ResourceProxy, message: Message, command: Command): boolean\n\t{\n\t\tconst passedGlobal: boolean = !this.isRateLimited(res, message, command, true);\n\t\tconst passedCommand: boolean = !this.isRateLimited(res, message, command);\n\t\tconst passedAllLimiters: boolean = passedGlobal && passedCommand;\n\n\t\tif (passedAllLimiters)\n\t\t{\n\t\t\tconst manager: RateLimitManager = this._client.rateLimitManager;\n\t\t\tconst limit: string = command.ratelimit;\n\t\t\tconst identifier: string = command.ratelimit ? command.name : 'global';\n\t\t\tconst descriptors: string[] = [message.author!.id, identifier];\n\n\t\t\tif (!(limit && !manager.call(limit, ...descriptors)) && this._client.ratelimit)\n\t\t\t\tmanager.call(this._client.ratelimit, message.author!.id, 'global');\n\t\t}\n\n\t\treturn passedAllLimiters;\n\t}\n\n\t/**\n\t * Check global or command-specific ratelimits for the given message\n\t * author, notify them if they exceed ratelimits, and return whether\n\t * or not the user is ratelimited\n\t */\n\tprivate isRateLimited(res: ResourceProxy, message: Message, command: Command, global: boolean = false): boolean\n\t{\n\t\tconst manager: RateLimitManager = this._client.rateLimitManager;\n\t\tconst limit: string = command.ratelimit || this._client.ratelimit;\n\t\tif (!limit) return false;\n\n\t\tconst identifier: string = command.ratelimit ? !global ? command.name : 'global' : 'global';\n\t\tconst descriptors: string[] = [message.author!.id, identifier];\n\t\tconst rateLimit: RateLimit = manager.get(limit, ...descriptors);\n\t\tif (!rateLimit.isLimited) return false;\n\n\t\tif (!rateLimit.wasNotified)\n\t\t{\n\t\t\tconst globalLimitString: string = this._client.ratelimit;\n\t\t\tconst globalLimit: RateLimit | null = globalLimitString\n\t\t\t\t? manager.get(globalLimitString, message.author!.id, 'global')\n\t\t\t\t: null;\n\t\t\tif (globalLimit && globalLimit.isLimited && globalLimit.wasNotified) return true;\n\n\t\t\ttype RateLimitErrorString = s.DISPATCHER_ERR_RATELIMIT_EXCEED_GLOBAL | s.DISPATCHER_ERR_RATELIMIT_EXCEED;\n\t\t\tconst errStr: RateLimitErrorString = global\n\t\t\t\t? s.DISPATCHER_ERR_RATELIMIT_EXCEED_GLOBAL\n\t\t\t\t: s.DISPATCHER_ERR_RATELIMIT_EXCEED;\n\n\t\t\trateLimit.setNotified();\n\t\t\tmessage.channel.send(res[errStr]({ time: Time.difference(rateLimit.expires, Date.now()).toString() }));\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Return permissions the client is missing to execute the given command\n\t */\n\tprivate checkClientPermissions(command: Command, message: Message, dm: boolean): PermissionResolvable[]\n\t{\n\t\treturn dm ? [] : command.clientPermissions.filter(a =>\n\t\t\t!(message.channel as TextChannel).permissionsFor(this._client.user!)!.has(a));\n\t}\n\n\t/**\n\t * Return the permissions the caller is missing to call the given command\n\t */\n\tprivate checkCallerPermissions(command: Command, message: Message, dm: boolean): PermissionResolvable[]\n\t{\n\t\treturn dm ? [] : command.callerPermissions.filter(a =>\n\t\t\t!(message.channel as TextChannel).permissionsFor(message.author!)!.has(a));\n\t}\n\n\t/**\n\t * Return whether or not the message author passes the role limiter\n\t */\n\tprivate async passedRoleLimiter(command: Command, message: Message, dm: boolean): Promise<boolean>\n\t{\n\t\tif (dm) return true;\n\n\t\tconst storage: GuildStorage = this._client.storage.guilds.get(message.guild.id)!;\n\t\tconst limitedCommands: { [name: string]: string[] } = await storage.settings.get('limitedCommands') || {};\n\n\t\tif (!limitedCommands[command.name]) return true;\n\t\tif (limitedCommands[command.name].length === 0) return true;\n\n\t\treturn message.member!.roles.filter(role =>\n\t\t\tlimitedCommands[command.name].includes(role.id)).size > 0;\n\t}\n\n\t/**\n\t * Return whether or not the user has one of the roles specified\n\t * in the command's requisite roles\n\t */\n\tprivate hasRoles(command: Command, message: Message, dm: boolean): boolean\n\t{\n\t\treturn dm\n\t\t\t|| command.roles.length === 0\n\t\t\t|| message.member!.roles.filter(role =>\n\t\t\t\tcommand.roles.includes(role.name)).size > 0;\n\t}\n\n\t/**\n\t * Return an error for unknown commands in DMs\n\t */\n\tprivate unknownCommandError(res: ResourceProxy): string\n\t{\n\t\treturn res.DISPATCHER_ERR_UNKNOWN_COMMAND();\n\t}\n\n\t/**\n\t * Return an error for guild only commands\n\t */\n\tprivate guildOnlyError(res: ResourceProxy): string\n\t{\n\t\treturn res.DISPATCHER_ERR_GUILD_ONLY();\n\t}\n\n\t/**\n\t * Return an error for missing caller permissions\n\t */\n\tprivate missingClientPermissionsError(res: ResourceProxy, missing: PermissionResolvable[]): string\n\t{\n\t\treturn res.DISPATCHER_ERR_MISSING_CLIENT_PERMISSIONS({ missing: missing.join(', ') });\n\t}\n\n\t/**\n\t * Return an error for missing caller permissions\n\t */\n\tprivate missingCallerPermissionsError(res: ResourceProxy, missing: PermissionResolvable[]): string\n\t{\n\t\treturn res.DISPATCHER_ERR_MISSING_CALLER_PERMISSIONS({ missing: missing.join(', ') });\n\t}\n\n\t/**\n\t * Return an error for failing a command limiter\n\t */\n\tprivate async failedLimiterError(res: ResourceProxy, command: Command, message: Message): Promise<string>\n\t{\n\t\tconst storage: GuildStorage = this._client.storage.guilds.get(message.guild.id)!;\n\t\tconst limitedCommands: { [name: string]: string[] } = await storage.settings.get('limitedCommands');\n\t\tconst roles: string[] = message.guild.roles\n\t\t\t.filter(r => limitedCommands[command.name].includes(r.id))\n\t\t\t.map(r => r.name);\n\n\t\treturn res.DISPATCHER_ERR_MISSING_ROLES({ roles: roles.join(', ')});\n\t}\n\n\t/**\n\t * Return an error for missing roles\n\t */\n\tprivate missingRolesError(res: ResourceProxy, command: Command): string\n\t{\n\t\treturn res.DISPATCHER_ERR_MISSING_ROLES({ roles: command.roles.join(', ') });\n\t}\n}\n"],"sourceRoot":"../../src"}