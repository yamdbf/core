{"version":3,"sources":["command/middleware/Expect.ts"],"names":[],"mappings":"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","file":"Expect.js","sourcesContent":["import { MiddlewareFunction } from '../../types/MiddlewareFunction';\nimport { Message } from '../../types/Message';\nimport { Command } from '../Command';\nimport { Lang } from '../../localization/Lang';\nimport { Util } from '../../util/Util';\nimport { MappedArgType } from './Resolve';\nimport { Resolver } from '../resolvers/Resolver';\nimport { ResourceProxy } from '../../types/ResourceProxy';\nimport { BaseStrings as s } from '../../localization/BaseStrings';\n\nexport function expect(argTypes: string | MappedArgType): MiddlewareFunction\n{\n\tif (typeof argTypes === 'string') argTypes = Util.parseArgTypes(argTypes);\n\n\tconst names: string[] = Object.keys(argTypes);\n\tconst types: (string | string[])[] = names\n\t\t.map(name => (argTypes as MappedArgType)[name]);\n\n\treturn async function(this: Command, message: Message, args: any[]): Promise<[Message, any[]]>\n\t{\n\t\tconst dm: boolean = message.channel.type !== 'text';\n\t\tconst lang: string = dm\n\t\t\t? this.client.defaultLang\n\t\t\t: await message.guild.storage!.settings.get('lang')\n\t\t\t\t|| this.client.defaultLang;\n\n\t\tconst res: ResourceProxy = Lang.createResourceProxy(lang);\n\t\tconst prefix: string = !dm ? await message.guild.storage!.settings.get('prefix') : '';\n\t\tconst usage: string = Lang.getCommandInfo(this, lang).usage!.replace(/<prefix>/g, prefix);\n\n\t\tfor (const [index, name] of names.entries())\n\t\t{\n\t\t\tconst arg: any = args[index];\n\t\t\tconst type: string | string[] = types[index];\n\n\t\t\tif (typeof arg === 'undefined' || arg === null)\n\t\t\t\tthrow new Error(res.EXPECT_ERR_MISSING_VALUE({\n\t\t\t\t\ttype: type instanceof Array ? type.map(t => `\\`${t}\\``).join(', ') : `\\`${type}\\``,\n\t\t\t\t\tname,\n\t\t\t\t\tusage\n\t\t\t\t}));\n\n\t\t\tif (type === 'Any') continue;\n\n\t\t\tif (type instanceof Array)\n\t\t\t{\n\t\t\t\tif (!type.map(a => a.toLowerCase()).includes(arg.toLowerCase()))\n\t\t\t\t\tthrow new Error(res.EXPECT_ERR_INVALID_OPTION({\n\t\t\t\t\t\ttype: type.map(t => `\\`${t}\\``).join(', '),\n\t\t\t\t\t\tname,\n\t\t\t\t\t\targ,\n\t\t\t\t\t\tusage\n\t\t\t\t\t}));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst resolver: Resolver = this.client.resolvers.get(type);\n\t\t\tif (!resolver)\n\t\t\t\tthrow new Error(`in arg \\`${name}\\`: Type \\`${type}\\` is not a valid argument type.`);\n\n\t\t\tif (!(await resolver.validate(arg)))\n\t\t\t\tthrow new Error(Lang.res('en_us', s.EXPECT_ERR_EXPECTED_TYPE,\n\t\t\t\t\t{ name, expected: type, type: arg === 'Infinity' ? arg : arg.constructor.name }));\n\t\t}\n\n\t\treturn [message, args];\n\t};\n}\n"],"sourceRoot":"../../../src"}