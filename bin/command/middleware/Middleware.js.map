{"version":3,"sources":["command/middleware/Middleware.ts"],"names":[],"mappings":";;AACA,uCAAmD;AACnD,qCAAkC;AAClC,yCAAsC;AACtC,qDAAkD;AAElD;;;GAGG;AACH,MAAa,UAAU;;AAAvB,gCA2GC;AAzGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AACW,kBAAO,GAA6D,iBAAO,CAAC;AAE1F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCG;AACW,iBAAM,GAA6D,eAAM,CAAC;AAExF;;;;;;;;;;;;;;;;;;;;GAoBG;AACW,mBAAQ,GAAuB,mBAAQ,CAAC;AAEtD;;;;;;;;;;;;;;GAcG;AACW,yBAAc,GAAuB,+BAAc,CAAC","file":"Middleware.js","sourcesContent":["import { MiddlewareFunction } from '../../types/MiddlewareFunction';\nimport { resolve, MappedArgType } from './Resolve';\nimport { expect } from './Expect';\nimport { localize } from './Localize';\nimport { localizeLoader } from './LocalizeLoader';\n\n/**\n * Contains static command middleware methods\n * @module Middleware\n */\nexport class Middleware\n{\n\t/**\n\t * Takes an object mapping argument names to {@link Resolver} type names\n\t * and resolves args to their specified type. An argument list string\n\t * can also be used -- See [Util.parseArgTypes]{@link module:Util.parseArgTypes}\n\t * for an example of how the list should be formatted\n\t *\n\t * See {@link BaseResolverType} for a list of base Resolver type names.\n\t *\n\t * Example:\n\t * ```\n\t * { '<mem>': 'Member', '<age>': 'Number', '<desc>': 'String' }\n\t * // or: 'mem: Member, age: Number, desc: String'\n\t *\n\t * // An array literal for expecting specific strings can also be used\n\t * { '<height>': ['short', 'medium', 'tall'] }\n\t * // or: `height: ['short', 'medium', 'tall']`\n\t * ```\n\t *\n\t * Supports `'...'` in the argument name as the final argument to gather\n\t * all remaining input into one string and attempt to resolve them to\n\t * the provided argument type\n\t * @static\n\t * @method resolve\n\t * @param {object|string} argTypes An object of argument names mapped to Resolver type names\n\t * \t\t\t\t\t\t\t\t   or a TypeScript-style argument list string<br>\n\t * \t\t\t\t\t\t\t\t   See: {@link BaseResolverType}<br>\n\t * \t\t\t\t\t\t\t\t   See: [Util.parseArgTypes]{@link module:Util.parseArgTypes}\n\t * @returns {MiddlewareFunction}\n\t */\n\tpublic static resolve: (argTypes: string | MappedArgType) => MiddlewareFunction = resolve;\n\n\t/**\n\t * Takes an object mapping argument names to {@link Resolver} type names\n\t * and checks the types of passed arguments, ensuring required\n\t * arguments are present and valid. An argument list string\n\t * can also be used -- See [Util.parseArgTypes]{@link module:Util.parseArgTypes}\n\t * for an example of how the list string should be formatted\n\t *\n\t * Should be added to the command AFTER any and all middleware functions\n\t * that modify args in any way are added ([resolve]{@link module:Middleware.resolve},\n\t * for example), an exception being [localize]{@link module:Middleware.localize},\n\t * which should always come last.\n\t *\n\t * See {@link BaseResolverType} for a list of base Resolver type names.\n\t *\n\t * Examples:\n\t * ```\n\t * { '<mem>': 'Member', '<age>': 'Number', '<desc>': 'String' }\n\t * // or: 'mem: Member, age: Number, desc: String'\n\t *\n\t * // An array literal for expecting specific strings can also be used\n\t * { '<height>': ['short', 'medium', 'tall'] }\n\t * // or: `height: ['short', 'medium', 'tall']`\n\t * ```\n\t *\n\t * ***This middleware does not modify args in any way.***\n\t * @static\n\t * @method expect\n\t * @param {object|string} argTypes An object of argument names mapped to Resolver type names\n\t * \t\t\t\t\t\t\t\t   or a TypeScript-style argument list string<br>\n\t * \t\t\t\t\t\t\t\t   See: {@link BaseResolverType}<br>\n\t * \t\t\t\t\t\t\t\t   See: [Util.parseArgTypes]{@link module:Util.parseArgTypes}\n\t * @returns {MiddlewareFunction}\n\t */\n\tpublic static expect: (argTypes: string | MappedArgType) => MiddlewareFunction = expect;\n\n\t/**\n\t * Middleware function that inserts a {@link ResourceProxy} object for the\n\t * language that will be used for the command call as the first arg for that\n\t * command call.\n\t *\n\t * >**Note:** The original `localize` middleware that inserted {@link ResourceLoader}\n\t * functions into the command args has been moved to {@link module:Middleware.localizeLoader}\n\t * temporarily, but `ResourceLoader` functions themselves are deprecated\n\t * in favor of `ResourceProxy`. `ResourceLoader` and associated functionality\n\t * will be removed in a future release, only being left in despite the major\n\t * version bump of 4.0.0 to ease the transition\n\t *\n\t * >**Note:** This middleware should be used *after* any other middleware\n\t * like [expect]{@link module:Middleware.expect} or [resolve]{@link module:Middleware.resolve}\n\t * because those are based around user input whereas this should be handled\n\t * after user input related things as to not interfere with the other middleware\n\t * and their inputs\n\t * @static\n\t * @method localize\n\t * @returns {MiddlewareFunction}\n\t */\n\tpublic static localize: MiddlewareFunction = localize;\n\n\t/**\n\t * Middleware function that inserts a {@link ResourceLoader} function for the\n\t * language that will be used for the command call as the first arg for that\n\t * command call.\n\t *\n\t * >**Note:** This middleware should be used *after* any other middleware\n\t * like [expect]{@link module:Middleware.expect} or [resolve]{@link module:Middleware.resolve}\n\t * because those are based around user input whereas this should be handled\n\t * after user input related things as to not interfere with the other middleware\n\t * and their inputs\n\t * @deprecated Use [localize]{@link module:Middleware.localize} instead.\n\t * @static\n\t * @method localizeLoader\n\t * @returns {MiddlewareFunction}\n\t */\n\tpublic static localizeLoader: MiddlewareFunction = localizeLoader;\n}\n"],"sourceRoot":"../../../src"}