{"version":3,"sources":["command/RateLimiter.ts"],"names":[],"mappings":";;;;;;;;AAAA,2CAA8C;AAC9C,2CAAwC;AAExC,uCAAoC;AACpC,+EAAmE;AAEnE;;;;;;GAMG;AAEH,IAAa,WAAW,GAAxB;IAOC,YAAmB,KAAa,EAAE,MAAe;QAEhD,IAAI,CAAC,MAAM,GAAG,WAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QACzC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QAEtB,IAAI,CAAC,WAAW,GAAG,IAAI,uBAAU,EAAyC,CAAC;QAC3E,IAAI,CAAC,aAAa,GAAG,IAAI,uBAAU,EAAqB,CAAC;IAC1D,CAAC;IAED;;;;;;;;OAQG;IACI,GAAG,CAAC,OAAgB,EAAE,YAAmB;QAE/C,MAAM,IAAI,GAAS,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,MAAO,CAAC;QACjE,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAC3B;YACC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;gBACnC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,qBAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAC7D,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAE,CAAC;SACxC;aAED;YACC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;gBAC1C,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,uBAAU,EAAqB,CAAC,CAAC;YAE7E,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAE,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;gBACxD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAE,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,qBAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAElF,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAE,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAE,CAAC;SAC7D;IACF,CAAC;IAED;;;OAGG;IACK,SAAS,CAAC,OAAiB;QAElC,OAAO,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,KAAK,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;IACjF,CAAC;CACD,CAAA;AAtDY,WAAW;IADvB,0CAAe,CAAC,mEAAmE,CAAC;GACxE,WAAW,CAsDvB;AAtDY,kCAAW","file":"RateLimiter.js","sourcesContent":["import { Collection, User } from 'discord.js';\nimport { RateLimit } from './RateLimit';\nimport { Message } from '../types/Message';\nimport { Util } from '../util/Util';\nimport { deprecatedClass } from '../util/DeprecatedClassDecorator';\n\n/**\n * Handles assigning ratelimits to guildmembers and users\n * @deprecated Will be removed in a future release. Use {@link RateLimitManager} instead\n * @param {string} limit Ratelimit string matching the regex `\\d+\\/\\d+[s|m|h|d]`<br>\n * \t\t\t\t\t\t **Example:** `1/10m` to limit a command to one use per 10 minutes\n * @param {boolean} global Whether or not this RateLimiter handles global ratelimits\n */\n@deprecatedClass('Class `RateLimiter` is deprecated. Use `RateLimitManager` instead')\nexport class RateLimiter\n{\n\tprivate readonly _limit: [number, number];\n\tprivate readonly _global: boolean;\n\tprivate readonly _rateLimits: Collection<string, Collection<string, RateLimit>>;\n\tprivate readonly _globalLimits: Collection<string, RateLimit>;\n\n\tpublic constructor(limit: string, global: boolean)\n\t{\n\t\tthis._limit = Util.parseRateLimit(limit);\n\t\tthis._global = global;\n\n\t\tthis._rateLimits = new Collection<string, Collection<string, RateLimit>>();\n\t\tthis._globalLimits = new Collection<string, RateLimit>();\n\t}\n\n\t/**\n\t * Returns the RateLimit object for the message author if global\n\t * or message member if message is in a guild. If a userOverride\n\t * is given then the RateLimit or global RateLimit will be\n\t * retrieved for that user based on the message location\n\t * @param {external:Message} message Discord.js Message object\n\t * @param {external:User} userOverride User object to use in place of Message author\n\t * @returns {RateLimit}\n\t */\n\tpublic get(message: Message, userOverride?: User): RateLimit\n\t{\n\t\tconst user: User = userOverride ? userOverride : message.author!;\n\t\tif (this._isGlobal(message))\n\t\t{\n\t\t\tif (!this._globalLimits.has(user.id))\n\t\t\t\tthis._globalLimits.set(user.id, new RateLimit(this._limit));\n\t\t\treturn this._globalLimits.get(user.id)!;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!this._rateLimits.has(message.guild.id))\n\t\t\t\tthis._rateLimits.set(message.guild.id, new Collection<string, RateLimit>());\n\n\t\t\tif (!this._rateLimits.get(message.guild.id)!.has(user.id))\n\t\t\t\tthis._rateLimits.get(message.guild.id)!.set(user.id, new RateLimit(this._limit));\n\n\t\t\treturn this._rateLimits.get(message.guild.id)!.get(user.id)!;\n\t\t}\n\t}\n\n\t/**\n\t * Determine whether or not to use the global rate limit collection\n\t * @private\n\t */\n\tprivate _isGlobal(message?: Message): boolean\n\t{\n\t\treturn message ? message.channel.type !== 'text' || this._global : this._global;\n\t}\n}\n"],"sourceRoot":"../../src"}