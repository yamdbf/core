{"version":3,"sources":["command/Command.ts"],"names":[],"mappings":"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","file":"Command.js","sourcesContent":["import { PermissionResolvable, Permissions, MessageOptions } from 'discord.js';\nimport { Client } from '../client/Client';\nimport { MiddlewareFunction } from '../types/MiddlewareFunction';\nimport { CommandInfo } from '../types/CommandInfo';\nimport { ArgOpts } from '../types/ArgOpts';\nimport { Util } from '../util/Util';\nimport { Message } from '../types/Message';\nimport { CompactModeHelper } from './CompactModeHelper';\nimport { RespondOptions } from '../types/RespondOptions';\nimport { CommandLock } from './CommandLock';\n\n/**\n * Action to be executed when the command is called. The following parameters\n * are what command actions will be passed by the {@link CommandDispatcher} whenever\n * a command is called. Be sure to receive these in proper order when writing\n * new commands\n * @abstract\n * @method Command#action\n * @param {external:Message} message Discord.js message object\n * @param {any[]} args An array containing the args parsed from the command calling message.<br>\n * \t\t\t\t\t   Will contain strings unless middleware is used to transform the args\n * @returns {any}\n */\n\n/**\n * Command class to extend to create commands users can execute\n * @abstract\n * @param {CommandInfo} info - Object containing required command properties\n */\nexport abstract class Command<T extends Client = Client>\n{\n\tprivate _disabled!: boolean;\n\tprivate _ratelimit!: string;\n\n\tpublic client!: T;\n\tpublic name!: string;\n\tpublic desc!: string;\n\tpublic usage!: string;\n\tpublic info!: string;\n\tpublic group!: string;\n\tpublic aliases!: string[];\n\tpublic guildOnly!: boolean;\n\tpublic hidden!: boolean;\n\tpublic argOpts!: ArgOpts;\n\tpublic callerPermissions!: PermissionResolvable[];\n\tpublic clientPermissions!: PermissionResolvable[];\n\tpublic roles!: string[];\n\tpublic ownerOnly!: boolean;\n\tpublic external!: boolean;\n\tpublic lock!: CommandLock;\n\tpublic lockTimeout!: number;\n\n\t// Internals\n\tpublic readonly _middleware: MiddlewareFunction[];\n\tpublic _classloc!: string;\n\tpublic _initialized: boolean;\n\n\tpublic constructor(info?: CommandInfo)\n\t{\n\t\t/**\n\t\t * YAMDBF Client instance\n\t\t * @name Command#client\n\t\t * @type {Client}\n\t\t */\n\n\t\t/**\n\t\t * The name of the command, used by the dispatcher\n\t\t * to determine the command being executed\n\t\t * @name Command#name\n\t\t * @type {string}\n\t\t */\n\n\t\t/**\n\t\t * A brief description of the command, displayed\n\t\t * in the commands list via the Help command\n\t\t * @name Command#desc\n\t\t * @type {string}\n\t\t */\n\n\t\t/**\n\t\t * An example of command usage. The token `<prefix>` will\n\t\t * be replaced by the guild-specific command prefix in the Help command when\n\t\t * `help <command>` is called\n\t\t * @name Command#usage\n\t\t * @type {string}\n\t\t */\n\n\t\t/**\n\t\t * Extra information about the command to be displayed\n\t\t * by the Help command when `help <command>` is called\n\t\t * @name Command#info\n\t\t * @type {string}\n\t\t */\n\n\t\t/**\n\t\t * The command group that the command belongs to. Allows commands to be\n\t\t * grouped for disabling. The group 'base' cannot be disabled.\n\t\t * @name Command#group\n\t\t * @type {string}\n\t\t */\n\n\t\t/**\n\t\t * Aliases the command can be called by other than its name\n\t\t * @name Command#aliases\n\t\t * @type {string[]}\n\t\t */\n\n\t\t/**\n\t\t * Whether or not a command can only be used within a\n\t\t * guild text channel\n\t\t * @name Command#guildOnly\n\t\t * @type {boolean}\n\t\t */\n\n\t\t/**\n\t\t * Whether or not the command is to be hidden from the\n\t\t * commands list via the default help command\n\t\t * @name Command#hidden\n\t\t * @type {boolean}\n\t\t */\n\n\t\t/**\n\t\t * Options for how arguments should be parsed.<br>\n\t\t * **See:** {@link ArgOpts}\n\t\t * @name Command#argOpts\n\t\t * @type {ArgOpts}\n\t\t */\n\n\t\t/**\n\t\t * Array of permissions required by the command\n\t\t * caller to be able to execute the command in\n\t\t * the guild the command is called in.\n\t\t *\n\t\t * If any permissions are provided the command's `guildOnly`\n\t\t * property will be automatically overridden to true\n\t\t * @name Command#callerPermissions\n\t\t * @type {external:PermissionResolvable[]}\n\t\t */\n\n\t\t/**\n\t\t * Array of permissions required by the client\n\t\t * to be able to execute the command in the guild\n\t\t * the command is called in.\n\t\t *\n\t\t * If any permissions are provided the command's `guildOnly`\n\t\t * property will be automatically overridden to true\n\t\t * @name Command#clientPermissions\n\t\t * @type {external:PermissionResolvable[]}\n\t\t */\n\n\t\t/**\n\t\t * Array of specific {@link external:Role} names required to use the command.\n\t\t * If the command caller has any (even just one) of the roles in the array,\n\t\t * they will be able to use the command.\n\t\t *\n\t\t * If any roles are provided the command's `guildOnly` property will be\n\t\t * automatically set to `true`\n\t\t *\n\t\t * >**Note:** This is far inferior to {@link Command#callerPermissions},\n\t\t * using the base `limit` command's role-limiting system, or really even\n\t\t * a custom-engineered solution to control who can use a command. Forcing\n\t\t * servers to create Roles with specific names makes your bot that much\n\t\t * less configurable on a per-guild basis, and configurability is what\n\t\t * YAMDBF is all about. But, for the sake of simplicity, this is available\n\t\t * @name Command#roles\n\t\t * @type {string[]}\n\t\t */\n\n\t\t/**\n\t\t * Whether or not the command can be used only by the client/bot owner(s).<br>\n\t\t * **See:** [Client#config.owner]{@link Client#config}\n\t\t * @name Command#ownerOnly\n\t\t * @type {boolean}\n\t\t */\n\n\t\t/**\n\t\t * Whether or not this command was registered via {@link CommandRegistry#registerExternal}\n\t\t * by some means other than the command loader like a Plugin\n\t\t * @name Command#external\n\t\t * @type {boolean}\n\t\t */\n\n\t\t/**\n\t\t * The CommmandLock this command uses. Must be assigned manually if\n\t\t * locking functionality is desired\n\t\t * @name Command#lock\n\t\t * @type {CommandLock}\n\t\t */\n\n\t\t/**\n\t\t * Time until command locks will be cancelled if a command\n\t\t * does not finish in time\n\t\t * @name Command#lockTimeout\n\t\t * @type {number}\n\t\t */\n\n\t\t// Middleware function storage for the Command instance\n\t\tthis._middleware = [];\n\n\t\tthis._initialized = false;\n\n\t\tif (info) Object.assign(this, info);\n\t}\n\n\t// Docs above class\n\tpublic abstract action(message: Message, args: any[]): any;\n\n\t/**\n\t * The ratelimit for this command per user\n\t * @type {string}\n\t */\n\tpublic get ratelimit(): string { return this._ratelimit; }\n\tpublic set ratelimit(value: string)\n\t{\n\t\tUtil.parseRateLimit(value);\n\t\tthis._ratelimit = value;\n\t}\n\n\t/**\n\t * Can be included in a command to initlialize any resources a command\n\t * needs at runtime that require things that are not available within\n\t * a command's constructor like the client instance or client/guild storages.\n\t *\n\t * Will be called after all commands are loaded (including those from\n\t * any loaded plugins) and after all base framework storages (client and guild)\n\t * are ready for use.\n\t *\n\t * >**Note:** Can be async if needed\n\t * @abstract\n\t * @returns {Promise<void>}\n\t */\n\tpublic init(): void {}\n\n\t/**\n\t * Make necessary asserts for Command validity.\n\t * Called internally by the command loader\n\t * @private\n\t */\n\tpublic _register(client: T): void\n\t{\n\t\tthis.client = client;\n\n\t\t// Set defaults if not present\n\t\tif (typeof this.aliases === 'undefined') this.aliases = [];\n\t\tif (typeof this.group === 'undefined') this.group = 'base';\n\t\tif (typeof this.guildOnly === 'undefined') this.guildOnly = false;\n\t\tif (typeof this.hidden === 'undefined') this.hidden = false;\n\t\tif (typeof this.argOpts === 'undefined') this.argOpts = {};\n\t\tif (typeof this.argOpts.separator === 'undefined') this.argOpts.separator = ' ';\n\t\tif (typeof this.callerPermissions === 'undefined') this.callerPermissions = [];\n\t\tif (typeof this.clientPermissions === 'undefined') this.clientPermissions = [];\n\t\tif (typeof this.roles === 'undefined') this.roles = [];\n\t\tif (typeof this.ownerOnly === 'undefined') this.ownerOnly = false;\n\t\tif (typeof this.external === 'undefined') this.external = false;\n\t\tif (typeof this._disabled === 'undefined') this._disabled = false;\n\t\tif (typeof this._classloc === 'undefined') this._classloc = '<External Command>';\n\t\tif (typeof this.lockTimeout === 'undefined') this.lockTimeout = 30e3;\n\n\t\t// Make necessary asserts\n\t\tif (!this.name) throw new Error(`A command is missing a name:\\n${this._classloc}`);\n\t\tif (!this.desc) throw new Error(`A description must be provided for Command: ${this.name}`);\n\t\tif (!this.usage) throw new Error(`Usage information must be provided for Command: ${this.name}`);\n\t\tif (this.aliases && !Array.isArray(this.aliases))\n\t\t\tthrow new TypeError(`Aliases for Command \"${this.name}\" must be an array of alias strings`);\n\n\t\tif (this.callerPermissions && !Array.isArray(this.callerPermissions))\n\t\t\tthrow new TypeError(`\\`callerPermissions\\` for Command \"${this.name}\" must be an array`);\n\n\t\tif (this.clientPermissions && !Array.isArray(this.clientPermissions))\n\t\t\tthrow new TypeError(`\\`clientPermissions\\` for Command \"${this.name}\" must be an array`);\n\n\t\tif (this.callerPermissions && this.callerPermissions.length)\n\t\t\tthis._validatePermissions('callerPermissions', this.callerPermissions);\n\n\t\tif (this.clientPermissions && this.clientPermissions.length)\n\t\t\tthis._validatePermissions('clientPermissions', this.clientPermissions);\n\n\t\tif (this.roles && !Array.isArray(this.roles))\n\t\t\tthrow new TypeError(`\\`roles\\` for Command \"${this.name}\" must be an array`);\n\n\t\tif (typeof this.lockTimeout !== 'undefined' && typeof this.lockTimeout !== 'number')\n\t\t\tthrow new TypeError(`\\`lockTimeout\\` for Command \"${this.name}\" must be a number`);\n\n\t\tif (!this.action || !(this.action instanceof Function))\n\t\t\tthrow new TypeError(`Command \"${this.name}\".action: expected Function, got: ${typeof this.action}`);\n\n\t\t// Default guildOnly to true if permissions/roles are given\n\t\tif (!this.guildOnly\n\t\t\t&& (this.callerPermissions.length\n\t\t\t\t|| this.clientPermissions.length\n\t\t\t\t|| this.roles.length))\n\t\t\tthis.guildOnly = true;\n\n\t\tif (typeof this.lock !== 'undefined' && !this.guildOnly)\n\t\t\tthrow new Error(`Command \"${this.name} has a defined lock but is not guildOnly`);\n\t}\n\n\t/**\n\t * Whether or not this command is disabled\n\t * @type {boolean}\n\t */\n\tpublic get disabled(): boolean\n\t{\n\t\treturn this._disabled;\n\t}\n\n\t/**\n\t * Enable this command if it is disabled\n\t * @returns {void}\n\t */\n\tpublic enable(): void\n\t{\n\t\tthis._disabled = false;\n\t}\n\n\t/**\n\t * Disable this command if it is enabled\n\t * @returns {void}\n\t */\n\tpublic disable(): void\n\t{\n\t\tthis._disabled = true;\n\t}\n\n\t/**\n\t * Adds a middleware function to be used when the command is called\n\t * to make modifications to args, determine if the command can\n\t * be run, or anything else you want to do whenever this command\n\t * is called.\n\t *\n\t * See {@link MiddlewareFunction} for information on how a middleware\n\t * function should be represented\n\t *\n\t * Usage example:\n\t * ```\n\t * <Client>.use((message, args) => [message, args.map(a => a.toUpperCase())]);\n\t * ```\n\t * This will add a middleware function to this command that will attempt\n\t * to transform all args to uppercase. This will of course fail if any\n\t * of the args are not a string.\n\t *\n\t * >**Note:** Middleware functions should only be added to a command one\n\t * time each and thus should not be added within any sort of event or loop.\n\t * Multiple separate middleware functions can be added to the via multiple\n\t * separate calls to this method\n\t * @param {MiddlewareFunction} func The middleware function to use\n\t * @returns {Command}\n\t */\n\tpublic use(func: MiddlewareFunction): this\n\t{\n\t\tthis._middleware.push(func);\n\t\treturn this;\n\t}\n\n\tprotected async respond(message: Message, response: string, options?: MessageOptions): Promise<Message | Message[]>;\n\tprotected async respond(message: Message, response: string, options?: RespondOptions): Promise<void>;\n\t/**\n\t * Send provided response to the provided message's channel,\n\t * leveraging compact mode mechanics if enabled\n\t * @protected\n\t * @param {external:Message} message Discord.js Message object\n\t * @param {string} response String to send\n\t * @param {RespondOptions} [options] Optional options for the response\n\t * @returns {Promise<external:Message | external:Message[] | undefined>}\n\t */\n\tprotected async respond(...args: any[]): Promise<any>\n\t{\n\t\tconst [message, response, options]: [Message, string, RespondOptions] = args as any;\n\n\t\tif (typeof options !== 'undefined'\n\t\t\t&& typeof options.button !== 'undefined'\n\t\t\t&& (await message.guild.storage!.settings.get('compact') || this.client.compact))\n\t\t{\n\t\t\tif (message.reactions.size > 0) await message.reactions.removeAll();\n\t\t\tCompactModeHelper.registerButton(\n\t\t\t\tmessage,\n\t\t\t\tthis.client.buttons[options.button] || options.button,\n\t\t\t\t() => message.channel.send(response, options));\n\t\t\treturn;\n\t\t}\n\n\t\treturn message.channel.send(response, options);\n\t}\n\n\t/**\n\t * Validate PermissionResolvables in the given array, throwing an error\n\t * for any that are invalid\n\t * @private\n\t */\n\tprivate _validatePermissions(field: string, perms: PermissionResolvable[]): void\n\t{\n\t\tlet errString: (i: number, err: any) => string = (i, err) =>\n\t\t\t`Command \"${this.name}\" permission \"${perms[i]}\" in ${field}[${i}] is not a valid permission.\\n\\n${err}`;\n\n\t\tfor (const [index, perm] of perms.entries())\n\t\t\ttry { Permissions.resolve(perm); }\n\t\t\tcatch (err) { throw new TypeError(errString(index, err)); }\n\t}\n}\n"],"sourceRoot":"../../src"}