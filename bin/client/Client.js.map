{"version":3,"sources":["client/Client.ts"],"names":[],"mappings":"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","file":"Client.js","sourcesContent":["import 'reflect-metadata';\nimport * as Discord from 'discord.js';\nimport * as path from 'path';\n\nimport {\n\tChannel,\n\tClientOptions,\n\tClientApplication,\n\tCollection,\n\tGuild,\n\tGuildMember,\n\tMessage,\n\tMessageReaction,\n\tRole,\n\tUser,\n\tSnowflake,\n\tGuildEmoji,\n\tRateLimitData,\n\tTextChannel,\n\tVoiceState,\n\tPresence,\n\tSpeaking,\n\tPermissionResolvable\n} from 'discord.js';\n\nimport { Command } from '../command/Command';\nimport { CommandDispatcher } from '../command/CommandDispatcher';\nimport { CommandLoader } from '../command/CommandLoader';\nimport { CommandRegistry } from '../command/CommandRegistry';\nimport { ResolverLoader } from '../command/resolvers/ResolverLoader';\nimport { RateLimitManager } from '../command/RateLimitManager';\nimport { JSONProvider } from '../storage/JSONProvider';\nimport { ClientStorage } from '../storage/ClientStorage';\nimport { GuildStorageLoader } from '../storage/GuildStorageLoader';\nimport { StorageProviderConstructor } from '../types/StorageProviderConstructor';\nimport { YAMDBFOptions } from '../types/YAMDBFOptions';\nimport { MiddlewareFunction } from '../types/MiddlewareFunction';\nimport { BaseCommandName } from '../types/BaseCommandName';\nimport { Logger, logger } from '../util/logger/Logger';\nimport { ListenerUtil } from '../util/ListenerUtil';\nimport { Lang } from '../localization/Lang';\nimport { PluginLoader } from './PluginLoader';\nimport { PluginConstructor } from '../types/PluginConstructor';\nimport { ResolverConstructor } from '../types/ResolverConstructor';\nimport { Util } from '../util/Util';\nimport { Time } from '../util/Time';\nimport { GuildStorage } from '../storage/GuildStorage';\nimport { Message as YAMDBFMessage } from '../types/Message';\nimport { CompactModeHelper } from '../command/CompactModeHelper';\nimport { EventLoader } from '../event/EventLoader';\n\nconst { on, once, registerListeners } = ListenerUtil;\n\n/**\n * The YAMDBF Client through which you can access [storage]{@link Client#storage}\n * and any of the properties available on a typical Discord.js Client instance\n * @extends {external:Client}\n * @param {YAMDBFOptions} options Object containing required client properties\n * @param {external:ClientOptions} [clientOptions] Discord.js ClientOptions\n */\nexport class Client extends Discord.Client\n{\n\t@logger('Client')\n\tprivate readonly _logger!: Logger;\n\tprivate readonly _token: string;\n\tprivate readonly _plugins: (PluginConstructor | string)[];\n\tprivate readonly _guildStorageLoader: GuildStorageLoader;\n\tprivate readonly _commandLoader!: CommandLoader;\n\tprivate readonly _dispatcher!: CommandDispatcher;\n\tprivate _ratelimit!: string;\n\n\tpublic readonly commandsDir: string | null;\n\tpublic readonly eventsDir: string | null;\n\tpublic readonly localeDir: string | null;\n\tpublic readonly owner: string[];\n\tpublic readonly defaultLang: string;\n\tpublic readonly statusText: string | null;\n\tpublic readonly readyText: string;\n\tpublic readonly unknownCommandError: boolean;\n\tpublic readonly dmHelp: boolean;\n\tpublic readonly passive: boolean;\n\tpublic readonly pause: boolean;\n\tpublic readonly disableBase: BaseCommandName[];\n\tpublic readonly provider: StorageProviderConstructor;\n\tpublic readonly plugins: PluginLoader;\n\tpublic readonly storage: ClientStorage;\n\tpublic readonly commands: CommandRegistry<this>;\n\tpublic readonly rateLimitManager: RateLimitManager;\n\tpublic readonly eventLoader!: EventLoader;\n\tpublic readonly resolvers: ResolverLoader;\n\tpublic readonly argsParser: (input: string, command?: Command, message?: YAMDBFMessage) => string[];\n\tpublic readonly buttons: { [key: string]: string };\n\tpublic readonly compact: boolean;\n\tpublic readonly tsNode: boolean;\n\n\t// Internals\n\tpublic readonly _middleware: MiddlewareFunction[];\n\tpublic readonly _customResolvers: ResolverConstructor[];\n\n\tpublic constructor(options: YAMDBFOptions, clientOptions?: ClientOptions)\n\t{\n\t\tsuper(clientOptions);\n\t\tReflect.defineMetadata('YAMDBFClient', true, this);\n\n\t\t// Hook logger to provide shard ID(s) in base transport logs\n\t\tif (this.shard) Logger._shard = this.shard.ids.join('-');\n\n\t\tthis._token = options.token!;\n\n\t\t/**\n\t\t * The owner/owners of the bot, represented as an array of IDs.\n\t\t * These IDs determine who is allowed to use commands flagged as\n\t\t * `ownerOnly`\n\t\t * @type {string[]}\n\t\t */\n\t\tthis.owner = typeof options.owner !== 'undefined'\n\t\t\t? options.owner instanceof Array\n\t\t\t\t? options.owner\n\t\t\t\t: [options.owner]\n\t\t\t: [];\n\n\t\t/**\n\t\t * Directory to find command class files. Optional\n\t\t * if client is passive.<br>\n\t\t * **See:** {@link Client#passive}\n\t\t * @type {string}\n\t\t */\n\t\tthis.commandsDir = options.commandsDir ? path.resolve(options.commandsDir!) : null;\n\n\t\t/**\n\t\t * Directory to find Event class files. Optional\n\t\t * if client is passive.<br>\n\t\t * **See:** {@link Client#passive}\n\t\t * @type {string}\n\t\t */\n\t\tthis.eventsDir = options.eventsDir ? path.resolve(options.eventsDir!) : null;\n\n\t\t/**\n\t\t * Directory to find custom localization files\n\t\t * @type {string}\n\t\t */\n\t\tthis.localeDir = options.localeDir ? path.resolve(options.localeDir) : null;\n\n\t\t/**\n\t\t * Default language to use for localization\n\t\t * @type {string}\n\t\t */\n\t\tthis.defaultLang = options.defaultLang || 'en_us';\n\n\t\t/**\n\t\t * Status text for the client\n\t\t * @type {string}\n\t\t */\n\t\tthis.statusText = options.statusText || null;\n\n\t\t/**\n\t\t * Text to output when the client is ready. If not\n\t\t * provided nothing will be logged, giving the\n\t\t * opportunity to log something more dynamic\n\t\t * on `clientReady`\n\t\t * @type {string}\n\t\t */\n\t\tthis.readyText = options.readyText!;\n\n\t\t/**\n\t\t * Whether or not a generic 'command not found' message\n\t\t * should be given in DMs to instruct the user to\n\t\t * use the `help` command. `true` by default\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.unknownCommandError = typeof options.unknownCommandError !== 'undefined'\n\t\t\t? options.unknownCommandError\n\t\t\t: true;\n\n\t\t/**\n\t\t * Whether or not the help command should send its output\n\t\t * in a DM to the command caller\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.dmHelp = typeof options.dmHelp !== 'undefined'\n\t\t\t? options.dmHelp\n\t\t\t: true;\n\n\t\t/**\n\t\t * Whether or not this client is passive. Passive clients\n\t\t * will not register a command dispatcher or a message\n\t\t * listener. This allows passive clients to be created that\n\t\t * do not respond to any commands but are able to perform\n\t\t * actions based on whatever the framework user wants\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.passive = options.passive || false;\n\n\t\t/**\n\t\t * Whether or not the client will pause after loading Client\n\t\t * Storage, giving the opportunity to add/change default\n\t\t * settings before guild settings are created for the first\n\t\t * time. If this is used, you must create a listener for `'pause'`,\n\t\t * and call `<Client>.continue()` when you have finished doing\n\t\t * what you need to do.\n\t\t *\n\t\t * If adding new default settings is desired *after* guild settings\n\t\t * have already been generated for the first time, they should be\n\t\t * added after `'clientReady'` so they can be properly pushed to\n\t\t * the settings for all guilds\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.pause = options.pause || false;\n\n\t\t/**\n\t\t * Array of base command names to skip when loading commands. Base commands\n\t\t * may only be disabled by name, not by alias\n\t\t * @type {BaseCommandName[]}\n\t\t */\n\t\tthis.disableBase = options.disableBase || [];\n\n\t\t// Set the global ratelimit if provided\n\t\tif (options.ratelimit) this.ratelimit = options.ratelimit;\n\n\t\t/**\n\t\t * A convenient instance of {@link RateLimitManager} for use anywhere\n\t\t * the Client is available\n\t\t * @type {RateLimitManager}\n\t\t */\n\t\tthis.rateLimitManager = new RateLimitManager();\n\n\t\t/**\n\t\t * The EventLoader the client uses to load events. The client will load events\n\t\t * from the `eventsdir` directory passed in your `YAMDBFOptions`.\n\t\t *\n\t\t * Can be used by plugins to register directories to load custom event handlers from\n\t\t * @type {EventLoader}\n\t\t */\n\t\tthis.eventLoader = new EventLoader(this);\n\n\t\t// Set the logger level if provided\n\t\tif (typeof options.logLevel !== 'undefined')\n\t\t\tthis._logger.setLogLevel(options.logLevel);\n\n\t\t/**\n\t\t * The chosen storage provider to use for the Client.\n\t\t * Defaults to {@link JSONProvider}\n\t\t * @type {StorageProvider}\n\t\t */\n\t\tthis.provider = options.provider || JSONProvider;\n\n\t\t// Plugins to load\n\t\tthis._plugins = options.plugins || [];\n\n\t\t/**\n\t\t * Loads plugins and contains loaded plugins in case\n\t\t * accessing a loaded plugin at runtime is desired\n\t\t * @type {PluginLoader}\n\t\t */\n\t\tthis.plugins = new PluginLoader(this, this._plugins);\n\n\t\t// Middleware function storage for the client instance\n\t\tthis._middleware = [];\n\n\t\t/**\n\t\t * Client-specific storage. Also contains a `guilds` Collection property containing\n\t\t * all GuildStorage instances\n\t\t * @type {ClientStorage}\n\t\t */\n\t\tthis.storage = new ClientStorage(this);\n\n\t\tthis._guildStorageLoader = new GuildStorageLoader(this);\n\n\t\t/**\n\t\t * [Collection]{@link external:Collection} containing all loaded commands\n\t\t * @type {CommandRegistry<string, Command>}\n\t\t */\n\t\tthis.commands = new CommandRegistry<this, string, Command<this>>(this);\n\n\t\t/**\n\t\t * ResolverLoader instance containing loaded argument resolvers\n\t\t * @type {ResolverLoader}\n\t\t */\n\t\tthis.resolvers = new ResolverLoader(this);\n\t\tthis._customResolvers = options.customResolvers || [];\n\t\tthis.resolvers._loadResolvers();\n\n\t\t/**\n\t\t * Whether or not compact mode is enabled\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.compact = typeof options.compact !== 'undefined'\n\t\t\t? options.compact\n\t\t\t: false;\n\n\t\t/**\n\t\t * Button shortcuts for compact mode. Defaults are\n\t\t * `success`, `fail`, and `working`. These can be overwritten\n\t\t * via the `buttons` field in {@link YAMDBFOptions}\n\t\t * @type {object}\n\t\t */\n\t\tthis.buttons = Object.assign({}, {\n\t\t\tsuccess: '✅',\n\t\t\tfail: '❌',\n\t\t\tworking: '🕐'\n\t\t}, options.buttons || {});\n\n\t\t/**\n\t\t * The argument parsing function the framework will use to parse\n\t\t * command arguments from message content input. Defaults to\n\t\t * splitting on {@link Command#argOpts.separator}\n\t\t * @type {Function}\n\t\t */\n\t\tthis.argsParser = options.argsParser || Util.parseArgs;\n\n\t\t/**\n\t\t * Whether or not ts-node is in use, allowing the Client\n\t\t * to attempt to load .ts files when loading Commands\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.tsNode = options.tsNode || false;\n\n\t\tLang.createInstance(this);\n\t\tLang.loadLocalizations();\n\n\t\tCompactModeHelper.createInstance(this);\n\n\t\tif (!this.passive)\n\t\t{\n\t\t\tthis._commandLoader = new CommandLoader(this);\n\t\t\tthis._dispatcher = new CommandDispatcher(this);\n\n\t\t\tif (this.eventsDir)\n\t\t\t\tthis.eventLoader.addSourceDir(this.eventsDir);\n\n\t\t\tthis._logger.info('Loading base commands...');\n\t\t\tthis._commandLoader.loadCommandsFrom(path.join(__dirname, '../command/base'), true);\n\n\t\t\t// Disable setlang command if there is only one language\n\t\t\tif (Lang.langNames.length === 1\n\t\t\t\t&& !this.disableBase.includes('setlang')\n\t\t\t\t&& this.commands.has('setlang'))\n\t\t\t\tthis.commands.get('setlang')!.disable();\n\t\t}\n\n\t\tregisterListeners(this);\n\t}\n\n//#region Event handlers\n\n\t@once('ready')\n\t// @ts-ignore - Handled via ListenerUtil\n\tprivate async __onReadyEvent(): Promise<void>\n\t{\n\t\t// Set default owner (OAuth Application owner) if none exists\n\t\tif (this.owner.length < 1)\n\t\t{\n\t\t\tconst app: ClientApplication = await this.fetchApplication();\n\t\t\tif (typeof app.owner !== 'undefined')\n\t\t\t\tthis.owner[0] = app.owner!.id;\n\t\t}\n\n\t\tawait this.storage.init();\n\n\t\t// Load defaultGuildSettings into storage the first time the client is run\n\t\tif (!await this.storage.exists('defaultGuildSettings'))\n\t\t\tawait this.storage.set('defaultGuildSettings',\n\t\t\t\trequire('../storage/defaultGuildSettings.json'));\n\n\t\tif (this.pause) this.emit('pause');\n\t\telse this.__onContinueEvent();\n\n\t\tif (this.statusText)\n\t\t\tthis.user!.setActivity(this.statusText);\n\t}\n\n\t@once('continue')\n\tprivate async __onContinueEvent(): Promise<void>\n\t{\n\t\tawait this._guildStorageLoader.init();\n\t\tawait this._guildStorageLoader.loadStorages();\n\t\tawait this._guildStorageLoader.cleanGuilds();\n\n\t\tthis._logger.info('Loading plugins...');\n\t\tawait this.plugins._loadPlugins();\n\n\t\tif (!this.passive)\n\t\t{\n\t\t\tif (this.commandsDir)\n\t\t\t{\n\t\t\t\tthis._logger.info('Loading custom commands...');\n\t\t\t\tthis._commandLoader.loadCommandsFrom(this.commandsDir);\n\t\t\t}\n\n\t\t\tthis.commands._checkDuplicateAliases();\n\t\t\tthis.commands._checkReservedCommandNames();\n\n\t\t\tthis._logger.info('Initializing commands...');\n\t\t\tconst initSuccess: boolean = await this.commands._initCommands();\n\t\t\tthis._logger.info(`Commands initialized${initSuccess ? '' : ' with errors'}.`);\n\n\t\t\tLang.loadCommandLocalizations();\n\n\t\t\tthis._dispatcher.setReady();\n\t\t\tconst commands: number = this.commands.size;\n\t\t\tconst groups: number = this.commands.groups.length;\n\t\t\tthis._logger.info(\n\t\t\t\t`Command dispatcher ready -- ${commands} commands in ${groups} groups` );\n\n\t\t\tif (this.eventLoader.hasSources())\n\t\t\t{\n\t\t\t\tthis._logger.info('Loading events from registered sources...');\n\t\t\t\tthis.eventLoader.loadFromSources();\n\t\t\t}\n\t\t}\n\n\t\tif (typeof this.readyText !== 'undefined')\n\t\t\tthis._logger.log(this.readyText);\n\n\t\tthis.emit('clientReady');\n\n\t\tif (!this.user!.bot)\n\t\t\tthis._logger.warn([\n\t\t\t\t'Userbots are no longer supported and no precautions are',\n\t\t\t\t'taken to protect your account from accidentally abusing',\n\t\t\t\t'the Discord API. Creating a userbot is NOT recommended.'\n\t\t\t].join(' '));\n\t}\n\n\t@on('guildCreate')\n\t// @ts-ignore - Handled via ListenerUtil\n\tprivate async __onGuildCreateEvent(guild: Guild): Promise<void>\n\t{\n\t\tif (this.storage.guilds.has(guild.id))\n\t\t{\n\t\t\t// Handle guild returning to the same shard in the same session\n\t\t\tconst storage: GuildStorage = this.storage.guilds.get(guild.id)!;\n\t\t\tif (await storage.settings.exists('YAMDBFInternal.remove'))\n\t\t\t\tawait storage.settings.remove('YAMDBFInternal.remove');\n\t\t}\n\t\telse await this._guildStorageLoader.loadStorages();\n\t}\n\n\t@on('guildDelete')\n\t// @ts-ignore - Handled via ListenerUtil\n\tprivate __onGuildDeleteEvent(guild: Guild): void\n\t{\n\t\tif (this.storage.guilds.has(guild.id))\n\t\t\tthis.storage.guilds.get(guild.id)!.settings.set(\n\t\t\t\t'YAMDBFInternal.remove', Date.now() + Time.parseShorthand('7d')!);\n\t}\n\n//#endregion\n\n//#region Getters/Setters\n\n\t/**\n\t * The global ratelimit for all command usage per user\n\t * @type {string}\n\t */\n\tpublic get ratelimit(): string { return this._ratelimit; }\n\tpublic set ratelimit(value: string)\n\t{\n\t\tUtil.parseRateLimit(value);\n\t\tthis._ratelimit = value;\n\t}\n\n//#endregion\n\n\t/**\n\t * Starts the login process, culminating in the `clientReady` event\n\t * @returns {Client}\n\t */\n\tpublic start(): this\n\t{\n\t\tif (!this._token)\n\t\t\tthrow new Error('Client cannot be started without being given a token.');\n\n\t\tthis.login(this._token);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Shortcut method for `<Client>.emit('continue')`\n\t * @returns {void}\n\t */\n\tprotected continue(): void\n\t{\n\t\tthis.emit('continue');\n\t}\n\n\t/**\n\t * Returns whether or not the given user is an owner\n\t * of the client/bot\n\t * @param {external:User} user User to check\n\t * @returns {boolean}\n\t */\n\tpublic isOwner(user: User): boolean\n\t{\n\t\treturn this.owner.includes(user.id);\n\t}\n\n\t/**\n\t * Set the value of a default setting key and push it to all guild\n\t * setting storages. Will not overwrite a setting in guild settings\n\t * storage if there is already an existing key with the given value\n\t * @param {string} key The key to use in settings storage\n\t * @param {any} value The value to use in settings storage\n\t * @returns {Promise<Client>}\n\t */\n\tpublic async setDefaultSetting(key: string, value: any): Promise<this>\n\t{\n\t\tawait this.storage.set(`defaultGuildSettings.${key}`, value);\n\t\tfor (const guildStorage of this.storage.guilds.values())\n\t\t\tif (!await guildStorage.settings.exists(key))\n\t\t\t\tawait guildStorage.settings.set(key, value);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove a `defaultGuildSettings` item. Will not remove from any current\n\t * guild settings, but will remove the item from the defaults added to\n\t * new guild settings storages upon creation\n\t * @param {string} key The key to use in settings storage\n\t * @returns {Promise<Client>}\n\t */\n\tpublic async removeDefaultSetting(key: string): Promise<this>\n\t{\n\t\tawait this.storage.remove(`defaultGuildSettings.${key}`);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Check if a default guild setting exists\n\t * @param {string} key The default settings key to check for\n\t * @returns {Promise<boolean>}\n\t */\n\tpublic defaultSettingExists(key: string): Promise<boolean>\n\t{\n\t\treturn this.storage.exists(`defaultGuildSettings.${key}`);\n\t}\n\n\t/**\n\t * Shortcut to return the command prefix for the provided guild\n\t * @param {external:Guild} guild The Guild to get the prefix of\n\t * @returns {Promise<string | null>}\n\t */\n\tpublic async getPrefix(guild: Guild): Promise<string | null>\n\t{\n\t\tif (!guild || !this.storage.guilds.has(guild.id)) return null;\n\t\treturn (await this.storage.guilds.get(guild.id)!.settings.get('prefix')) || null;\n\t}\n\n\t/**\n\t * Generate a bot invite URL based on the permissions included\n\t * in all of the commands the client currently has loaded.\n\t *\n\t * >**Note:** This should be run after `clientReady` to ensure\n\t * no command permissions are missing from the permissions set\n\t * that will be used to generate the URL\n\t * @returns {Promise<string>}\n\t */\n\tpublic createBotInvite(): Promise<string>\n\t{\n\t\tconst perms: Set<PermissionResolvable> = new Set();\n\t\tfor (const command of this.commands.values())\n\t\t\tfor (const perm of command.clientPermissions)\n\t\t\t\tperms.add(perm);\n\n\t\treturn this.generateInvite(Array.from(perms));\n\t}\n\n\t/**\n\t * Clean out expired guild storage/settings\n\t * @returns {Promise<void>}\n\t */\n\tpublic async sweepStorages(): Promise<void>\n\t{\n\t\tawait this._guildStorageLoader.cleanGuilds();\n\t}\n\n\t/**\n\t * Adds a middleware function to be used when any command is called\n\t * to make modifications to args, determine if the command can\n\t * be run, or anything else you want to do every time any command\n\t * is called.\n\t *\n\t * See {@link MiddlewareFunction} for information on how a middleware\n\t * function should be represented\n\t *\n\t * Usage example:\n\t * ```\n\t * <Client>.use((message, args) => [message, args.map(a => a.toUpperCase())]);\n\t * ```\n\t * This will add a middleware function to all commands that will attempt\n\t * to transform all args to uppercase. This will of course fail if any\n\t * of the args are not a string.\n\t *\n\t * >**Note:** Middleware functions should only be added to the client one\n\t * time each and thus should not be added within any sort of event or loop.\n\t * Multiple separate middleware functions can be added to the via multiple\n\t * separate calls to this method\n\t *\n\t * >**Warning:** Do not use middleware for overriding the default argument\n\t * splitting. Use {@link YAMDBFOptions.argsParser} instead. Otherwise\n\t * you will see inconsistent results when using Command shortcuts, as\n\t * argument splitting for shortcut interpolation always happens before\n\t * middleware is run\n\t * @param {MiddlewareFunction} func The middleware function to use\n\t * @returns {Client}\n\t */\n\tpublic use(func: MiddlewareFunction): this\n\t{\n\t\tthis._middleware.push(func);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Reload custom commands. Used internally by the `reload` command\n\t * @private\n\t */\n\tpublic _reloadCustomCommands(): number\n\t{\n\t\tif (!this.commandsDir)\n\t\t\tthrow new Error('Client is missing `commandsDir`, cannot reload Commands');\n\n\t\treturn this._commandLoader.loadCommandsFrom(this.commandsDir);\n\t}\n\n\t/**\n\t * Reload Events from all registered event source directories\n\t * @private\n\t */\n\tpublic _reloadEvents(): number\n\t{\n\t\treturn this.eventLoader.loadFromSources();\n\t}\n\n//#region Discord.js on() events\n\n\tpublic on(event: 'channelCreate' | 'channelDelete', listener: (channel: Channel) => void): this;\n\tpublic on(event: 'channelPinsUpdate', listener: (channel: Channel, time: Date) => void): this;\n\tpublic on(event: 'channelUpdate', listener: (oldChannel: Channel, newChannel: Channel) => void): this;\n\tpublic on(event: 'debug' | 'warn', listener: (info: string) => void): this;\n\tpublic on(event: 'disconnect', listener: (event: any) => void): this;\n\tpublic on(event: 'emojiCreate' | 'emojiDelete', listener: (emoji: GuildEmoji) => void): this;\n\tpublic on(event: 'emojiUpdate', listener: (oldEmoji: GuildEmoji, newEmoji: GuildEmoji) => void): this;\n\tpublic on(event: 'error', listener: (error: Error) => void): this;\n\tpublic on(event: 'guildBanAdd' | 'guildBanRemove', listener: (guild: Guild, user: User) => void): this;\n\tpublic on(event: 'guildCreate' | 'guildDelete' | 'guildUnavailable', listener: (guild: Guild) => void): this;\n\tpublic on(event: 'guildMemberAdd' | 'guildMemberAvailable' | 'guildMemberRemove', listener: (member: GuildMember) => void): this;\n\tpublic on(event: 'guildMembersChunk', listener: (members: Collection<Snowflake, GuildMember>, guild: Guild) => void): this;\n\tpublic on(event: 'guildMemberSpeaking', listener: (member: GuildMember, speaking: Readonly<Speaking>) => void): this;\n\tpublic on(event: 'guildMemberUpdate', listener: (oldMember: GuildMember, newMember: GuildMember) => void): this;\n\tpublic on(event: 'guildUpdate', listener: (oldGuild: Guild, newGuild: Guild) => void): this;\n\tpublic on(event: 'guildIntegrationsUpdate', listener: (guild: Guild) => void): this;\n\tpublic on(event: 'message' | 'messageDelete' | 'messageReactionRemoveAll', listener: (message: Message) => void): this;\n\tpublic on(event: 'messageDeleteBulk', listener: (messages: Collection<Snowflake, Message>) => void): this;\n\tpublic on(event: 'messageReactionAdd' | 'messageReactionRemove', listener: (messageReaction: MessageReaction, user: User) => void): this;\n\tpublic on(event: 'messageUpdate', listener: (oldMessage: Message, newMessage: Message) => void): this;\n\tpublic on(event: 'presenceUpdate', listener: (oldPresence: Presence | undefined, newPresence: Presence) => void): this;\n\tpublic on(event: 'rateLimit', listener: (rateLimitData: RateLimitData) => void): this;\n\tpublic on(event: 'ready' | 'reconnecting', listener: () => void): this;\n\tpublic on(event: 'resumed', listener: (replayed: number) => void): this;\n\tpublic on(event: 'roleCreate' | 'roleDelete', listener: (role: Role) => void): this;\n\tpublic on(event: 'roleUpdate', listener: (oldRole: Role, newRole: Role) => void): this;\n\tpublic on(event: 'typingStart' | 'typingStop', listener: (channel: Channel, user: User) => void): this;\n\tpublic on(event: 'userUpdate', listener: (oldUser: User, newUser: User) => void): this;\n\tpublic on(event: 'voiceStateUpdate', listener: (oldState: VoiceState, newState: VoiceState) => void): this;\n\tpublic on(event: 'webhookUpdate', listener: (channel: TextChannel) => void): this;\n\tpublic on(event: string, listener: Function): this;\n\n//#endregion\n\n\tpublic on(event: 'command', listener: (name: string, args: any[], execTime: number, message: Message) => void): this;\n\tpublic on(event: 'unknownCommand', listener: (name: string, args: any[], message: Message) => void): this;\n\tpublic on(event: 'noCommand', listener: (message: Message) => void): this;\n\tpublic on(event: 'blacklistAdd', listener: (user: User, global: boolean) => void): this;\n\tpublic on(event: 'blacklistRemove', listener: (user: User, global: boolean) => void): this;\n\tpublic on(event: 'pause', listener: () => void): this;\n\tpublic on(event: 'continue', listener: () => void): this;\n\tpublic on(event: 'clientReady', listener: () => void): this;\n\n\t/**\n\t * Emitted whenever a command is successfully called\n\t * @memberof Client\n\t * @event event:command\n\t * @param {string} name Name of the called command\n\t * @param {any[]} args Args passed to the called command\n\t * @param {number} execTime Time command took to execute\n\t * @param {external:Message} message Message that triggered the command\n\t */\n\n\t/**\n\t * Emitted whenever a command is called that doesn't exist\n\t * @memberof Client\n\t * @event event:unknownCommand\n\t * @param {string} name The name of the command that was attempted to be called\n\t * @param {any[]} args Args passed to the unknown command\n\t * @param {external:Message} message Message that triggered the unknown command\n\t */\n\n\t/**\n\t * Emitted whenever a message is received that does not contain a command or unknown command\n\t * @memberof Client\n\t * @event event:noCommand\n\t * @param {external:Message} message Message that did not contain a command or unknown command\n\t */\n\n\t/**\n\t * Emitted whenever a user is blacklisted\n\t * @memberof Client\n\t * @event event:blacklistAdd\n\t * @param {User} user User who was blacklisted\n\t * @param {boolean} global Whether or not blacklisting is global\n\t */\n\n\t/**\n\t * Emitted whenever a user is removed from the blacklist\n\t * @memberof Client\n\t * @event event:blacklistRemove\n\t * @param {User} user User who was removed\n\t * @param {boolean} global Whether or not removal is global\n\t */\n\n\t/**\n\t * Emitted when the client is waiting for you to send a `continue` event,\n\t * after which `clientReady` will be emitted\n\t * @memberof Client\n\t * @event event:pause\n\t */\n\n\t/**\n\t * To be emitted after the `pause` event when you have finished setting\n\t * things up that should be set up before the client is ready for use\n\t * @memberof Client\n\t * @event event:continue\n\t */\n\n\t/**\n\t * Emitted when the client is ready. Should be used instead of Discord.js'\n\t * `ready` event, as this is the point that everything is set up within the\n\t * YAMDBF Client and it's all ready to go\n\t * @memberof Client\n\t * @event event:clientReady\n\t */\n\n\t// on() wrapper to support overload signatures\n\tpublic on(event: string, listener: Function): this\n\t{\n\t\treturn super.on(event, listener);\n\t}\n\n//#region\n\n//#region Discord.js once() events\n\n\tpublic once(event: 'channelCreate' | 'channelDelete', listener: (channel: Channel) => void): this;\n\tpublic once(event: 'channelPinsUpdate', listener: (channel: Channel, time: Date) => void): this;\n\tpublic once(event: 'channelUpdate', listener: (oldChannel: Channel, newChannel: Channel) => void): this;\n\tpublic once(event: 'debug' | 'warn', listener: (info: string) => void): this;\n\tpublic once(event: 'disconnect', listener: (event: any) => void): this;\n\tpublic once(event: 'emojiCreate' | 'emojiDelete', listener: (emoji: GuildEmoji) => void): this;\n\tpublic once(event: 'emojiUpdate', listener: (oldEmoji: GuildEmoji, newEmoji: GuildEmoji) => void): this;\n\tpublic once(event: 'error', listener: (error: Error) => void): this;\n\tpublic once(event: 'guildBanAdd' | 'guildBanRemove', listener: (guild: Guild, user: User) => void): this;\n\tpublic once(event: 'guildCreate' | 'guildDelete' | 'guildUnavailable', listener: (guild: Guild) => void): this;\n\tpublic once(event: 'guildMemberAdd' | 'guildMemberAvailable' | 'guildMemberRemove', listener: (member: GuildMember) => void): this;\n\tpublic once(event: 'guildMembersChunk', listener: (members: Collection<Snowflake, GuildMember>, guild: Guild) => void): this;\n\tpublic once(event: 'guildMemberSpeaking', listener: (member: GuildMember, speaking: Readonly<Speaking>) => void): this;\n\tpublic once(event: 'guildMemberUpdate', listener: (oldMember: GuildMember, newMember: GuildMember) => void): this;\n\tpublic once(event: 'guildUpdate', listener: (oldGuild: Guild, newGuild: Guild) => void): this;\n\tpublic once(event: 'guildIntegrationsUpdate', listener: (guild: Guild) => void): this;\n\tpublic once(event: 'message' | 'messageDelete' | 'messageReactionRemoveAll', listener: (message: Message) => void): this;\n\tpublic once(event: 'messageDeleteBulk', listener: (messages: Collection<Snowflake, Message>) => void): this;\n\tpublic once(event: 'messageReactionAdd' | 'messageReactionRemove', listener: (messageReaction: MessageReaction, user: User) => void): this;\n\tpublic once(event: 'messageUpdate', listener: (oldMessage: Message, newMessage: Message) => void): this;\n\tpublic once(event: 'presenceUpdate', listener: (oldPresence: Presence | undefined, newPresence: Presence) => void): this;\n\tpublic once(event: 'rateLimit', listener: (rateLimitData: RateLimitData) => void): this;\n\tpublic once(event: 'ready' | 'reconnecting', listener: () => void): this;\n\tpublic once(event: 'resumed', listener: (replayed: number) => void): this;\n\tpublic once(event: 'roleCreate' | 'roleDelete', listener: (role: Role) => void): this;\n\tpublic once(event: 'roleUpdate', listener: (oldRole: Role, newRole: Role) => void): this;\n\tpublic once(event: 'typingStart' | 'typingStop', listener: (channel: Channel, user: User) => void): this;\n\tpublic once(event: 'userUpdate', listener: (oldUser: User, newUser: User) => void): this;\n\tpublic once(event: 'voiceStateUpdate', listener: (oldState: VoiceState, newState: VoiceState) => void): this;\n\tpublic once(event: 'webhookUpdate', listener: (channel: TextChannel) => void): this;\n\tpublic once(event: string, listener: Function): this;\n\n//#endregion\n\n\tpublic once(event: 'command', listener: (name: string, args: any[], execTime: number, message: Message) => void): this;\n\tpublic once(event: 'unknownCommand', listener: (name: string, args: any[], message: Message) => void): this;\n\tpublic once(event: 'noCommand', listener: (message: Message) => void): this;\n\tpublic once(event: 'blacklistAdd', listener: (user: User, global: boolean) => void): this;\n\tpublic once(event: 'blacklistRemove', listener: (user: User, global: boolean) => void): this;\n\tpublic once(event: 'pause', listener: () => void): this;\n\tpublic once(event: 'continue', listener: () => void): this;\n\tpublic once(event: 'clientReady', listener: () => void): this;\n\n\t// once() wrapper to support overload signatures\n\tpublic once(event: string, listener: Function): this\n\t{\n\t\treturn super.once(event, listener);\n\t}\n}\n"],"sourceRoot":"../../src"}