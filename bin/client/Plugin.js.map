{"version":3,"sources":["client/Plugin.ts"],"names":[],"mappings":";;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsCG;AACH,MAAsB,MAAM;CAI3B;AAJD,wBAIC","file":"Plugin.js","sourcesContent":["import { IPlugin } from './interface/IPlugin';\nimport { SharedProviderStorage } from '../storage/SharedProviderStorage';\n\n/**\n * Abstract class for Client plugins to extend. Provides runtime errors\n * for missing method implementations, and is necessary at compile-time\n * when using TypeScript for the compiler to recognize a Plugin as valid.\n *\n * Plugins will always be passed the YAMDBF Client instance when loaded.\n * If you intend to do anything with it you must receive it in your\n * plugin constructor which means you will need a `super()` call since\n * you will be overriding the parent Plugin constructor\n *\n * A plugin should be a self-contained module that provides additional\n * functionality for a Client. A plugin could do something as simple as\n * logging all command output to a logging channel, registering a set\n * of custom commands for the client to use, or even providing new\n * localization language packs.\n *\n * A plugin should not attempt to register custom commands via any means\n * other than [&lt;Client&gt;.commands.registerExternal()]{@link CommandRegistry#registerExternal},\n * otherwise any custom commands could be unloaded if the `reload` command\n * is called\n *\n * <blockquote>**Note:** A plugin is expected to have two things at runtime:\n * a `name` property containing the name of the plugin, and an `init()`\n * method that will be called by the framework after loading the plugin.<br>\n * See: {@link IPlugin#name} and {@link IPlugin#init}</blockquote>\n *\n * <blockquote>**Warning:** Given the nature of the Plugin system, this allows you to\n * use code from other people for your bot. Considering any plugin will\n * have access to your Client instance and thus your Bot token, you should\n * be absolutely certain that the plugin is not going to do anything\n * malicious before using it</blockquote>\n * @abstract\n * @implements IPlugin\n * @param {Client} client The YAMDBF Client instance. This will be passed by\n * the plugin loader when the plugin is loaded at runtime. This will automatically\n * be received and stored under `<Plugin>.client` unless you provide your own\n * constructor implementation, in which case it must be received and passed\n * to `super()`\n */\nexport abstract class Plugin implements IPlugin\n{\n\tpublic abstract name: string;\n\tpublic abstract init(storage?: SharedProviderStorage): void;\n}\n"],"sourceRoot":"../../src"}