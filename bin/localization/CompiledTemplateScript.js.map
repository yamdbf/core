{"version":3,"sources":["localization/CompiledTemplateScript.ts"],"names":[],"mappings":";;AAAA,2BAA4B;AAE5B;;;;GAIG;AACH,MAAa,sBAAsB;IAMlC,YAAmB,GAAW;QAE7B,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QAEf,uDAAuD;QACvD,4DAA4D;QAC5D,IAAI;YAAE,IAAI,CAAC,IAAI,GAAG,IAAI,QAAQ,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;SAAE;QAAC,WAAM,GAAE;QAE9D,gEAAgE;QAChE,0DAA0D;QACzD,IAAI,CAAC,IAAY,CAAC,WAAW,GAAG,IAAI,WAAM,CAAC,sBAAsB,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC;QACvF,OAAQ,IAAI,CAAC,IAAY,CAAC,WAAW,CAAC;QAEtC,yDAAyD;QACzD,IACA;YACC,MAAM,YAAY,GAAW,UAAU,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAE,CAAC;YACnE,MAAM,kBAAkB,GAAa,IAAI,QAAQ,CAAC,MAAM,EAAE,KAAK,EAAE,YAAY,CAAC,CAAC;YAC/E,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;SAC7C;QACD,WAAM,GAAE;IACT,CAAC;IAED;;;;OAIG;IACK,MAAM,CAAC,aAAa,CAAC,IAAY;QAExC,OAAO,4BAA4B,IAAI,KAAK,CAAC;IAC9C,CAAC;CACD;AAtCD,wDAsCC","file":"CompiledTemplateScript.js","sourcesContent":["import { Script } from 'vm';\n\n/**\n * A compiled localization template script, including an implicit\n * return coercion if it was syntactically possible to create one\n * @private\n */\nexport class CompiledTemplateScript\n{\n\tpublic readonly raw: string;\n\tpublic readonly func!: Function;\n\tpublic readonly implicitReturnFunc: Function | undefined;\n\n\tpublic constructor(raw: string)\n\t{\n\t\tthis.raw = raw;\n\n\t\t// Defer syntax error handling to the vm Script because\n\t\t// it will actually detail the code in question in the error\n\t\ttry { this.func = new Function('args', 'res', raw); } catch {}\n\n\t\t// Because --noUnusedLocals, no-unused-expression, and I dislike\n\t\t// disabling tslint and TypeScript errors. Don't judge me.\n\t\t(this.func as any)._testScript = new Script(CompiledTemplateScript._functionWrap(raw));\n\t\tdelete (this.func as any)._testScript;\n\n\t\t// Attempt to create the coerced implicit return function\n\t\ttry\n\t\t{\n\t\t\tconst functionBody: string = `return ${raw.replace(/^[\\s]+/, '')}`;\n\t\t\tconst implicitReturnFunc: Function = new Function('args', 'res', functionBody);\n\t\t\tthis.implicitReturnFunc = implicitReturnFunc;\n\t\t}\n\t\tcatch {}\n\t}\n\n\t/**\n\t * Wrap the given code in a function body to prevent vm.Script\n\t * throwing errors on top-level returns which are valid in the\n\t * context of a template script\n\t */\n\tprivate static _functionWrap(code: string)\n\t{\n\t\treturn `function _(args, res) {\\n${code}\\n}`;\n\t}\n}\n"],"sourceRoot":"../../src"}