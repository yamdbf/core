{"version":3,"sources":["localization/Lang.ts"],"names":[],"mappings":"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","file":"Lang.js","sourcesContent":["import * as fs from 'fs';\nimport * as glob from 'glob';\nimport * as path from 'path';\nimport { Client } from '../client/Client';\nimport { Command } from '../command/Command';\nimport { LocalizedCommandInfo } from '../types/LocalizedCommandInfo';\nimport { ResourceLoader } from '../types/ResourceLoader';\nimport { ResourceProxy } from '../types/ResourceProxy';\nimport { TemplateData } from '../types/TemplateData';\nimport { Logger, logger } from '../util/logger/Logger';\nimport { LangFileParser } from './LangFileParser';\nimport { Language } from './Language';\nimport { Message } from '../types/Message';\nimport { GuildStorage } from '../storage/GuildStorage';\nimport { Util } from '../util/Util';\nimport { BaseStrings } from './BaseStrings';\nimport { LangStringNode } from './LangStringNode';\nimport { CompiledTemplateScript } from './CompiledTemplateScript';\nimport { deprecatedMethod } from '../util/DeprecatedMethodDecorator';\n\n/**\n * Module providing localization support throughout the framework.\n * Allows client output to be translated to other languages\n * @module Lang\n */\nexport class Lang\n{\n\t@logger('Lang')\n\tprivate static readonly _logger: Logger;\n\n\tprivate readonly _client: Client;\n\tprivate readonly _commandInfo: { [command: string]: { [lang: string]: LocalizedCommandInfo } };\n\tprivate readonly _groupInfo: { [group: string]: { [lang: string]: string } };\n\tprivate readonly _langs: { [lang: string]: Language };\n\tprivate readonly _meta: { [lang: string]: { [key: string]: any } };\n\tprivate _fallbackLang!: string;\n\n\tprivate static _instance: Lang;\n\tprivate static _maybeTemplates: RegExp = /^{{ *[a-zA-Z]+ *\\?}}[\\t ]*\\n|{{ *[a-zA-Z]+ *\\?}}/gm;\n\n\tprivate constructor(client: Client)\n\t{\n\t\tif (Lang._instance)\n\t\t\tthrow new Error('Cannot create multiple instances of Lang singleton');\n\n\t\tthis._client = client;\n\t\tthis._commandInfo = {};\n\t\tthis._groupInfo = {};\n\t\tthis._langs = {};\n\t\tthis._meta = {};\n\t}\n\n\t/**\n\t * Contains all loaded languages and their strings.\n\t * This does not include localized command helptext.\n\t * Rather than using this directly, loading stings with\n\t * a {@link ResourceLoader} function is preferred\n\t * @static\n\t * @name langs\n\t * @type {object}\n\t */\n\tpublic static get langs(): { [lang: string]: Language }\n\t{\n\t\tif (!Lang._instance) throw new Error('Lang singleton instance has not been created');\n\t\treturn Lang._instance._langs;\n\t}\n\n\t/**\n\t * Contains all available localization languages\n\t * @static\n\t * @name langNames\n\t * @type {string[]}\n\t */\n\tpublic static get langNames(): string[]\n\t{\n\t\tif (!Lang._instance) throw new Error('Lang singleton instance has not been created');\n\n\t\tlet langs: Set<string> = new Set();\n\t\tfor (const commandName of Object.keys(Lang._instance._commandInfo))\n\t\t\tfor (const lang of Object.keys(Lang._instance._commandInfo[commandName]))\n\t\t\t\tlangs.add(lang);\n\n\t\tfor (const lang of Object.keys(Lang.langs)) langs.add(lang);\n\n\t\treturn Array.from(langs);\n\t}\n\n\t/**\n\t * Create the singleton instance.\n\t * Called automatically by the YAMDBF Client at startup\n\t * @static\n\t * @method createInstance\n\t * @param {Client} client YAMDBF Client instance\n\t * @returns {void}\n\t */\n\tpublic static createInstance(client: Client): void\n\t{\n\t\tif (!Lang._instance) Lang._instance = new Lang(client);\n\t}\n\n\t/**\n\t * Set a metadata key/value for a given language\n\t * @static\n\t * @method setMetaValue\n\t * @param {string} lang Language to set metadata for\n\t * @param {string} key Metadata key to set\n\t * @param {any} value Metadata value to assign\n\t * @returns {void}\n\t */\n\tpublic static setMetaValue(lang: string, key: string, value: any): void\n\t{\n\t\tif (!Lang._instance) throw new Error('Lang singleton instance has not been created');\n\t\tUtil.assignNestedValue(Lang._instance._meta, [lang, key], value);\n\t}\n\n\t/**\n\t * Get a metadata value by key for a given language\n\t * @static\n\t * @method getMetaValue\n\t * @param {string} lang Language to get metadata for\n\t * @param {string} key Metadata key to get\n\t * @returns {any}\n\t */\n\tpublic static getMetaValue(lang: string, key: string): any\n\t{\n\t\tif (!Lang._instance) throw new Error('Lang singleton instance has not been created');\n\t\treturn Util.getNestedValue(Lang._instance._meta, [lang, key]);\n\t}\n\n\t/**\n\t * Get all metadata for a given language\n\t * @static\n\t * @method getMetadata\n\t * @param {string} lang Language to get metadata for\n\t * @returns {object}\n\t */\n\tpublic static getMetadata(lang: string): { [key: string]: any }\n\t{\n\t\tif (!Lang._instance) throw new Error('Lang singleton instance has not been created');\n\t\treturn Lang._instance._meta[lang] || {};\n\t}\n\n\t/**\n\t * Set the language to try when a string cannot be found for\n\t * the current language\n\t * @static\n\t * @method setFallbackLang\n\t * @param {string} lang Fallback language to set\n\t * @returns {void}\n\t */\n\tpublic static setFallbackLang(lang: string): void\n\t{\n\t\tif (!Lang._instance) throw new Error('Lang singleton instance has not been created');\n\t\tLang._instance._fallbackLang = lang;\n\t}\n\n\t/**\n\t * To be run after loading any localizations\n\t * @private\n\t */\n\tprivate static postLoad(): void\n\t{\n\t\tif (Lang.langNames.length > 1\n\t\t\t&& (!Lang._instance._client.disableBase.includes('setlang')\n\t\t\t&& Lang._instance._client.commands.has('setlang')\n\t\t\t&& Lang._instance._client.commands.get('setlang')!.disabled))\n\t\t{\n\t\t\tLang._instance._client.commands.get('setlang')!.enable();\n\t\t\tLang._logger.info(`Additional langugage loaded, enabled 'setlang' command.`);\n\t\t}\n\t}\n\n\t/**\n\t * Load all localization files (`*.lang`) from the given directory.\n\t * This can be used to manually load custom localizations\n\t * from any given directory (when writing plugins, for instance)\n\t * @static\n\t * @method loadLocalizationsFrom\n\t * @param {string} dir Directory to load from\n\t * @returns {void}\n\t */\n\tpublic static loadLocalizationsFrom(dir: string): void\n\t{\n\t\tif (!Lang._instance) throw new Error('Lang singleton instance has not been created');\n\n\t\tconst langNameRegex: RegExp = /\\/([^\\/\\.]+)(?:\\.[^\\/]+)?\\.lang$/;\n\t\tlet langs: { [key: string]: string[] } = {};\n\t\tlet files: string[] = [];\n\n\t\tdir = path.resolve(dir);\n\t\tfiles.push(...glob.sync(`${dir}/**/*.lang`));\n\n\t\tif (files.length === 0)\n\t\t\tthrow new Error(`Failed to find any localization files in: ${dir}`);\n\n\t\tfor (const file of files)\n\t\t{\n\t\t\tif (!langNameRegex.test(file)) continue;\n\t\t\tconst name: string = file.match(langNameRegex)![1];\n\t\t\tif (!langs[name]) langs[name] = [];\n\n\t\t\tlangs[name].push(file);\n\t\t}\n\n\t\tfor (const lang in langs)\n\t\t{\n\t\t\tfor (const file of langs[lang])\n\t\t\t{\n\t\t\t\tif (!langNameRegex.test(file)) continue;\n\t\t\t\tconst contents: string = fs\n\t\t\t\t\t.readFileSync(file)\n\t\t\t\t\t.toString()\n\t\t\t\t\t.replace(/\\r\\n/g, '\\n');\n\n\t\t\t\tconst parsedLanguageFile: Language =\n\t\t\t\t\tLangFileParser.parseFile(lang, file, contents);\n\n\t\t\t\tif (typeof Lang._instance._langs[lang] !== 'undefined')\n\t\t\t\t\tLang._instance._langs[lang].concat(parsedLanguageFile);\n\t\t\t\telse\n\t\t\t\t\tLang._instance._langs[lang] = parsedLanguageFile;\n\t\t\t}\n\t\t}\n\n\t\tLang.postLoad();\n\t}\n\n\t/**\n\t * Load base localization files and load localization files\n\t * from the Client's `localeDir`. Called automatically by\n\t * the YAMDBF Client at startup\n\t * @static\n\t * @method loadLocalizations\n\t * @returns {void}\n\t */\n\tpublic static loadLocalizations(): void\n\t{\n\t\tif (!Lang._instance) throw new Error('Lang singleton instance has not been created');\n\n\t\tLang.setMetaValue('en_us', 'name', 'English');\n\t\tLang.loadLocalizationsFrom(path.join(__dirname, './en_us'));\n\t\tif (Lang._instance._client.localeDir)\n\t\t\tLang.loadLocalizationsFrom(Lang._instance._client.localeDir);\n\n\t\tLang._logger.info(`Loaded string localizations for ${Object.keys(Lang.langs).length} languages.`);\n\t}\n\n\t/**\n\t * Load all command helptext localization files (`*.lang.json`)\n\t * from the given directory. This can be used to manually load\n\t * custom command helptext localizations from any given\n\t * directory (when writing plugins, for instance)\n\t * @static\n\t * @method loadCommandLocalizationsFrom\n\t * @param {string} dir Directory to load from\n\t * @returns {void}\n\t */\n\tpublic static loadCommandLocalizationsFrom(dir: string): void\n\t{\n\t\tif (!Lang._instance) throw new Error('Lang singleton instance has not been created');\n\n\t\tlet files: string[] = [];\n\t\tdir = path.resolve(dir);\n\t\tfiles.push(...glob.sync(`${dir}/**/*.lang.json`));\n\n\t\tif (files.length === 0) return;\n\n\t\tfor (const file of files)\n\t\t{\n\t\t\t// Ignore reserved commandgroups.lang.json\n\t\t\tif (/commandgroups\\.lang\\.json$/.test(file)) continue;\n\n\t\t\tlet localizations: { [command: string]: { [lang: string]: LocalizedCommandInfo } };\n\t\t\ttry { localizations = require(file); }\n\t\t\tcatch { continue; }\n\n\t\t\tfor (const command of Object.keys(localizations))\n\t\t\t\tfor (const lang of Object.keys(localizations[command]))\n\t\t\t\t{\n\t\t\t\t\tif (typeof Util.getNestedValue(Lang._instance._commandInfo, [command, lang]) === 'undefined')\n\t\t\t\t\t\tUtil.assignNestedValue(Lang._instance._commandInfo, [command, lang], {});\n\n\t\t\t\t\tLang._instance._commandInfo[command][lang] = {\n\t\t\t\t\t\t...Lang._instance._commandInfo[command][lang],\n\t\t\t\t\t\t...localizations[command][lang]\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t}\n\n\t\tLang.postLoad();\n\t}\n\n\t/**\n\t * Find and load `commandgroups.lang.json` from the provided directory,\n\t * setting command group descriptions for the given groups and languages\n\t * in the file\n\t * @static\n\t * @method loadGroupLocalizationsFrom\n\t * @param {string} dir Directory to load from\n\t * @returns {void}\n\t */\n\tpublic static loadGroupLocalizationsFrom(dir: string): void\n\t{\n\t\tif (!Lang._instance) throw new Error('Lang singleton instance has not been created');\n\n\t\tdir = path.resolve(dir);\n\t\tconst file: string = glob.sync(`${dir}/**/commandgroups.lang.json`)[0];\n\n\t\tif (!file) return;\n\n\t\tlet groupInfo: { [group: string]: { [lang: string]: string } };\n\t\ttry { groupInfo = require(file); }\n\t\tcatch (err) { throw new Error(`Failed to load group localizations from '${file}:\\n${err.stack}`); }\n\n\t\tfor (const group of Object.keys(groupInfo))\n\t\t\tfor (const lang of Object.keys(groupInfo[group]))\n\t\t\t\tUtil.assignNestedValue(\n\t\t\t\t\tLang._instance._groupInfo,\n\t\t\t\t\t[group, lang],\n\t\t\t\t\tgroupInfo[group][lang]);\n\t}\n\n\t/**\n\t * Load any command info and command group localizations\n\t * from the Client's `commandsDir`. Called automatically\n\t * by the YAMDBF Client at startup\n\t * @static\n\t * @method loadCommandLocalizations\n\t * @returns {void}\n\t */\n\tpublic static loadCommandLocalizations(): void\n\t{\n\t\tif (!Lang._instance) throw new Error('Lang singleton instance has not been created');\n\n\t\tLang.loadGroupLocalizationsFrom(path.join(__dirname, './en_us'));\n\n\t\tif (!Lang._instance._client.commandsDir) return;\n\t\tLang.loadCommandLocalizationsFrom(Lang._instance._client.commandsDir);\n\t\tLang.loadGroupLocalizationsFrom(Lang._instance._client.commandsDir);\n\n\t\tconst helpTextLangs: Set<string> = new Set();\n\t\tfor (const command of Object.keys(Lang._instance._commandInfo))\n\t\t\tfor (const lang of Object.keys(Lang._instance._commandInfo[command]))\n\t\t\t\thelpTextLangs.add(lang);\n\n\t\tLang._logger.info(`Loaded helptext localizations for ${helpTextLangs.size} languages.`);\n\t}\n\n\t/**\n\t * Get localized Command info, defaulting to the info\n\t * given in the Command's constructor\n\t * @static\n\t * @method getCommandInfo\n\t * @param {Command} command Command to get localized info for\n\t * @param {string} lang Language to get the localized info in\n\t * @returns {LocalizedCommandInfo}\n\t */\n\tpublic static getCommandInfo(command: Command, lang: string): LocalizedCommandInfo\n\t{\n\t\tif (!Lang._instance) throw new Error('Lang singleton instance has not been created');\n\t\tif (!command) throw new Error('A Command must be given for which to get Command info');\n\t\tif (!(command instanceof Command))\n\t\t\tthrow new TypeError('command must be an instance of Command class');\n\n\t\tconst paths: string[] = [command.name, lang];\n\t\tlet desc: string, info: string, usage: string;\n\t\tdesc = Util.getNestedValue(Lang._instance._commandInfo, [...paths, 'desc']) || command.desc || '';\n\t\tinfo = Util.getNestedValue(Lang._instance._commandInfo, [...paths, 'info']) || command.info || '';\n\t\tusage = Util.getNestedValue(Lang._instance._commandInfo, [...paths, 'usage']) || command.usage || '';\n\n\t\treturn { desc, info, usage };\n\t}\n\n\t/**\n\t * Get the localized Command group description for the\n\t * given group and language\n\t * @param {string} group Command group to get localized info for\n\t * @param {string} lang Language to get localized group info in\n\t */\n\tpublic static getGroupInfo(group: string, lang: string): string\n\t{\n\t\tif (!Lang._instance) throw new Error('Lang singleton instance has not been created');\n\t\tif (!group) throw new Error('A group must be provided');\n\t\treturn Util.getNestedValue(Lang._instance._groupInfo, [group, lang]) || `${lang}::group_${group}`;\n\t}\n\n\t/**\n\t * Gets the language that should be used for localization via the given {@link Message}\n\t * based on whether the Message is a DM, the Guild's configured language,\n\t * and the Client's default language\n\t * @static\n\t * @method getLangFromMessage\n\t * @param {Message} message\n\t * @returns {Promise<string>}\n\t */\n\tpublic static async getLangFromMessage(message: Message): Promise<string>\n\t{\n\t\tconst dm: boolean = message.channel.type !== 'text';\n\t\tconst storage: GuildStorage | undefined | null = !dm\n\t\t\t? Lang._instance._client.storage.guilds.get(message.guild.id)\n\t\t\t: null;\n\n\t\tconst lang: string = dm\n\t\t\t? Lang._instance._client.defaultLang\n\t\t\t: (storage && await storage.settings.get('lang'))\n\t\t\t\t|| Lang._instance._client.defaultLang;\n\n\t\treturn lang;\n\t}\n\n\t/**\n\t * Get a string resource for the given language, replacing any\n\t * templates with the given data and evaluating any embedded\n\t * template scripts\n\t * @static\n\t * @method res\n\t * @param {string} lang Language to get a string resource for\n\t * @param {string} key String key to get\n\t * @param {TemplateData} [data] Values to replace in the string\n\t * @returns {string}\n\t */\n\tpublic static res(lang: string, key: string, data: TemplateData = {}): string\n\t{\n\t\tif (!Lang.langs[lang]\n\t\t\t&& Lang._instance._fallbackLang\n\t\t\t&& Lang.langs[Lang._instance._fallbackLang])\n\t\t\treturn `${lang}::${key}`;\n\n\t\tlet node: LangStringNode = Lang.langs[lang].strings[key];\n\n\t\t// Try loading string via the fallback language if it's set\n\t\t// and the given string can't be found for the given language\n\t\tif (!node)\n\t\t{\n\t\t\tif (Lang._instance._fallbackLang\n\t\t\t\t&& Lang.langs[Lang._instance._fallbackLang])\n\t\t\t\tnode = Lang.langs[Lang._instance._fallbackLang].strings[key];\n\n\t\t\tif (!node) return `${lang}::${key}`;\n\t\t}\n\n\t\tlet loadedString: string = node.value;\n\n\t\t// Run the argsValidator for the node if it exists\n\t\tif (typeof node.argsValidator !== 'undefined') node.argsValidator(data);\n\n\t\t// Don't bother running scripts and stuff if no args are passed.\n\t\t// Clean out maybe templates, replace escaped new lines with real\n\t\t// ones and return the loaded string\n\t\tif (typeof data === 'undefined')\n\t\t\treturn loadedString\n\t\t\t\t.replace(Lang._maybeTemplates, '')\n\t\t\t\t.replace(/\\\\n/g, '\\n');\n\n\t\t// Handle templates\n\t\tfor (const template of Object.keys(data))\n\t\t{\n\t\t\t// Skip maybe templates so they can be removed properly later\n\t\t\tif (new RegExp(`{{ *${template} *\\\\?}}`, 'g').test(loadedString)\n\t\t\t\t&& (data[template] === '' || data[template] === undefined)) continue;\n\n\t\t\tloadedString = loadedString.replace(\n\t\t\t\tnew RegExp(`{{ *${template} *\\\\??}}`, 'g'), () => data[template]);\n\t\t}\n\n\t\t// Run embedded Lang string node scripts if any\n\t\tif (node.scripts.length > 0)\n\t\t{\n\t\t\tconst proxy: ResourceProxy = Lang.createResourceProxy(lang);\n\t\t\tconst dataForwardProxy: any = new Proxy({}, {\n\t\t\t\tget: (_, prop) => {\n\t\t\t\t\treturn (args: TemplateData = data) => proxy[prop as BaseStrings](args);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfor (const script in node.scripts)\n\t\t\t{\n\t\t\t\tconst loadedScript: CompiledTemplateScript = node.scripts[script];\n\n\t\t\t\tlet result: string;\n\t\t\t\ttry { result = loadedScript.func(data, dataForwardProxy); }\n\t\t\t\tcatch (err) { throw new Error(`in embedded localization script for: ${lang}::${key}\\n${err}`); }\n\n\t\t\t\t// Try coerced implicit return if it exists\n\t\t\t\tif (typeof result === 'undefined'\n\t\t\t\t\t&& loadedScript.implicitReturnFunc)\n\t\t\t\t\tresult = loadedScript.implicitReturnFunc!(data, dataForwardProxy);\n\n\t\t\t\t// Set the result to an empty string if the script returns nothing\n\t\t\t\tif (typeof result === 'undefined')\n\t\t\t\t\tresult = '';\n\n\t\t\t\t// If the script occupies its own line, follow script result with a line break\n\t\t\t\tif ((new RegExp(`^{{! ${script} !}}[\\\\t ]*\\\\n`)).test(loadedScript.raw) && result !== '')\n\t\t\t\t\tloadedString = loadedString.replace(`{{! ${script} !}}`, () => `${result}\\n`);\n\t\t\t\telse\n\t\t\t\t\tloadedString = loadedString.replace(`{{! ${script} !}}`, () => result);\n\t\t\t}\n\t\t}\n\n\t\treturn loadedString\n\t\t\t.replace(Lang._maybeTemplates, '')\n\t\t\t.replace(/\\\\n/g, '\\n');\n\t}\n\n\t/**\n\t * Takes a language string and returns a function that loads string\n\t * resources for that specific language\n\t * @deprecated Use {@link module:Lang.createResourceProxy} instead\n\t * @static\n\t * @method createResourceLoader\n\t * @param {string} lang The language to create a loader for\n\t * @returns {ResourceLoader}\n\t */\n\t@deprecatedMethod('`Lang.createResourceLoader()` is deprecated. Use `Lang.createResourceProxy()` instead')\n\tpublic static createResourceLoader(lang: string): ResourceLoader\n\t{\n\t\treturn (key, data) => Lang.res(lang, key, data);\n\t}\n\n\t/**\n\t * Creates a ResourceProxy, where keys are ResourceLoader functions\n\t * that only need the TemplateData\n\t * @static\n\t * @method createResourceProxy\n\t * @param {string} Lang The language to create a ResourceProxy for\n\t * @returns {ResourceProxy}\n\t */\n\tpublic static createResourceProxy<T = {}>(lang: string): ResourceProxy<T>\n\t{\n\t\treturn new Proxy({}, {\n\t\t\tget: (_, key) => {\n\t\t\t\treturn (data: TemplateData) => Lang.res(lang, key as string, data);\n\t\t\t}\n\t\t}) as ResourceProxy<T>;\n\t}\n}\n"],"sourceRoot":"../../src"}