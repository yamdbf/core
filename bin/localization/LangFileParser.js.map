{"version":3,"sources":["localization/LangFileParser.ts"],"names":[],"mappings":";;AAAA,yCAAsC;AACtC,qEAAkE;AAClE,qDAAkD;AAElD;;;GAGG;AACH,MAAa,cAAc;IAW1B;;;OAGG;IACI,MAAM,CAAC,SAAS,CAAC,QAAgB,EAAE,QAAgB,EAAE,YAAoB;QAE/E,MAAM,IAAI,GAAa,IAAI,mBAAQ,CAAC,QAAQ,CAAC,CAAC;QAC9C,MAAM,MAAM,GAAa,YAAY,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAE,CAAC;QAErE,IAAI,CAAC,MAAM;YACV,MAAM,IAAI,KAAK,CAAC,+DAA+D,QAAQ,EAAE,CAAC,CAAC;QAE5F,KAAK,MAAM,KAAK,IAAI,MAAM,EAC1B;YACC,MAAM,KAAK,GAAqB,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,MAAM,CAAE,CAAC;YACpE,MAAM,GAAG,GAAW,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,GAAG,GAAW,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,OAAO,GAA6B,EAAE,CAAC;YAE7C,IAAI,KAAK,GAAW,KAAK,CAAC,CAAC,CAAC;iBAC1B,OAAO,CAAC,cAAc,CAAC,SAAS,EAAE,EAAE,CAAC;iBACrC,OAAO,CAAC,cAAc,CAAC,cAAc,EAAE,EAAE,CAAC;iBAC1C,IAAI,EAAE,CAAC;YAET,+DAA+D;YAC/D,IAAI,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,EAC/C;gBACC,MAAM,SAAS,GAAqB,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,gBAAgB,CAAE,CAAC;gBAClF,KAAK,MAAM,MAAM,IAAI,SAAS,EAC9B;oBACC,MAAM,UAAU,GAAW,SAAS,CAAC,MAAM,CAAC,CAAC;oBAC7C,MAAM,YAAY,GACjB,UAAU,CAAC,KAAK,CAAC,cAAc,CAAC,eAAe,CAAE,CAAC,CAAC,CAAC;2BAChD,UAAU,CAAC,KAAK,CAAC,cAAc,CAAC,eAAe,CAAE,CAAC,CAAC,CAAC,CAAC;oBAE1D,OAAO,CAAC,IAAI,CAAC,IAAI,+CAAsB,CAAC,YAAY,CAAC,CAAC,CAAC;oBAEvD,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,OAAO,MAAM,MAAM,CAAC,CAAC;iBAC9D;aACD;YAED,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,+BAAc,CAAC,QAAQ,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;SAC3E;QAED,OAAO,IAAI,CAAC;IACb,CAAC;;AAxDF,wCAyDC;AAvDwB,qBAAM,GAAW,iEAAiE,CAAC;AACnF,sBAAO,GAAW,IAAI,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AAEzD,wBAAS,GAAW,yBAAyB,CAAC;AAC9C,6BAAc,GAAW,UAAU,CAAC;AAEpC,8BAAe,GAAW,+CAA+C,CAAC;AAC1E,+BAAgB,GAAW,IAAI,MAAM,CAAC,cAAc,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC","file":"LangFileParser.js","sourcesContent":["import { Language } from './Language';\nimport { CompiledTemplateScript } from './CompiledTemplateScript';\nimport { LangStringNode } from './LangStringNode';\n\n/**\n * Class for parsing `.lang` files\n * @private\n */\nexport class LangFileParser\n{\n\tprivate static readonly _block: RegExp = /(\\[(\\w+)\\]\\n([\\s\\S]*?))(?=\\n\\n+?(?:## *.*\\n)*\\[\\w+\\]\\n.+|\\n*?$)/;\n\tprivate static readonly _blocks: RegExp = new RegExp(LangFileParser._block, 'g');\n\n\tprivate static readonly _comments: RegExp = /^(?!$)\\s*##.*\\n|##.*$/gm;\n\tprivate static readonly _outerNewLines: RegExp = /^\\n|\\n$/g;\n\n\tprivate static readonly _scriptTemplate: RegExp = /^{{!([\\s\\S]+?)!}}[\\t ]*?\\n?|{{!([\\s\\S]+?)!}}/m;\n\tprivate static readonly _scriptTemplates: RegExp = new RegExp(LangFileParser._scriptTemplate, 'gm');\n\n\t/**\n\t * Parse a given language file string and return a Language\n\t * object containing all the parsed nodes\n\t */\n\tpublic static parseFile(langName: string, filePath: string, fileContents: string): Language\n\t{\n\t\tconst lang: Language = new Language(langName);\n\t\tconst blocks: string[] = fileContents.match(LangFileParser._blocks)!;\n\n\t\tif (!blocks)\n\t\t\tthrow new Error(`The given Lang file contains no valid localization strings: ${filePath}`);\n\n\t\tfor (const block of blocks)\n\t\t{\n\t\t\tconst match: RegExpMatchArray = block.match(LangFileParser._block)!;\n\t\t\tconst raw: string = match[1];\n\t\t\tconst key: string = match[2];\n\t\t\tconst scripts: CompiledTemplateScript[] = [];\n\n\t\t\tlet value: string = match[3]\n\t\t\t\t.replace(LangFileParser._comments, '')\n\t\t\t\t.replace(LangFileParser._outerNewLines, '')\n\t\t\t\t.trim();\n\n\t\t\t// Process template scripts and replace with script token stubs\n\t\t\tif (LangFileParser._scriptTemplates.test(value))\n\t\t\t{\n\t\t\t\tconst templates: RegExpMatchArray = value.match(LangFileParser._scriptTemplates)!;\n\t\t\t\tfor (const script in templates)\n\t\t\t\t{\n\t\t\t\t\tconst scriptData: string = templates[script];\n\t\t\t\t\tconst functionBody: string =\n\t\t\t\t\t\tscriptData.match(LangFileParser._scriptTemplate)![1]\n\t\t\t\t\t\t\t|| scriptData.match(LangFileParser._scriptTemplate)![2];\n\n\t\t\t\t\tscripts.push(new CompiledTemplateScript(functionBody));\n\n\t\t\t\t\tvalue = value.replace(templates[script], `{{! ${script} !}}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlang.strings[key] = new LangStringNode(langName, key, value, raw, scripts);\n\t\t}\n\n\t\treturn lang;\n\t}\n}\n"],"sourceRoot":"../../src"}