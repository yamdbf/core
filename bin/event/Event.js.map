{"version":3,"sources":["event/Event.ts"],"names":[],"mappings":";;AAEA;;;;;;;;;;GAUG;AAEH;;;;;GAKG;AACH;IAKC,YAAmB,IAAY;QAE9B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IAClB,CAAC;IAED;;;OAGG;IACI,SAAS,CAAC,MAAS;QAEzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACtB,CAAC;CAID;AArBD,sBAqBC","file":"Event.js","sourcesContent":["import { Client } from '../client/Client';\n\n/**\n * Method to be implemented that will be executed whenever the event this handler\n * is for is emitted by the Client\n * @abstact\n * @method Event#action\n * @param {any[]} ...args - The args your event handler will be receiving\n * \t\t\t\t\t\t\tfrom the event it handles. This can be any number\n * \t\t\t\t\t\t\tof arguments and obviously they can be received\n * \t\t\t\t\t\t\tindividually or as a rest parameter without issue\n * @returns {void}\n */\n\n/**\n * Event class to extend when writing your own custom event handlers\n * @abstract\n * @param {string} name - Name of the Client event this event handler\n * \t\t\t\t\t\t  will handle when emitted\n */\nexport abstract class Event<T extends Client = Client>\n{\n\tpublic name: string;\n\tpublic client!: T;\n\n\tpublic constructor(name: string)\n\t{\n\t\tthis.name = name;\n\t}\n\n\t/**\n\t * Receive the client instance and save it\n\t * @private\n\t */\n\tpublic _register(client: T): void\n\t{\n\t\tthis.client = client;\n\t}\n\n\t// Docs above class\n\tpublic abstract action(...args: any[]): void;\n}\n"],"sourceRoot":"../../src"}