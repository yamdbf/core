{"version":3,"sources":["event/EventDispatcher.ts"],"names":[],"mappings":";;AAGA;;;;GAIG;AACH;IAOC,YAAmB,MAAc,EAAE,QAAuB;QAEzD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;QAC1B,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;IAC7B,CAAC;IAED;;OAEG;IACI,mBAAmB;QAEzB,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;QAC1B,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,iBAAiB,EAC1C;YACC,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC;gBAC7C,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAExC,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;SACrC;IACF,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,KAAa;QAE1B,IAAI,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,KAAK,CAAC;YAAE,OAAO;QACjD,IAAI,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,KAAK,WAAW;YACvD,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;QAEpC,MAAM,OAAO,GAA6B,CAAC,GAAG,IAAI,EAAE,EAAE;YACrD,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC;gBAC3C,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;QACb,CAAC,CAAC;QAEF,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAE5C,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACjC,CAAC;CACD;AAlDD,0CAkDC","file":"EventDispatcher.js","sourcesContent":["import { Client } from '../client/Client';\nimport { EventRegistry } from './EventRegistry';\n\n/**\n * Registers event handlers with the YAMDBF Client and handles\n * the creation of dispatch functions for those events\n * @private\n */\nexport class EventDispatcher\n{\n\tprivate _client: Client;\n\tprivate _registry: EventRegistry;\n\tprivate _listenedEvents: string[];\n\tprivate _listenedEventFns: { [event: string]: ((...args: any[]) => void)[] };\n\n\tpublic constructor(client: Client, registry: EventRegistry)\n\t{\n\t\tthis._client = client;\n\t\tthis._registry = registry;\n\t\tthis._listenedEvents = [];\n\t\tthis._listenedEventFns = {};\n\t}\n\n\t/**\n\t * Clear all events that currently have registered listeners\n\t */\n\tpublic clearListenedEvents(): void\n\t{\n\t\tthis._listenedEvents = [];\n\t\tfor (const event in this._listenedEventFns)\n\t\t{\n\t\t\tfor (const fn of this._listenedEventFns[event])\n\t\t\t\tthis._client.removeListener(event, fn);\n\n\t\t\tdelete this._listenedEventFns[event];\n\t\t}\n\t}\n\n\t/**\n\t * Begin listening to the given event, dispatching events to the handlers\n\t * stored in the registry for the given event\n\t */\n\tpublic listen(event: string): void\n\t{\n\t\tif (this._listenedEvents.includes(event)) return;\n\t\tif (typeof this._listenedEventFns[event] === 'undefined')\n\t\t\tthis._listenedEventFns[event] = [];\n\n\t\tconst eventFn: (...args: any[]) => void = (...args) => {\n\t\t\tfor (const e of this._registry.events[event])\n\t\t\t\te(...args);\n\t\t};\n\n\t\tthis._listenedEvents.push(event);\n\t\tthis._listenedEventFns[event].push(eventFn);\n\n\t\tthis._client.on(event, eventFn);\n\t}\n}\n"],"sourceRoot":"../../src"}