{"version":3,"sources":["util/logger/LoggerDecorator.ts"],"names":[],"mappings":";;AAAA,qCAAkC;AA8BlC;;;;;;;;;;;;;;;GAeG;AACH,gBAAuB,GAAG,IAAW;IAEpC,IAAI,OAAO,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ;QAC9B,OAAO,CAAC,CAAI,MAAS,EAAE,GAAW,EAAE,EAAE;YACrC,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,KAAK,EAAE,eAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACzE,CAAC,CAAsB,CAAC;IAEzB,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,KAAK,EAAE,eAAM,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;AACvE,CAAC;AARD,wBAQC","file":"LoggerDecorator.js","sourcesContent":["import { Logger } from './Logger';\n\n// /**\n//  * Represents a type that has a `logger` property\n//  * containing the Logger singleton instance\n//  */\n// // export type Loggable<T> = T & { logger: Logger };\n\n// /**\n//  * Class decorator that transforms a class to Loggable<T>.\n//  * Regrettably works but is not properly picked up by intellisense\n//  * at this point in time, meaning compiler errors when attempting\n//  * to access the `logger` property on the decorated class.\n//  * Maybe someday.\n//  *\n//  * Example:\n//  * ```\n//  * &#64loggable\n//  * class Foo { }\n//  * ```\n//  */\n// // export function loggable<T extends Function>(target: T): Loggable<T>\n// // {\n// // \tObject.defineProperty(target.prototype, 'logger',\n// // \t\t{ value: Logger.instance });\n// // \treturn target as Loggable<T>;\n// // }\n\nexport function logger(key: string): PropertyDecorator;\nexport function logger<T>(target: T, key: string): void;\n/**\n * Property decorator that will automatically assign\n * the Logger singleton instance to the decorated\n * class property\n *\n * Example:\n * ```\n * class Foo {\n * \t&#64logger private readonly logger: Logger;\n * \t...\n * ```\n * >**Note:** This is a Typescript feature. If using the logger is desired\n * in Javascript you should simply retrieve the singleton instance via\n * `Logger.instance()`\n * @returns {PropertyDecorator}\n */\nexport function logger(...args: any[]): PropertyDecorator | void\n{\n\tif (typeof args[0] === 'string')\n\t\treturn (<T>(target: T, key: string) => {\n\t\t\tObject.defineProperty(target, key, { value: Logger.instance(args[0]) });\n\t\t}) as PropertyDecorator;\n\n\tObject.defineProperty(args[0], args[1], { value: Logger.instance() });\n}\n"],"sourceRoot":"../../../src"}