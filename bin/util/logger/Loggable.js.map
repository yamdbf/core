{"version":3,"sources":["util/logger/Loggable.ts"],"names":[],"mappings":";;AAAA,qCAAkC;AAQlC,MAAM,YAAY;CAAG;AAErB;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,SAAgB,QAAQ,CAA0B,OAAU,YAAmB;IAE9E,OAAO,KAAM,SAAQ,IAAI;QAAlB;;YAEU,WAAM,GAAW,eAAM,CAAC,QAAQ,EAAE,CAAC;QACpD,CAAC;KAAA,CAAC;AACH,CAAC;AAND,4BAMC","file":"Loggable.js","sourcesContent":["import { Logger } from './Logger';\n\nexport type Constructable<T = {}> = new (...args: any[]) => T;\nexport interface ILoggable\n{\n\tlogger: Logger;\n}\n\nclass BaseLoggable {}\n\n/**\n * Extending this mixin method will give classes a `logger` property\n * containing a reference to the {@link Logger} singleton instance.\n * Accepts a parent class as a parameter when extending another class\n * ```\n * class Foo extends Loggable() {}\n * class Bar extends Loggable(Baz) {}\n * ```\n * Note that this is a mixin function returning a class, not an actual\n * class itself. The method call parentheses are necessary.\n *\n * >**Warning:** While this is fully functional at runtime, due to a TypeScript\n * compiler bug, this will currently throw a compiler error unless you also import\n * `ILoggable`. However, this will error if using the `noUnusedLocals` compiler\n * option, but in my experience does not trigger TSLint's unused import rule.\n * This was labeled as `done` for the TypeScript 2.5 milestone but was removed\n * with no word so I am unsure of the state of this bug going forward. I'm leaving\n * the code in in hopes the bug will be fixed because I really like this method of\n * attaching the Logger. It was my oringial intention when I first wrote the Logger\n * itself but had to settle for alternatives\n * @class Loggable\n * @mixin\n * @property {Logger} logger The Logger instance attached to the Loggable class\n */\nexport function Loggable<T extends Constructable>(Base: T = BaseLoggable as any): Constructable<ILoggable> & T\n{\n\treturn class extends Base\n\t{\n\t\tpublic readonly logger: Logger = Logger.instance();\n\t};\n}\n"],"sourceRoot":"../../../src"}