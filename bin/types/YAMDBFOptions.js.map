{"version":3,"sources":["types/YAMDBFOptions.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG","file":"YAMDBFOptions.js","sourcesContent":["/**\n * @typedef {Object} YAMDBFOptions Object containing required {@link Client} properties to be\n * passed to a Client on construction\n * @property {string} [token] Token needed to connect the Client to Discord\n * @property {string[]} [owner=[]] Can also be a single string<br>See: {@link Client#owner}\n * @property {StorageProviderConstructor} [provider] See: {@link Client#provider}\n * @property {string} [commandsDir] See: {@link Client#commandsDir}\n * @property {string} [eventsDir] See: {@link Client#eventsDir}\n * @property {string} [localeDir] See: {@link Client#localeDir}\n * @property {string} [defaultLang] See: {@link Client#defaultLang}\n * @property {string} [statusText=null] See: {@link Client#statusText}\n * @property {string} [readyText='Client ready!'] See: {@link Client#readyText}\n * @property {boolean} [unknownCommandError=true] See: {@link Client#unknownCommandError}\n * @property {boolean} [dmHelp=true] See: {@link Client#dmHelp}\n * @property {boolean} [passive=false] See: {@link Client#passive}\n * @property {boolean} [pause=false] See: {@link Client#pause}\n * @property {string[]} [disableBase=[]] See: {@link Client#disableBase}\n * @property {string} [ratelimit] Sets a global rate limit on command calls for every user\n * @property {LogLevel} [logLevel] Sets the logging level for the logger. Defaults to `LogLevel.DEBUG`\n * @property {Array<PluginConstructor|string>} [plugins=[]] An array of Plugin classes (not instances)\n * \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tor plugin package name strings to be loaded and used\n * @property {ResolverConstructor[]} [customResolvers=[]] An array of Resolver classes (not instances)\n * @property {Function} [argsParser] Function taking an input string, an optional {@link Command} object,\n * \t\t\t\t\t\t\t\t\t and an optional {@link Message} object that returns an array of argument\n * \t\t\t\t\t\t\t\t\t strings. Should be used instead of middleware for providing an\n * \t\t\t\t\t\t\t\t\t alternative to the default args parsing of splitting input on the\n * \t\t\t\t\t\t\t\t\t Command's specified argument separator\n * @property {object} [buttons] Object mapping keys for easy access to unicode emoji strings or custom\n * \t\t\t\t\t\t\t\temoji id strings. To be used by the Client when compact mode is active<br>\n * \t\t\t\t\t\t\t\tSee: {@link Client#buttons}\n * @property {boolean} [compact=false] Whether or not compact mode should be used\n * @property {boolean} [tsNode=false] Whether or not ts-node is being used, allowing the CommandLoader to\n * \t\t\t\t\t\t\t\t\t  attempt to load .ts files when loading Commands\n */\n\nimport { StorageProviderConstructor } from './StorageProviderConstructor';\nimport { PluginConstructor } from './PluginConstructor';\nimport { ResolverConstructor } from './ResolverConstructor';\nimport { BaseCommandName } from './BaseCommandName';\nimport { LogLevel } from './LogLevel';\nimport { Message } from './Message';\nimport { Command } from '../command/Command';\n\nexport type YAMDBFOptions = {\n\ttoken?: string;\n\towner?: string | string[];\n\tprovider?: StorageProviderConstructor;\n\tcommandsDir?: string;\n\teventsDir?: string;\n\tlocaleDir?: string;\n\tdefaultLang?: string;\n\tstatusText?: string;\n\treadyText?: string;\n\tunknownCommandError?: boolean;\n\tdmHelp?: boolean;\n\tpassive?: boolean;\n\tpause?: boolean;\n\tdisableBase?: BaseCommandName[];\n\tratelimit?: string;\n\tlogLevel?: LogLevel;\n\tplugins?: (PluginConstructor | string)[];\n\tcustomResolvers?: ResolverConstructor[];\n\targsParser?: (input: string, command?: Command, message?: Message) => string[];\n\tbuttons?: { [key: string]: string };\n\tcompact?: boolean;\n\ttsNode?: boolean;\n};\n"],"sourceRoot":"../../src"}